<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>读动物庄园</title>
      <link href="/2020/11/28/%E8%AF%BB%E5%8A%A8%E7%89%A9%E5%BA%84%E5%9B%AD/"/>
      <url>/2020/11/28/%E8%AF%BB%E5%8A%A8%E7%89%A9%E5%BA%84%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p>  今天用了一个多小时读了《动物庄园》,读的时候很轻易的便联想到了建国后的一些历史，极其相似。读后才发现，这是一本1945年出版的书，其原来是用来讽刺苏联历史的。可是相似的场景又在咱们国家上演了。<br><br>  自己之前还是留有人人平等、共同富裕的念想的，看了这本书后，又不禁想问上述的理想难道真的能实现吗？<br><br>  可悲的是，自己的学识尚浅，因为一本书便容易对自我的看法产生较大的质疑，也是挺让人难过的，今后还需要多读书、勤思考，思考这世界本来的样子及规律和未来的发展，以及我这个普通人的生存之道。<br><br>  自己这么多年的努力貌似都是为了成为人上人，从小到大都很少有为了共同富裕而读书，这归根到底还是所受到的教育问题。人都是自私自利的，我还是希望在自身能够好好生活的基础上，为了上述理想而努力，即使我自己也没有多大的信心相信上述理念能够实现。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读小狗钱钱</title>
      <link href="/2020/11/27/%E8%AF%BB%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1/"/>
      <url>/2020/11/27/%E8%AF%BB%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1/</url>
      
        <content type="html"><![CDATA[<ul><li>只有你自己才能强迫自己去做</li><li>我生命中出现了最美好的东西是因为我做了原本不敢做的事情</li><li>一部分收入用来储蓄，一部分用来投资，一部分用来消费</li><li>生活有时真的很难，也很精彩</li><li>树立坚定的希望有钱的目标</li><li>经常记录自己做成的一些事情，树立自己的信心</li><li>尽量不要办理信用卡</li><li>每月应还的贷款越低越好</li><li>尽量不要使用消费型贷款</li><li>消费时,时常考虑这真的有必要吗</li><li>72公式<br>72除以年利润比得本金翻倍的年数<br><br>72除以通货膨胀率得钱贬值一半需要的年数</li></ul><h2 id="我希望有钱的原因"><a href="#我希望有钱的原因" class="headerlink" title="我希望有钱的原因"></a>我希望有钱的原因</h2><p>1.摆脱物质需求带来的困扰<br>2.成为一个有能力帮助他人的人</p><h2 id="划重点"><a href="#划重点" class="headerlink" title="划重点"></a>划重点</h2><ul><li>希望自己获得财务上的成功</li><li>自信　有想法　做自己喜欢的事</li><li>把钱分为日常开销、梦想目标和金鹅账户三部分</li><li>进行明智的投资</li><li>享受生活</li></ul><h2 id="投资要点"><a href="#投资要点" class="headerlink" title="投资要点"></a>投资要点</h2><ul><li>应该把钱投资在安全的地方</li><li>钱应该下很多“金蛋”</li><li>投资应该简单明了而且易于操作</li></ul><h2 id="投资基金的注意事项"><a href="#投资基金的注意事项" class="headerlink" title="投资基金的注意事项"></a>投资基金的注意事项</h2><p>-　此基金应该有至少10年的历史</p><p>假如它在这么长时间内一直有着不错的利润，那么则认为它在未来也不会差</p><ul><li>应该选择大型的跨国股票基金以分散风险</li><li>对基金的走势图进行分析比较，看哪些基金最近几年的年利润最好</li><li>最好的方法是把钱投在一只大型基金，然后5-10年不去看它</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读政治的人生</title>
      <link href="/2020/11/27/%E8%AF%BB%E6%94%BF%E6%B2%BB%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
      <url>/2020/11/27/%E8%AF%BB%E6%94%BF%E6%B2%BB%E7%9A%84%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>   这是王沪宁先生的一本书，内容是王沪宁先生94年的日记，记录的是先生每天的思考和经历。<br><br>   我读了之后感觉很受用，首先了解了学者每天的工作和生活的大体样貌，另外还可以看到先生的学习工作过程与思考的逻辑，同时对比自己，发现相应需要提高的地方。<br><br>其中印象较为深刻的主要有如下几点：</p><ul><li>先生几乎每天或每周都要读书，目的为学习或娱乐</li><li>先生对自己的工作、人生、生活都会有较为全面的思考</li><li>先生周末也会常出去游玩放松心情，我读到时使我眼前一亮</li></ul><p>鉴于以上，自己也会尽量将读书作为自己的一个主要的娱乐方式，并养成习惯；坚持每天或每周思考并记录，是自己避免钻入自己的专业不可自拔，以致变得呆板；注意娱乐放松。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读前辈alswl博客所思</title>
      <link href="/2020/11/20/%E8%AF%BB%E5%89%8D%E8%BE%88alswl%E5%8D%9A%E5%AE%A2%E6%89%80%E6%80%9D/"/>
      <url>/2020/11/20/%E8%AF%BB%E5%89%8D%E8%BE%88alswl%E5%8D%9A%E5%AE%A2%E6%89%80%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p>刚刚写完毕设目录，逛了会github，发现了alwsl的博客</p><p>看了前辈从2006年到现在的完整的记录，这个时间线的读起来使人温馨、又深刻，仿佛一个人的生活像放电影一样在你面前闪过。<br>其中不乏对生活的抗争，制定计划、完成和完不成计划；年终总结时因为自己没有完成相应任务亦或是做的不够好而自责；对自己执行力不足的难过，<br>对未来不确定性的担忧。感觉就像自己的未来一样，甚至也不知自己的未来是否能像前辈一样优秀。</p><p>最近一段时间来说，暑期实习过后，在做总结的时候就有些难受感觉三个月的时间里自己并没有像希望中的进步那么多，并且这是在自己很努力的实习并学习的情况下。<br>亦或许是自己过于急功近利，努力的学习工作所产生的量变，是会慢慢产生作用的。<br>因为这段实习经历，使我的简历更加好看，后面找工作的时候相对更加顺利；<br>同样因为这段实习经历中，师兄对我说的话，让我的恋爱观念有所转变，此时也找到了女朋友。</p><p>返校后的已有两个多月，时间飞逝，自我感觉在这段时光中的收获也不是很多，这也是最近我比较自责的原因。<br>在看了前辈博客后，我心态有所缓和，十几年时光在眼前一晃而过。</p><p>说起心里收获大还是不大的标准，可能得花上一年的时间做出那么一件上的了台面的事情，才算有大的收获。<br>可这一件事又不是凭空就能完成的，不也是需要前面很长时间的努力和积累吗。<br>当然最近一段时间，总有些的地方做的不够好，比较懒惰懈怠，时间利用的不够充分，这是需要提高的地方。<br>还有就是之前做了一个错误的决定在宿舍学习做毕设，这直接导致近一个月时间的荒废，每天在宿舍划水，有效学习时间太低。<br>事已至此，也算是得了个教训，更加明白了自己薄弱的地方，在没有学习氛围的地方自己的自制力约等于零；<br>而在学习氛围好的地方，自己的自制力特别强；同时值得庆幸的是自己拥有跳出舒适圈的勇气和自制力，这还是不错的。</p><p>所以说，时常静下心来思考反思自己的不足，并且但行好事，莫问前程，结果总是不会差的。<br>心态也要好，过于急功近利是不利的。</p>]]></content>
      
      
      <categories>
          
          <category> 观点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我与地坛</title>
      <link href="/2020/10/04/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/"/>
      <url>/2020/10/04/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/</url>
      
        <content type="html"><![CDATA[<p>今早上起床读了我与地坛<br><br>也是按照聪安大佬的认知升级里的”一个字一个字的细读”的方法来读这本书。读得慢一点确实是可以感受到作者的逻辑与思考，体会作者写文章时的心境。当­然史铁生先生写的文字特别的真实，很容易让人产出共鸣。<br><br>我在读的过程中看到 一些触动人的话，就会忍不住的停下来思考。作者的观点和想法与自己的有哪些不同，让我很有收获。<br><br>文章中描写地坛、母亲、长跑的小哥、老年父妇以及爱唱歌的青年，都是那么得逼真，让人对他们的经历和人生感同身受。 作者对母亲的愧疚让我久久不忘怀，我又何长不是如此呢，有时将自己最不好 的一面毫无保留的展示论了最亲近的人，也为母亲考虑的特别少，这一段 是在 自责中读过来的。<br><br>文中对生与死的思考也让人印象深刻。其中有一句活着不是为了写作，写作是为­了活着！”有时忙碌中真的会忘记自己活着，或说生活的因果关系，又或是自己 生活的真正意义。有时会为了让自己免于孤独和寂寞，刻意的让自己每天都埋头 于实验室里、扎身于游戏里。宝贵的时间消耗了，同时因为缺乏思考和注意力， 并没有收获到太多东西。对了这个问题，我自己目前真的没有太好的解决办法，慎独真的是有些太难了。我考虑对自己的目标描述的再具体些、 执行力再加强些，又或是找一个对象在一定程度上解决”独”这个问题。<br><br>史铁生先生对于地坛里环境，即先生对周围的环境观察细微之至。这一点也是 我所缺乏的，日后还是要多观察身边的风景。<br></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>男人来自火星 女人来自金星</title>
      <link href="/2020/09/16/%E7%94%B7%E4%BA%BA%E6%9D%A5%E8%87%AA%E7%81%AB%E6%98%9F-%E5%A5%B3%E4%BA%BA%E6%9D%A5%E8%87%AA%E9%87%91%E6%98%9F/"/>
      <url>/2020/09/16/%E7%94%B7%E4%BA%BA%E6%9D%A5%E8%87%AA%E7%81%AB%E6%98%9F-%E5%A5%B3%E4%BA%BA%E6%9D%A5%E8%87%AA%E9%87%91%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<ul><li><p>记住我们的不同<br>男人和女人没有警觉彼此应该有所不同，因此纷争不断</p></li><li><p>不要在女人碰到问题的时候给予解决方案<br>在第一时间做一个好的倾听者，仔细听女人说的话，然后给予理解；<br>过后再讨论解决方案。</p></li><li><p>在面临问题时，男人更希望沉默　女人更希望讨论<br>可能下班后，男人更希望安静地继续解决上班时碰到的问题，或者自己单独看看电视、球赛等放松下；<br>女人会更希望讨论自己上班时碰到问题，在和别人讨论时能够放松自己的心情。</p></li><li><p>如何让男人说话<br>很多时候男人说话是需要理由的，很少能做到只为单纯的分享而谈话<br>当自己不想说话或者过分亲密时，可以表达出来，说明“我需要些时间独处”</p></li><li><p>男女有不同的情感需求<br>当男人对女人的感觉表示兴趣、关心她的幸福时,她会觉得被爱、被关<br>心;<br>男人如果能不加判断,感同身受地倾听女人传送感觉,她会觉得自己被<br>爱与了解;<br>如果男人能认知和优先考虑她的权利、愿望和需求,她会觉得自己很受<br>尊重,以送花或记得结婚周年庆这样的方式表示尊重是满足女人第三个基本<br>需要的必要手段;</p></li><li><p>看到了第九章如何避免争论　等后续碰到了问题接着看吧</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>书单</title>
      <link href="/2020/09/15/%E4%B9%A6%E5%8D%95/"/>
      <url>/2020/09/15/%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<ul><li>西游记</li><li>爱的艺术</li><li>小狗钱钱</li><li>老人与海</li><li>动物庄园</li><li>金字塔原理</li><li>罗杰疑案</li><li>一个女生一生中二十四个小时</li><li>穷查理宝典</li><li>男人来自火星，女人来自金星</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快手秋招面试</title>
      <link href="/2020/09/07/%E5%BF%AB%E6%89%8B%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/09/07/%E5%BF%AB%E6%89%8B%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一面-9-7-14-00"><a href="#一面-9-7-14-00" class="headerlink" title="一面(9.7 14:00)"></a>一面(9.7 14:00)</h3><ul><li>面试官介绍</li><li>自我介绍</li><li>String和StringBuilder区别和使用场景</li><li>String并发问题的解决方案</li><li>String s1 = new String(“xyz”) String s2 = new String(“xyz”)  String s3 = “xy” + “z”<br>判断一共生成了几个字符串对象</li><li>HashMap实现源码</li><li>HashMap什么时候扩容</li><li>ConcurrentHashMap实现源码　如何解决并发问题</li><li>并发情况下如何实现一个计数器</li><li>除了Synchronized还是用哪些解决并发问题的工具</li><li>volatile的作用以及使用场景</li><li>分布式锁的使用以及注意的问题</li><li>爱奇艺中基于数据库构建无法构建任务</li><li>时间轮算法的实现</li><li>负载均衡比赛中QPS的优化思路</li><li>算法题:一个有序数据找出其中一个元素的重复次数</li><li>有什么问题　主要做的哪些业务</li></ul><h3 id="二面-9-12-14-00"><a href="#二面-9-12-14-00" class="headerlink" title="二面(9.12 14:00)"></a>二面(9.12 14:00)</h3><ul><li>自我介绍</li><li>实习做的东西介绍</li><li>负载均衡比赛介绍</li><li>java多态</li><li>接口和抽象类的区别</li><li>volatile的作用</li><li>mysql事务隔离级别</li><li>联合索引(a,b,c)命中</li><li>算法题：一个数组返回排序后的p95</li></ul><h3 id="HR面-9-18-15-30"><a href="#HR面-9-18-15-30" class="headerlink" title="HR面(9.18 15:30)"></a>HR面(9.18 15:30)</h3><ul><li>自我介绍</li><li>介绍下在爱奇艺的实习</li><li>介绍下在钉钉的实习</li><li>比较下两段实习有何不同以及有哪些收获</li><li>介绍下在实验室做的停车项目</li><li>用快手吗 喜欢看哪类视频</li><li>你站在用户的角度觉得快手有哪些可以改进的地方</li><li>手里收到了哪些offer</li><li>在收到的offer，你会如何做选择，依据是什么</li><li>你会来快手吗</li><li>你有什么想问的问题吗<br>接下来多久能收到面试反馈</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速成长</title>
      <link href="/2020/09/04/%E5%BF%AB%E9%80%9F%E6%88%90%E9%95%BF/"/>
      <url>/2020/09/04/%E5%BF%AB%E9%80%9F%E6%88%90%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<p>读大佬快速成长系列的总结</p><h1 id="开始认知升级"><a href="#开始认知升级" class="headerlink" title="开始认知升级"></a>开始认知升级</h1><h2 id="1-思考脑与反射脑"><a href="#1-思考脑与反射脑" class="headerlink" title="1.思考脑与反射脑"></a>1.思考脑与反射脑</h2><p>一个人一天的行为中，5% 是非习惯性的，用思考脑的逻辑驱动；<br>95% 的是习惯性的，用反射脑的直觉驱动。</p><p>自己一天中很多判断、观点与行为，都是靠着直觉、习惯产生的。<br>比如学习一会自动拿起手机，漫无目的的滑动手机。</p><p>强化我们 95% 的直觉习惯，变成更高质量的直觉习惯。</p><h3 id="专注输入：做好只字不差阅读，只字不差地听"><a href="#专注输入：做好只字不差阅读，只字不差地听" class="headerlink" title="专注输入：做好只字不差阅读，只字不差地听"></a>专注输入：做好只字不差阅读，只字不差地听</h3><p>一字不差的阅读和听，才能更深层次领略作者的逻辑，产生自己的逻辑思考，考虑自己的逻辑和作者的逻辑差异和共同之处在哪里</p><h3 id="专注输出：定制做ppt、写文章进行分享"><a href="#专注输出：定制做ppt、写文章进行分享" class="headerlink" title="专注输出：定制做ppt、写文章进行分享"></a>专注输出：定制做ppt、写文章进行分享</h3><p>通过输出检测学习和成长质量，把学习的内容用自己的语言凝练成ppt或文章的形式，加深对学习内容的理解。</p><a id="more"></a><p>所以对我们来说，想要没有焦虑，想要人生变得踏实，把泛读变成精细化的逻辑训练，把95%中的低质量习惯反射，训练成逻辑后的高质量习惯反射，训练过程会痛苦，但是一旦训练成直觉，会变的非常自然。</p><p><strong>划重点：所谓的直觉反射就是通过大量的逻辑反复训练，提升自己的直觉准确性，从狭窄的5%到广阔的95%。</strong></p><h2 id="2-习以为常"><a href="#2-习以为常" class="headerlink" title="2.习以为常"></a>2.习以为常</h2><p>如何改变自己的习惯，如何将目前消费自己的习惯(下班后刷朋友圈、b站等)转换为投资自己的习惯(看书、思考写文章)</p><p>有意识的在下班后、工作之余、学习累了之后，将拿起手机这个行为转变为一些正向的行为，时间长了之后，这就变为习以为常的东西了。<br>可能在你不知不觉中，就发现自己下班后就想看会书(我看看在不久的将来在我身上会不会实现)</p><p><strong>划重点：所谓改变习惯就是在触发条件发生进入下一个行为时，让自己做对选择题</strong></p><h2 id="3-时间管理-三八理论"><a href="#3-时间管理-三八理论" class="headerlink" title="3.时间管理:三八理论"></a>3.时间管理:三八理论</h2><p>想办法在第三个 8 小时中找到不被打扰的时间</p><p><strong>划重点：所谓时间管理就是找到不被打扰的时间用于投资自己的成长。</strong></p><h2 id="4-最重要的财富：注意力"><a href="#4-最重要的财富：注意力" class="headerlink" title="4.最重要的财富：注意力"></a>4.最重要的财富：注意力</h2><p>先问自己2个问题：</p><pre><code>1.昨天、上周、上月看过的内容还记得吗？2.进一步区分看过的内容：哪些是成长？哪些是谈资或甚至都没有机会谈？</code></pre><p><strong>划重点：所谓提升注意力就是专注在目标事务上，直到产出预期的结果。</strong></p><h2 id="5-拿结果手段：执行力"><a href="#5-拿结果手段：执行力" class="headerlink" title="5.拿结果手段：执行力"></a>5.拿结果手段：执行力</h2><p>我们的认知很容易接受前人总结的观点，因为太有道理，所以欣然接受，然后会像传球一样，把观点再次传给其他人，但是整个传播链路上缺少形成观点的方法传播，也就是大家听到看到，很多时候只是结果，缺乏了过程的输入，看到的是别人的成功，但是看不到别人是如何成功的。</p><p><strong>划重点：执行力就是想明白，然后一步一步做下去。</strong></p><h2 id="6-贵人"><a href="#6-贵人" class="headerlink" title="6.贵人"></a>6.贵人</h2><p>首先让贵人真正的了解你，在确定贵人能够帮助你，影响你时，你应该大胆去承担一些有挑战的事情，哪怕遇到委屈，遇到压力，遇到失败，要相信此时的你才是真实的你，你的天花板，你的瓶颈就在于此，借助贵人助你提升能力，下次同样的事情来临时，自己就能够得心应手，这种能力的锻炼机会非常少，和阿里经常说的借事修人非常匹配，事情失败了没关系，但人要成，人的能力要提升。</p><p><strong>划重点：贵人就是可以持续陪你输出高质量的人。</strong></p><h2 id="7-会议"><a href="#7-会议" class="headerlink" title="7.会议"></a>7.会议</h2><p><strong>划重点：参与会议讨论就是在模拟机器学习，不但通过正反馈来优化自己的逻辑和观点</strong></p><h2 id="8-跳出舒适区"><a href="#8-跳出舒适区" class="headerlink" title="8.跳出舒适区"></a>8.跳出舒适区</h2><p>需要让难度和技能正好匹配，在你接受挑战时你还不知道该怎么做，但是调动自己最高水平的技能，再稍微努力突破一点，你正好能解决这个问题，就是心流的体验，这是一个奇妙的感觉，你沉浸在工作之中忘记了时间的流动，甚至可能忘记自身的存在。</p><p><strong>划重点：跳出舒适区就是进入学习区，平衡挑战和技能从而达到心流体验</strong></p><h2 id="9-职业规划"><a href="#9-职业规划" class="headerlink" title="9.职业规划"></a>9.职业规划</h2><p>大部分人不需要做职业规划，大部分人并没有办法一直为了自己的职业目标始终如一的坚持努力；<br>只有一小部分个人素质非常好的人才需要职业规划，他们会为了一个目标持续不断的努力多年，直到目标实现。</p><p>或许可以转变下思路，不要把自己的规划或者目标定位一段时间后你要做到P7还是你要考什么大学。<br>可以将眼光向下挖掘你升到P7需要哪些能力，需要做哪些事情，重点突破三、四项需要的能力。</p><p>比如说我作为一个程序员在代码能力上有一定的提升，很多程序员都喜欢安静写代码，在交流表达、部门协调、项目把控上或许没那么擅长，是否可以增强这些非对称的能力，<br>置于如何提升这些能力，我现在还没有明确的方向，可能还得结合前人经验和项目实践学习。</p><p><strong>向着下一阶段的自画像发展</strong><br>想象一下一年后，你自己在各个维度的个人能力是什么样子的，比如说阅读英文文档的速度、代码编写的速度与稳定性、业务需求的把控等。<br>照着这些目标努力。</p><p><strong>划重点：所谓职业规划，就是工作能力提升。</strong></p><p>从我要升到什么职级，变为我要拥有这些职级所需要的能力。</p><h2 id="10-时间换空间"><a href="#10-时间换空间" class="headerlink" title="10.时间换空间"></a>10.时间换空间</h2><p>持之以恒，日拱一卒</p><p>在每天不被打扰的时间里投资自己，通过思考和输出发现自己的不足，并进行弥补。在这学习和实践的循环往复中不断提升自己，将自己逼到临界点，跨过临界点的那一刻，立马就能体会到自己的成长和变化。</p><p>而自己一旦体会到成长，我们会把前一段时间的成长过程进行总结，抽象总结出自己成长的最佳实践，再次践行，把自己逼到下一个成长临界点，然后再次跨过去，如此循环，慢慢提升自己多元能力。</p><p>所有这些能力的提升，在未来某个机会来临时，因为具备足够的能力去驾驭它，此时我们抱着　120%　能力把事情做成，事成了，能力也就有了，空间自然就有了，也就被认可了。</p><p><strong>划重点：所谓时间换空间，就是慢慢来，持之以恒，成长最快。</strong></p><p>就是让我们无法看清未来是什么样子的时候，把注意力聚焦在当下，做成长该做的事。</p><h1 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h1><ul><li><p>认知成长：知道何为成长，自己所处角色是平庸者、觉醒者，思行者，还是践行者；</p></li><li><p>善用财富：每个人身上的财富有金钱、时间和注意力，应该如何善用财富；</p></li><li><p>懂得分辨：成长过程中不断出现的干扰，懂得区分哪些是信息，哪些是知识，哪些是贵人，哪些是智慧；</p></li><li><p>成长心态：所谓以终为始，就是站在未来看现在，需要作出的行动，具备的心态；</p></li><li><p>成长方法：套用方法，临摹他人的成长方法，也能获得快速成长，我来告诉大家几个实用方法；</p><p>  只字不差的阅读、只字不差的听;<br>  模仿;<br>  自问;<br>  写作;<br>  写ppt;</p></li><li><p>成长结果：所有的成长最终还是需要内化成自己的能力，多维视角慢慢拓展自己的能力圈；</p></li><li><p>衡量标准：当开始拓展能力圈后，用什么去衡量自己的成长；</p></li><li><p>个人标签：希望给自己打造什么样的个人标签，身上的什么特点吸引了别人；</p></li><li><p>利TA：长10年，成大树的同时帮助他人长成大树，多做利TA的事情；</p></li></ul><p>实际工作的产出应该包括个人结果和业务结果或技术结果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>所谓直觉反射，就是通过大量的逻辑反复训练，提升自己的直觉准确性，从狭窄的5%进入广阔的95%；</p><p>所谓以习为常，就是在触发条件发生进入下一个行为前，做对选择题；</p><p>所谓时间管理，就是找到不被打扰的时间用于投资自己；</p><p>所谓注意力，就是专注在目标事务上，直到产生期望结果；</p><p>所谓执行力，就是让自己先想明白，然后一步一步走下去；</p><p>所谓贵人，及是能够持续陪你一起输出高质量内容的人；</p><p>所谓会议，就是模拟机器学习思路，通过参与讨论获得正反馈来验证自己的观点；</p><p>所谓跳出舒适区，就是先跳出，然后进入学习区，平衡挑战和能力达到心流的体验；</p><p>所谓职业规划，就是提升工作需要的能力；</p><p>所谓时间换空间，就是慢慢来，持之以恒，成长最快；</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/3a41ff4d3845" target="_blank" rel="noopener">https://www.jianshu.com/p/3a41ff4d3845</a><br><a href="https://www.jianshu.com/p/55d123ede3dd" target="_blank" rel="noopener">https://www.jianshu.com/p/55d123ede3dd</a></p>]]></content>
      
      
      <categories>
          
          <category> 观点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/2020/09/02/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2020/09/02/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="基于tair的分布式锁"><a href="#基于tair的分布式锁" class="headerlink" title="基于tair的分布式锁"></a>基于tair的分布式锁</h2><h3 id="加锁流程"><a href="#加锁流程" class="headerlink" title="加锁流程"></a>加锁流程</h3><ul><li>流程大致为，先get查询指定锁key是否为空，判断是否有其他线程已经获取到锁;</li><li>若get超时，则重试<ul><li>若为空，使用put存入当前线程的lock value，可使用uuid等生成；<ul><li>成功则返回</li><li>　不成功递归重试</li></ul></li><li>若不为空，判断当前锁key的值是否等于自己lock value，判断是否是自己的锁<a id="more"></a></li></ul></li></ul><h3 id="核心api"><a href="#核心api" class="headerlink" title="核心api"></a>核心api</h3><ul><li>使用put带有version的api保证每次更新同一version数据时，只有一个能够put成功</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ResultCode code &#x3D; locker.ldbTairManager.put(NAMESPACE, lockKey, locker.getValue(), version, timeout);</span></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> com.taobao.tair.DataEntry;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> com.taobao.tair.Result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> com.taobao.tair.ResultCode;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> com.taobao.tair.TairManager;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> org.apache.commons.lang.NotImplementedException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> org.slf4j.Logger;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> org.slf4j.helpers.FormattingTuple;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> org.slf4j.helpers.MessageFormatter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> javax.annotation.Resource;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.net.InetAddress;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.net.UnknownHostException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonLocker</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(CommonLocker<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-meta">@Resource</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">private</span> TairManager ldbTairManager;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">short</span> NAMESPACE = <span class="hljs-number">1310</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CommonLocker locker;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">if</span> (locker != <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">synchronized</span> (CommonLocker<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">if</span> (locker == <span class="hljs-keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                locker = <span class="hljs-keyword">this</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lock <span class="hljs-title">newLock</span><span class="hljs-params">(String format, Object... argArray)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        FormattingTuple ft = MessageFormatter.arrayFormat(format, argArray);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> newLock(ft.getMessage());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lock <span class="hljs-title">newLock</span><span class="hljs-params">(String strKey)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        String key = <span class="hljs-string">"_tl_"</span> + strKey;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TairLock(key, CommonConfig.lock_default_timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lock <span class="hljs-title">newLock</span><span class="hljs-params">(String strKey, <span class="hljs-keyword">int</span> timeout)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        String key = <span class="hljs-string">"_tl_"</span> + strKey;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TairLock(key, timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TairLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">private</span> String lockKey;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> gotLock = <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> retryGet = <span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> retryPut = <span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TairLock</span><span class="hljs-params">(String key, <span class="hljs-keyword">int</span> timeout)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">this</span>.lockKey = tokey(key);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">this</span>.timeout = timeout;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> tryLock(timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">         * need finally do unlock</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">         *</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">         */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">int</span> timeout)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">            Result&lt;DataEntry&gt; result = locker.ldbTairManager.get(NAMESPACE, lockKey);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">while</span> (retryGet++ &lt; CommonConfig.lock_get_max_retry &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">                    (result == <span class="hljs-keyword">null</span> || ResultCode.CONNERROR.equals(result.getRc()) || ResultCode.TIMEOUT.equals(result.getRc()) || ResultCode.UNKNOW.equals(result.getRc()))) <span class="hljs-comment">// 重试一次</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">                result = locker.ldbTairManager.get(NAMESPACE, lockKey);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">if</span> (ResultCode.DATANOTEXSITS.equals(result.getRc())) &#123; <span class="hljs-comment">// lock is free</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">                <span class="hljs-comment">// 已验证version 2表示为空，若不是为空，则返回version error</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">                ResultCode code = locker.ldbTairManager.put(NAMESPACE, lockKey, locker.getValue(), <span class="hljs-number">2</span>, timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">                <span class="hljs-keyword">if</span> (ResultCode.SUCCESS.equals(code)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">                    gotLock = <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (retryPut++ &lt; CommonConfig.lock_put_max_retry &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">                        (code == <span class="hljs-keyword">null</span> || ResultCode.CONNERROR.equals(result.getRc()) || ResultCode.TIMEOUT.equals(result.getRc()) || ResultCode.UNKNOW.equals(result.getRc()))) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">                    <span class="hljs-keyword">return</span> tryLock(timeout);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getValue() != <span class="hljs-keyword">null</span> &amp;&amp; locker.getValue().equals(result.getValue().getValue())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 【注意】其实这里线程复用时，ThreadName有相同风险，可以改为uuid逻辑，复用锁传入uuid。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">                <span class="hljs-comment">// 若是自己的锁，自己继续用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">                gotLock = <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// 到这里表示没有拿到锁</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">if</span> (gotLock) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">                ResultCode invalidCode = locker.ldbTairManager.invalid(NAMESPACE, lockKey);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">                gotLock = <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> l, TimeUnit timeUnit)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotImplementedException();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 【注意】其实这里线程复用时，ThreadName有相同风险，可以改为uuid逻辑，复用锁传入uuid。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> getHostname() + <span class="hljs-string">":"</span> + Thread.currentThread().getName();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">     * 获得机器名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">     *</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">132</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">133</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getHostname</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">134</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">135</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> InetAddress.getLocalHost().getHostName();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">136</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">137</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"[unknown]"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">138</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">139</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">140</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">141</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLdbTairManager</span><span class="hljs-params">(TairManager ldbTairManager)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">142</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">this</span>.ldbTairManager = ldbTairManager;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">143</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">144</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h2><h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>超时是无法避免的，可采用重试的方式解决</p><p>tair大神的回复：超时请重试</p><h3 id="无法释放锁的问题"><a href="#无法释放锁的问题" class="headerlink" title="无法释放锁的问题"></a>无法释放锁的问题</h3><ul><li>使用时在finally代码块内释放锁</li><li>设置过期时间，超时自动释放锁</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.aliyun.com/article/58928" target="_blank" rel="noopener">https://developer.aliyun.com/article/58928</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团到家秋招面试</title>
      <link href="/2020/09/01/%E7%BE%8E%E5%9B%A2%E5%88%B0%E5%AE%B6%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/09/01/%E7%BE%8E%E5%9B%A2%E5%88%B0%E5%AE%B6%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一面-9-1-17-00"><a href="#一面-9-1-17-00" class="headerlink" title="一面(9.1 17:00)"></a>一面(9.1 17:00)</h3><ul><li>面试官介绍业务</li><li>自我介绍</li><li>时间轮算法的实现<ul><li>稳定性的保障</li></ul></li><li>负载均衡比赛<ul><li>实现</li><li>有没有看过排名靠前的代码</li><li>并发队列有哪些种</li><li>算法优缺点</li><li>异步非堵塞如何实现</li><li>说说nio</li><li>自己用nio实现</li></ul></li><li>cpl 分布式锁</li><li>白屏监控实现</li><li>浏览器获取网页的过程</li><li>登录一个网站，后续如何保持登录状态</li><li>做题<ul><li>一串信封有长和宽，最多可以套多少层</li><li>sql题目，select c1,sum(c2) as s from t group by c1 order by s desc limit 1,1;</li><li>二叉树前序遍历的递归和非递归实现<a id="more"></a>    <h3 id="二面-9-2-17-00"><a href="#二面-9-2-17-00" class="headerlink" title="二面(9.2 17:00)"></a>二面(9.2 17:00)</h3></li></ul></li><li>自我介绍</li><li>jvm csm回收器回收过程</li><li>新生代突然gc时间长的原因</li><li>线程池的核心参数<br>  -　核心线程数　最大线程数　设置依据<pre><code>- cpu核心数+1- 业务隔离线程数 </code></pre></li><li>高并发编程注意的问题</li><li>分布式锁如何实现的</li><li>synchronized 和 volatile　区别</li><li>数据库　索引</li><li>数据库事务</li><li>tcp 拥塞控制</li><li>数据库建立索引注意的问题</li><li>一百万的表根据时间戳列范围查询，如何提高查询速度</li><li>一个先升序后降序的数组，查找拐点</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美团 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯秋招面试</title>
      <link href="/2020/08/31/%E8%85%BE%E8%AE%AF%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/08/31/%E8%85%BE%E8%AE%AF%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="WXG一面-8-31-19-00"><a href="#WXG一面-8-31-19-00" class="headerlink" title="WXG一面(8.31 19:00)"></a>WXG一面(8.31 19:00)</h3><ul><li>自我介绍</li><li>实习做的东西</li><li>白屏监控<ul><li>消息队列使用中需要注意的东西<ul><li>可能多次消费同一消息，消费接口幂等</li><li>保证消费成功，通过抛出异常实现</li></ul></li></ul></li><li>cpl业务<ul><li>组织用户粒度隔离　分布式锁</li><li>并发超额造成资损 异步补偿</li></ul></li><li>优惠券<ul><li>是否出现优惠券已经消费了，但是个人显示优惠券仍然可以使用<ul><li>这块回答的不好</li></ul></li></ul></li><li>redis有序集合的底层数据接口的实现</li><li>对redis的理解</li><li>缓存穿透的解决方案</li><li>跳表和红黑树的比较</li><li>算法题目<ul><li>int型判断是否是回文<ul><li>注意溢出</li></ul></li><li>字符串比较<ul><li>暴力解决</li><li>KMP算法<ul><li>不会，现场查资料，然后回答</li></ul></li></ul></li></ul></li><li>http和https的区别<ul><li>https的具体过程<ul><li>说的不准确，现场查资料，回答</li></ul></li></ul></li><li>mysql索引，B+树的好处</li><li>问面试官问题<ul><li>部门业务<br>  微信支付、客户营销、客户资料</li><li>团队规模</li><li>团队base地</li></ul></li></ul><h3 id="WXG二面-9-7-12-00"><a href="#WXG二面-9-7-12-00" class="headerlink" title="WXG二面(9.7 12:00)"></a>WXG二面(9.7 12:00)</h3><ul><li>两个有序数组进行归并</li><li>快排的时间复杂度</li><li>如果一个数组基本有序，那个排序算法效率最高</li><li>100枚硬币其中有一枚是假币，现在有一个天平如何用最少的称重次数，判断假币和真币哪个重</li></ul><h3 id="WXG三面面委-9-14-14-00"><a href="#WXG三面面委-9-14-14-00" class="headerlink" title="WXG三面面委(9.14 14:00)"></a>WXG三面面委(9.14 14:00)</h3><p>/*</p><ol><li>现在有一棵二叉树，树上的节点有一个0-9的值。从根到叶子节点的路径上构成一个整数，求这些整数的和<br> 1<br>/ <br>2   3<br>就是12 + 13 = 25</li><li>工行有30万个员工，其工卡号码分别是1~30万，有接下来的某天他们将举行年会，需要抽出10万个员工发奖品。<br>我们有一个随机数生成函数rand()能够随机均匀生成[0, 65535]的整数，请写一个抽奖程序，输出这10万个员工的工卡号码。</li></ol><p>*/</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(TreeNode root)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">return</span> trace(root, <span class="hljs-number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trace</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> temp)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        res += temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">int</span> val = root.val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    temp = temp * <span class="hljs-number">10</span> + val</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      trace(root.left, temp);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      trace(root.right, temp);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Random</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">// int retryCount = 0;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">// int maxRetryCount = 10;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">randomInt</span><span class="hljs-params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">int</span> max = <span class="hljs-number">300000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">int</span> temp = rand() * <span class="hljs-number">6</span> + random5();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">while</span>(temp &gt; max)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">          temp = randomInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">return</span> temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">    返回随机数1-5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">    */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">random5</span><span class="hljs-params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">int</span> temp = rand() / <span class="hljs-number">60000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">while</span>(temp &gt; <span class="hljs-number">5</span> || temp &lt; <span class="hljs-number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        temp = rand() / <span class="hljs-number">60000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">return</span> temp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>说说对进程和线程的理解</li></ul><h3 id="WXG四面面委-9-14-16-30"><a href="#WXG四面面委-9-14-16-30" class="headerlink" title="WXG四面面委(9.14 16:30)"></a>WXG四面面委(9.14 16:30)</h3><ul><li><p>算法题:完全二叉树　找三个子节点的最小公共父节点</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.Scanner;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ashang  970090853@qq.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 20-9-14 下午4:38</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"> * &lt;p&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"> * 类说明：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"> * &lt;p&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution11</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">     * 依次输入整数 k, a, b, c，得出结果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        Solution11 solution = <span class="hljs-keyword">new</span> Solution11();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">int</span> k = <span class="hljs-number">4</span>, a = <span class="hljs-number">10</span>, b = <span class="hljs-number">15</span>, c = <span class="hljs-number">13</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        k = in.nextInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        a = in.nextInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        b = in.nextInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        c = in.nextInt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        System.out.println(solution.solution(k, a, b, c));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">solution</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">int</span> r = (<span class="hljs-keyword">int</span>) (Math.pow(<span class="hljs-number">2</span>, k) - <span class="hljs-number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> trace(<span class="hljs-number">1</span>, r, a, b, c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">int</span> mid = l + (r - l) / <span class="hljs-number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">boolean</span> isRoot = ((a - mid) * (b - mid) &lt;= <span class="hljs-number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                || (a - mid) * (c - mid) &lt;= <span class="hljs-number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                || (b - mid) * (c - mid) &lt;= <span class="hljs-number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">if</span> (isRoot) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> mid;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a &lt; mid)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> trace(l, mid - <span class="hljs-number">1</span>, a, b, c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        &#125;<span class="hljs-keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> trace(mid + <span class="hljs-number">1</span>, r, a, b, c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>算法题: 逆旋转数组　找其中子数组</p></li><li><p>算法题: 概率类题目　a,b,c,d 每次随机其中一个，随机两个，重复情况不要，是的a:b:c:d概率为1:2:3:4</p></li><li><p>实习中对自己来说最有挑战的点</p></li><li><p>愿意转c++吗</p></li><li><p>停车云项目的背景</p></li><li><p>手里有几个offer</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猿辅导秋招面试</title>
      <link href="/2020/08/31/%E7%8C%BF%E8%BE%85%E5%AF%BC%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/08/31/%E7%8C%BF%E8%BE%85%E5%AF%BC%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一面-8-29-09-00"><a href="#一面-8-29-09-00" class="headerlink" title="一面(8.29 09::00)"></a>一面(8.29 09::00)</h3><ul><li>redis线程模型</li><li>redis跳表<br>其他的忘了，常规面试题目</li><li>算法题题目<br>1231212312 转换为ip　比如123.12.123.12<br>有多少种列多少种</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 猿辅导 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东技术中台秋招面试</title>
      <link href="/2020/08/05/%E4%BA%AC%E4%B8%9C%E6%8A%80%E6%9C%AF%E4%B8%AD%E5%8F%B0%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/08/05/%E4%BA%AC%E4%B8%9C%E6%8A%80%E6%9C%AF%E4%B8%AD%E5%8F%B0%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一面-8-4-22-00"><a href="#一面-8-4-22-00" class="headerlink" title="一面(8.4 22:00)"></a>一面(8.4 22:00)</h3><ul><li>jvm内存　垃圾回收</li><li>双亲委派</li><li>数据库事务<ul><li>特性</li><li>隔离等级　问题　解决的方法</li></ul></li><li>索引</li><li>缓存问题 雪崩　穿透　击穿</li><li>cap<br>  -举例ap场景<br>  -举例cp场景</li><li>负载均衡比赛</li><li>以为我是实习。。声明是秋招</li><li>问题<br>问了主要的啥业务或技术，做的监控</li></ul><h3 id="二面-8-5-22-00"><a href="#二面-8-5-22-00" class="headerlink" title="二面(8.5 22:00)"></a>二面(8.5 22:00)</h3><ul><li>自我介绍</li><li>负载均衡比赛</li><li>jvm垃圾回收</li><li>场景：服务接收很多数据，如何配置jvm内存比例<ul><li>哪些垃圾回收器比较好<br>无脑扩容</li></ul></li><li>spring　bean的生命周期</li><li>ioc和aop使用的好处</li><li>不适用spring如何保证bean的单例</li><li>在使用mysql和sql语句上有哪些比较好的设计或优化</li><li>redis集群的场景</li><li>项目中遇到的有挑战性的问题</li><li>场景：有个服务接收请求到数据库操作，突然并发比较高，导致数据库顶不住<ul><li>业务线程池隔离</li><li>二级方案</li></ul></li><li>场景：A生产消息,到消息队列,B消费消息,出现消息积压,如何定位问题</li><li>Rest接口设计</li><li>问题：京东集团都是用的咱们这边的监控吗<br>主要是京东商城在使用</li></ul><h3 id="三面-8-9-20-00"><a href="#三面-8-9-20-00" class="headerlink" title="三面(8.9 20:00)"></a>三面(8.9 20:00)</h3><ul><li>自我介绍</li><li>负载均衡比赛介绍</li><li>说说使用aop elk日志处理的经验</li><li>场景：目前有三个子系统(生产、销售、人员)，上层有个管理系统，原有的三个子系统有各自的权限控制模型，权限设计上如何增加新的管理系统，<br>并兼容下面的子系统</li><li>场景: 有100w个url，检测上述url返回的状态码是否是200;讨论具体实现</li><li>实习之后的时间安排</li><li>手里有哪些offer</li><li>问题:<br>面试官介绍部门详情</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 京东 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期实习入职阿里将近两个月</title>
      <link href="/2020/07/26/%E5%85%A5%E8%81%8C%E9%98%BF%E9%87%8C%E5%B0%86%E8%BF%91%E4%B8%A4%E4%B8%AA%E6%9C%88/"/>
      <url>/2020/07/26/%E5%85%A5%E8%81%8C%E9%98%BF%E9%87%8C%E5%B0%86%E8%BF%91%E4%B8%A4%E4%B8%AA%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<h3 id="实习成果"><a href="#实习成果" class="headerlink" title="实习成果"></a>实习成果</h3><p>距离上次总结，一个半月过去了，后面陆续又做了三、四个需求<br>后面有一个需求不是那种边缘项目的修修补补，而是跟着组里的人，照着产品的要求，完整的写核心链路中的几个接口。<br>算是跟着团队接手一个需求，从开发、测试、联调、验收到上线完整的走了一遍流程。</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>还是感觉个人收获比较小，可能这段时间沉浸在业务里，没有真正挖掘项目中的技术以及可以横向扩展的东西。</p><ul><li>代码风格更加规范<br>这段时间写了代码也得有个几千行了，代码可读性、严谨性以及代码出现bug的概率，都有所提升</li><li>测试debug能力<br>写完代码，总会写很多的单测，各种debug，debug调试能力增加了很多，再出现问题的时候，可以更快的找到问题的所在</li><li>中间件原理<br>对于HSF MetaQ一些中间件的原理了解的更多了，但是对于源码程度的学习还没开始，这后续需要发力的一个点了</li></ul><h3 id="秋招"><a href="#秋招" class="headerlink" title="秋招"></a>秋招</h3><ul><li>收到字节提前批的意向书</li><li>准备钉钉转正ppt</li><li>写完简历投其他公司</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>自己春招前，一直心心念念的想投递阿里的中间件部门，去做开源框架啥的<br>后面经过做阿里的中间件比赛，备受打击，觉得自己水平还是太差了，做一些io比赛的时候总是不知道如何下手。<br>现在也还是不敢投递，虽说之前提前批面试下试试也问题不大，但是还是不想经历那种面试被吊打的感觉</p><p>蚂蚁要上市了，现在组里很多集团内部转岗到的，估计他们把宝压在钉钉了。<br>我也在想，要不我也赌一把，在钉钉混个几年，到时候上市能不能喝点汤。<br>这个谁都说不好，可能还不知道多少钱，我自己能不能顶住还不好说，<br>看到Leader很年轻，很有实力，业务发展很快，感觉如果在现在的岗位可能以后晋升的机会也不少。<br>还是搞好自己的技术吧，这些我感觉我是看不透，走一步算一步，混口饭吃。</p><p>以前高中时期的理想也没了，也到了混口饭吃的田地了，哈哈哈</p><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><ul><li>把后面的一个需求做完</li><li>转正ppt完善一下</li><li>了解秋招信息，投递简历</li><li>看面经、刷题</li><li>调研下毕设</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字节广告秋招提前批面试</title>
      <link href="/2020/07/12/%E5%AD%97%E8%8A%82%E5%B9%BF%E5%91%8A%E7%A7%8B%E6%8B%9B%E6%8F%90%E5%89%8D%E6%89%B9%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/07/12/%E5%AD%97%E8%8A%82%E5%B9%BF%E5%91%8A%E7%A7%8B%E6%8B%9B%E6%8F%90%E5%89%8D%E6%89%B9%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一面(7.12 14:00)</p><ul><li>自我介绍</li><li>介绍中间件负载均衡比赛<ul><li>介绍比赛场景</li><li>介绍使用算法、优化思路</li><li>业内常见的负载均衡算法、谈到一致性hash算法</li><li>聊了有15min</li></ul></li><li>具体讲解一致性hash算法如何实现，解决什么痛点</li><li>如果通过一致性hash算法负载均衡后，发现某些服务器总是比其他服务器的负载高一些,问题的原因和如何解决<ul><li>原因<ul><li>hash字段的选取(重要)</li><li>hash函数(不太重要)</li><li>虚拟节点(面试的时候没提)</li></ul></li></ul></li><li>面对redis缓存雪崩和击穿时的解决方案<ul><li>讲了补偿的解决方案，通过监控处理，做补偿操作</li></ul></li><li>假设有人恶意攻击，找缓存纰漏，伪造缓存key等，制造缓存问题有没有什么解决方案<ul><li>从事前拦截预防<ul><li>根据缓存key粒度，做不命中计数，并设定阈值，在超过阈值后，做补偿方案</li></ul></li><li>事后补偿<ul><li>根据监控和报警，在发现请求rt突然升高后，调节开关做，补偿操作 </li></ul></li></ul></li><li>redis zset的实现</li><li>mysql　innodb的索引结构</li><li>联合索引(a,b,c,d) where d = 1 and a = 1 and b = 2 and c &gt; 1; 走不走索引</li><li>做了一道题目，m位的整数，移除n位，求移除后的最大值</li><li>有什么问题<br>  -　主要问了业务，重要做穿山甲，承接广告资源，对各类企业提供商业变现支持</li></ul></li><li><p>二面(7.12 15:00)</p><ul><li>自我介绍<ul><li>聊到爱奇艺实习了，被打断　讲实习中碰到的难点</li></ul></li><li>如何根据复杂的业务场景生成jenkins config.xml<ul><li>顺便一提，有人根据github问我有没有更好的解决方案</li></ul></li><li>实习过程中有没有哪些比较有难度的工作<ul><li>cpl　部分的业务调整</li></ul></li><li>喜欢高并发形式的工作还是喜欢业务比较复杂的工作<ul><li>都可以</li></ul></li><li>做了一道题,二叉树前序和中序　找后序遍历<ul><li>做的有点僵硬,加上调试有半个小时多。。</li></ul></li><li>有什么问题<br>  -问了技术栈</li></ul></li><li><p>三面(7.16 20:00)</p><ul><li>自我介绍</li><li>介绍负载均衡比赛<ul><li>使用的协议</li><li>consumer节点如何发送消息到provider节点</li></ul></li><li>聊到延时队列时间轮的实现<ul><li>遍历set优化</li><li>其他的实现方式</li><li>弊端</li></ul></li><li>rbac模型<ul><li>实现</li><li>具体如何对当前操作判断是否拥有权限</li></ul></li><li>mysql innodb和myisam区别</li><li>mysql索引和mongodb索引区别</li><li>内存直接映射的方法</li><li>两个进程可不可以操作同一块内存</li><li>算法题：<ul><li>全排列的下一个排列</li><li>两个节点的最近公共父节点</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bytedance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期实习入职阿里两周了</title>
      <link href="/2020/06/14/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E5%85%A5%E8%81%8C%E9%98%BF%E9%87%8C%E4%B8%A4%E5%91%A8%E4%BA%86/"/>
      <url>/2020/06/14/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E5%85%A5%E8%81%8C%E9%98%BF%E9%87%8C%E4%B8%A4%E5%91%A8%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h3 id="四五月份的成果"><a href="#四五月份的成果" class="headerlink" title="四五月份的成果"></a>四五月份的成果</h3><ul><li>看书<ul><li>redis设计与实现</li><li>mysql　innodb引擎</li><li>java大型网站与中间件</li></ul></li><li>刷题<ul><li>后续应该刷了有100道左右</li></ul></li><li>面试</li></ul><p>后面面了京东等，最后都凉了</p><ul><li>实验室项目</li></ul><p>完善了下支付，修了点bug</p><p>总结：总的来说，效率太低，每天有效学习时间不足６小时</p><h3 id="入职两周"><a href="#入职两周" class="headerlink" title="入职两周"></a>入职两周</h3><ul><li>第一周</li></ul><p>第一周基本就在学习<br>学习hsf diamond metaQ lwp等各种中间件的使用，学习集团的数据安全等课程<br><br>看代码的核心接口，梳理业务逻辑，总的来说逻辑还是挺复杂的</p><ul><li>第二周</li></ul><p>第二周接了一个小需求<br><br>写web端增加的页面的后台接口<br><br>涉及到两个模块的代码，也就说web端的controller层和service层是分开的，以rpc的形式提供服务<br><br>代码基本写完，写完了单元测试，提交到集成平台上出现点问题，解决中</p><p><strong>这次需求使用到的技术</strong><br>spring hsf diamond</p><p><strong>收获</strong><br>在看不懂diamond监听器如何注册的时候，在相应的端口打了断点，进行debug，<br>梳理清楚了系统中各种diamond监听器注册的过程</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>实习期间学习工作时间是挺多的，但是还要好好分配学习和工作的时间比例<br><br>感觉不到一个月就要秋招提前批了，自己还没有准备好的样子<br><br>还是那一套刷题、看书、看面经<br>感觉重点应该是<strong>看面经了</strong></p><p>之前在论坛上看学长们讨论北邮人的出路并不只有互联网这一条的时候，确实有点想考公务员了</p><p>目前先好好刷刷面经，准备秋招<br><br>好好实习，拿个转正offer<br><br>后续，再说！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>让子弹飞分析</title>
      <link href="/2020/05/10/%E8%AE%A9%E5%AD%90%E5%BC%B9%E9%A3%9E%E5%88%86%E6%9E%90/"/>
      <url>/2020/05/10/%E8%AE%A9%E5%AD%90%E5%BC%B9%E9%A3%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/ratels/p/12373699.html" target="_blank" rel="noopener">《让子弹飞》系列</a></p>]]></content>
      
      
      <categories>
          
          <category> 观点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 让子弹飞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>度小满2020春招实习面试</title>
      <link href="/2020/04/27/%E5%BA%A6%E5%B0%8F%E6%BB%A12020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/04/27/%E5%BA%A6%E5%B0%8F%E6%BB%A12020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>一面<ul><li>自我介绍</li><li>http如何完成一次请求</li><li>我有火狐和谷歌都访问一个网站，如何辨别是哪个程序<br>  答：根据tcp报文中的源端口</li><li>死锁概念<br>  说完死锁，如何破坏死锁也说了，破坏死锁的算法</li><li>java exception和error区别</li><li>常见的几个RuntimeException</li><li>NoClassDefFound异常</li><li>leetcode 水桶问题</li></ul></li><li>二面<ul><li>自我介绍</li><li>jdk源码看过哪些</li><li>linux命令用过哪些</li><li>java垃圾回收算法</li><li>full gc什么时候触发</li><li>gc优化</li><li>负载均衡比赛</li><li>redis常用数据结构</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 度小满 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot笔记</title>
      <link href="/2020/04/23/springboot%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/23/springboot%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>springboot启动过程<br>启动过程主要包括创建配置环境、spring listeners、application context。<br><a href="https://www.cnblogs.com/xiaoxi/p/7999885.html" target="_blank" rel="noopener">启动原理解析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东2020春招实习</title>
      <link href="/2020/04/23/%E4%BA%AC%E4%B8%9C2020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0/"/>
      <url>/2020/04/23/%E4%BA%AC%E4%B8%9C2020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>一面(04/23)<ul><li>个人介绍</li><li>实习亮点</li><li>final关键字</li><li>gc过程</li><li>springboot启动过程</li><li>实习时长</li></ul></li><li>二面(04/26)<ul><li>个人介绍</li><li>继承的作用　父类继承和接口继承区别</li><li>重写和重载</li><li>类加载</li><li>双亲委派</li><li>jenkins createJob具体介绍</li><li>jenkins获取多个builder的build日志<br>  build时携带任务id,使用回调函数的形式更新任务表，查询日志时直接<br>  查询任务表，而不去请求jenkins　restful接口</li><li>jenkins pipeline groovy脚本实现回调</li><li>xss攻击</li><li>缓存redis实现细节<br>  先更新数据库表，再删除缓存</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 京东 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易互娱2020春招实习</title>
      <link href="/2020/04/23/%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B12020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0/"/>
      <url>/2020/04/23/%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B12020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>一面<ul><li>自我介绍</li><li>redis使用的地方，使用过了redis哪些数据结构,redis　字符串结构</li><li>spring项目启动时端口被占用，如何处理</li><li>查询端口进程,kill;kill kill -9区别</li><li>http响应码，301 302区别</li><li>tcp粘包</li><li>tcp　udp开始做过吗</li><li>http https区别,https详细过程</li><li>spring aop</li><li>spring bean 属性注入在什么时候</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从准备找暑期实习开始，已过了两个月</title>
      <link href="/2020/04/18/%E4%BB%8E%E5%87%86%E5%A4%87%E6%89%BE%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%B7%B2%E8%BF%87%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88/"/>
      <url>/2020/04/18/%E4%BB%8E%E5%87%86%E5%A4%87%E6%89%BE%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%B7%B2%E8%BF%87%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<ul><li>阶段性总结<br>  目前流程：钉钉offer<pre><code>字节抖音直播三面后没有消息快手效率工程hr面后无消息美团到店saas一面挂百度笔试后无消息腾讯挂了四次网易云音乐面了一面几天后面网易互娱今晚京东笔试</code></pre>  10号收到意向书以来，心态就有点放松了，有些想报复性玩一玩，又不敢玩。<br>  这几天的学习效率一直不高，上午刷题，下午没有精神，晚上复习。</li><li>复习情况和计划<br>  经过这两个月以来的复习，操作系统、网络、java基础、spring、jvm、数据库、并发<br>  都看了几遍，接下来在整体复习的基础上，重点深入算法、操作系统、分布式框架。<br>  具体来说，看《算法》刷leetcode、复习操作系统书、学习netty dubbo</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐2020春招实习</title>
      <link href="/2020/04/17/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%902020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0/"/>
      <url>/2020/04/17/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%902020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>一面(2020/04/17)<ul><li>自我介绍</li><li>项目或者比赛中遇到的挑战</li><li>项目中的收获</li><li>支付问题　重复支付、支付回调延时和无法收到回调</li><li>无法收到支付回调的错误订单如何解决，业务系统挂了、回调消息丢失</li><li>数据库事务如何实现的</li><li>分布式事务，两阶段提交会出现哪些问题，如何解决<br>  事务提交的时候，有的节点提交成功，有的节点提交失败，如何回滚</li><li>索引底层数据结构、索引优化</li><li>学生表，包含姓名、年龄、班级、分数；用一个sql获取如下数据：<br>  写sql 获取每个班级成绩前三的学生名称（A）<br>  如何建索引、索引如何优化</li><li>两字符串，找到最长的公共子序列</li><li>如何学习技术的、看了哪些博客、最近在看哪些书</li><li>有什么想问的(网易云最近有哪些新的业务)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里中间件大佬2020/04/15号经验分享</title>
      <link href="/2020/04/15/%E9%98%BF%E9%87%8C%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%A7%E4%BD%AC2020-04-15%E5%8F%B7%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2020/04/15/%E9%98%BF%E9%87%8C%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%A7%E4%BD%AC2020-04-15%E5%8F%B7%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="校招经历"><a href="#校招经历" class="headerlink" title="校招经历"></a>校招经历</h4><ul><li>2017.12 复习课本知识，复习算法知识</li><li>2018.3 春招面试，多参加面试，积累面试经验，争取实习机会</li><li>2018.5 准备实习入职相关知识的学习，实习前相关准备，准备秋招</li><li>2018.7 实习以及秋招面试，实习以及准备秋招笔试、面试</li><li>2018.9 谈offer</li><li>2018.10 入职准备</li></ul><h4 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h4><ul><li>早准备早投递，早投递机会越大</li><li>重视基础，基础就是内功心法</li><li>勤总结,好记性不如烂笔头</li><li>有自信，坚持<h5 id="个人建议-准备方向"><a href="#个人建议-准备方向" class="headerlink" title="个人建议-准备方向"></a>个人建议-准备方向</h5></li><li>操作系统</li><li>算法</li><li>网络</li><li>意向部门相关</li></ul><p>推荐资料：<br>计算机网络：《计算机网络&lt;教材&gt;》<br>linux相关：《鸟哥的linux私房菜》、《UNIX环境高级编程》<br>算法：《编程珠玑》<br>其他：《后台开发：核心技术与应用实践》、《程序员的自我修养》、《编码：隐匿在九三级软硬件背后的语言》</p><h5 id="操作系统相关重点"><a href="#操作系统相关重点" class="headerlink" title="操作系统相关重点"></a>操作系统相关重点</h5><ul><li>进程管理<br>进程线程知识、进程调度、进程的实现</li><li>内存管理<br>操作内存管理机制</li><li>文件系统<br>文件系统的原理</li><li>操作系统基础<br>系统调用、中断、定时器和时间管理</li></ul><p>例子：说说你对进程的理解？<br>是什么、为什么、怎么做的、有什么区别、有什么联系、你用过吗、怎么调优、再深入理解一点？</p><h5 id="推荐一些操作系统相关资料"><a href="#推荐一些操作系统相关资料" class="headerlink" title="推荐一些操作系统相关资料"></a>推荐一些操作系统相关资料</h5><ul><li>《现代操作系统》 </li><li>《linux内核设计与实现》</li><li>《linux内核完全剖析》</li><li>《自己动手写操作系统》</li><li>《嵌入式实时操作系统μC/OS-3》</li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快手效率工程2020春招实习面试</title>
      <link href="/2020/04/14/%E5%BF%AB%E6%89%8B%E6%95%88%E7%8E%87%E5%B7%A5%E7%A8%8B2020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/04/14/%E5%BF%AB%E6%89%8B%E6%95%88%E7%8E%87%E5%B7%A5%E7%A8%8B2020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一面(2020/04/14)</p><ul><li><p>自我介绍</p></li><li><p>停车云业务以及架构介绍</p></li><li><p>负载均衡比赛介绍</p></li><li><p>hashMap　concurrentHashMap</p></li><li><p>spring ioc 以及aop的使用</p></li><li><p>jvm内存</p></li><li><p>实现多线程的方法</p></li><li><p>避免订单重复支付的方法</p><a id="more"></a></li><li><p>手写sql<br>  Person<br>  id    gender    age     name<br>  1        M           35       zhangsan<br>  2         F            29      lisi</p><p>  select count(*) from Person where gender=”M” and age &gt; 35 group by age;</p></li><li><p>spring中用到的设计模式</p></li><li><p>手写单例模式</p>  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">singleton</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">volatile</span> Singleton singleton;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">private</span> Object lock = <span class="hljs-keyword">new</span> Object();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Singleton <span class="hljs-title">getSingletion</span><span class="hljs-params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">if</span>(singleton == <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">synchronized</span>(lock)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="hljs-keyword">if</span>(singleton == <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                    singleton = <span class="hljs-keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> singleton;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>部门主要做的业务 </li></ul></li><li><p>二面(2020/04/15)</p><ul><li>负载均衡比赛</li><li>aop原理</li><li>array和list区别</li><li>hashmap和list初始容量 扩容</li><li>currentHashMap线程安全原理</li><li>@Tranactional注解原理</li><li>hibenate和mybatis区别</li><li>full gc触发条件</li><li>年轻代和老年代的比例，年轻带　eden surivrior比例</li><li>实现一个方法，判断一个字符串，最多删除一个字符，能否成为回文串。<br>abccbca</li><li>公司对新的实习生的培养机制</li></ul></li><li><p>hr面(2020/04/16)</p><ul><li>面试过程中的收获、评价</li><li>目前有哪些面试流程以及offer</li><li>个人对想去的部门和想做的业务是如何考虑的</li><li>对快手面试以及其他公司的面试过程体验如何</li><li>想问的问题(问了部门业务)</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里中间件大佬2020/04/12号面试经验分享</title>
      <link href="/2020/04/12/%E9%98%BF%E9%87%8C%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%A7%E4%BD%AC%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2020/04/12/%E9%98%BF%E9%87%8C%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%A7%E4%BD%AC%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>阿里中间件团队博客</p><h4 id="扎实的计算机基础"><a href="#扎实的计算机基础" class="headerlink" title="扎实的计算机基础"></a>扎实的计算机基础</h4><ul><li>计算机组成原理</li><li>计算机网络</li><li>操作系统</li><li>基本数据结构与算法</li><li>数据库</li><li>JAVA基础<br>  熟悉基本语法与常用库<br>  学习源码、io、util、current、collection<br>  了解常用框架，spring、netty、dubbo等</li></ul><h4 id="提高编程能力、编程比赛"><a href="#提高编程能力、编程比赛" class="headerlink" title="提高编程能力、编程比赛"></a>提高编程能力、编程比赛</h4><ul><li>阿里巴巴天池比赛</li><li>华为软件精英挑战赛</li><li>中兴捧月挑战赛<h4 id="积极参加项目实战"><a href="#积极参加项目实战" class="headerlink" title="积极参加项目实战"></a>积极参加项目实战</h4>对平时做的项目多思考，对使用的技术深入了了解，多方比较<h4 id="笔试准备"><a href="#笔试准备" class="headerlink" title="笔试准备"></a>笔试准备</h4></li><li>LeetCode</li><li>《编程珠玑》</li><li>《算法》</li></ul><h4 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h4><ul><li>记笔记</li><li>厚积薄发<br>单背面经有些不够</li><li>对不同的公司专门准备</li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯天美实习面试</title>
      <link href="/2020/04/09/%E8%85%BE%E8%AE%AF%E5%A4%A9%E7%BE%8E%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/04/09/%E8%85%BE%E8%AE%AF%E5%A4%A9%E7%BE%8E%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>一面<ul><li>个人介绍</li><li>比赛介绍</li><li>节点服务故障里如何处理</li><li>项目中多节点同时构建如何实现</li><li>mysql和redis区别</li><li>redis内存和硬盘数据一致性</li><li>aof形式，set 数据　delete数据流程</li><li>redis崩溃后如何恢复</li><li>mysql索引类型,b+树</li><li>hash冲突解决办法</li><li>大量的ip地址查找</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试技巧</title>
      <link href="/2020/03/31/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/03/31/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<ul><li>知之为知之，不知为不知<br>  知道就说知道，不知道就说不知道</li><li>堵而抑之，不如疏而导之<br>  不知道，但是可以说我会其他的　“唱跳rap”。<br>  多说些细节，展开来说，把主动权掌握在自己手中；<br>  如果不问题只说一点点结束，面试官就不挺的追问你，很被动，问到不熟悉的领域，就要减分</li><li>举一隅不以三隅反，则不复也<br>  知道多少就说多少，知道５种方法，就说５种方法，别只说３种。</li><li>温故而知新<br>  时常复习，整体上复盘每一次面试，总结经验<a id="more"></a>具体的点    </li><li>自信<br>  表达观点、回答问题时要自信，不要怯懦、含糊不清</li><li>自我介绍<br>  简历上有的可以一两句话带过，重点回答面试官关心的问题，那就是求职者能否胜任工作。<br>  包括：***的技能、最深入研究的技术领域、个性中最积极的部分、做过的最成功的事，<br>  主要的成就等，这些都可以和学习无关，也可以和学习有关，重点突出好的人格和做事的能力。</li><li>遇到的难点<br>  不需要说一定要解决了多么困难的问题，好好把为什么会碰到这个问题，<br>  这个问题是什么，自己遇到问题如何做的，如何解决的这个问题，怎么找到的解决方法，<br>  整个过程说的详细一些，说清楚明白就好</li><li>回答问题<br>  不明白面试官问题或者对问题有些疑惑的时候，多与面试官沟通，问题具体什么</li><li>问面试官问题<br>  要结合面试的岗位来，公司业务、对新入职的员工的培养模式、<br>  转正要求、公司晋升机制、岗位属于哪个部门、团队有多少人</li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节跳动抖音直播平台面试</title>
      <link href="/2020/03/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%8A%96%E9%9F%B3%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0%E4%B8%80%E9%9D%A2/"/>
      <url>/2020/03/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%8A%96%E9%9F%B3%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一面</p><ul><li>自我介绍</li><li>负载均衡比赛</li><li>其他负载均衡算法</li><li>java内存模型　分区</li><li>gc<a id="more"></a></li><li>gc优化</li><li>多线程创建线程</li><li>线程池</li><li>线程同步</li><li>进程通信的方式</li><li>10亿int整型数，以及一台可用内存为1GB的机器，时间复杂度要求O(n)，统计只出现一次的数？（或者是没有出现过的数字</li><li>假设数组 A 和 B 都是有序的，并且 A 有足够多余的空间可以合并 B。要求不使用额外的空间，把 B 合并进 A 并保证最终的数组有序<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">public void solution(int[] A,int size,int[] B)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    if(B&#x3D;&#x3D;null || B.length &#x3D;&#x3D; 0)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        return;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    int n &#x3D; size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    int m &#x3D; B.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    int index &#x3D; n+m-1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    for(int i &#x3D; index;i&gt;&#x3D;0;i--)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        if(A[n-1]&gt;B[m-1])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            A[index] &#x3D; A[n-1];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            n--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;else&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            A[index] &#x3D; B[m-1];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            m--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        if(m&lt;&#x3D;0||n&lt;&#x3D;0)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            break;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    if(n&lt;&#x3D;0)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        for(int i &#x3D; index;i&gt;&#x3D;0;i--)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            A[i] &#x3D; B[m--]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>有什么想问的<br>  部门主要做的哪些业务</li></ul></li><li><p>二面(2020/3/24_153322)</p><ul><li>停车云介绍</li><li>负载均衡比赛介绍<ul><li>请求是同步的吗</li><li>服务提供逻辑是线性的吗</li></ul></li><li>lru如何实现<br>  ans:使用链表形式,最近访问的节点放在链表头部，移出时　移出尾部节点</li><li>使用双链表还是单链表　为什么<br>  ans:使用双链表，可以比较好的访问尾部节点，移出时方便</li><li>有没有移出中间节点的情况</li><li>这种方案读取数据时间复杂为o(n),怎么办<br>  ans:这样使用hash表的形式做lru</li><li>　这种hash表形式读取的时间复杂度</li><li>解决hash冲突办法,降低读取时间复杂度的方式<br>  ans:链地址、线性探测、rehash；通过转换为红黑树的方式<ul><li>还有其他的方法吗<br>  ans:链表<ul><li>链表可以吗<br>  ans:好像不可以，数据结构固定了</li><li>二叉树可以吗<br>  ans:也可以，但是出现o(n)情况；二叉平衡树严格，旋转操作比较多</li><li>B树呢<br>  ans:B树导致数据结构复杂，感觉有点重，没必要</li></ul></li></ul></li><li>mysql where a = xx and b = xx and c = xx, a b c 每列都有单独索引，具体怎么使用索引<br>  ans:妈的居然答了都会用。。</li><li>聚簇索引和非聚簇索引</li><li>中断 中断之后流程</li><li>用户态和内核态</li><li>单链表从后往前每k个进行逆序，空间复杂度O(1)<br>1，2，3，4，5，6，7<br>k=4<br>1，2，3, 7,6,5,4<br>k=3<br>1，4,3,2, 7,6,5<figure class="highlight plain hljs"><figcaption><span>Node solution(Node node,int k)&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">    Node head &#x3D; node;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Node res &#x3D; new Node(-1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    if(node &#x3D;&#x3D; null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        return;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    while(node !&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        int l &#x3D; head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        int r &#x3D; head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        while(k--&amp;&amp;r!&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            r &#x3D; r.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        if(r &#x3D;&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            break;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        while(r.next!&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            l &#x3D; l.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            r &#x3D; r.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        while(l!&#x3D;r &amp;&amp; l.next!&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            Node tem &#x3D; l.next.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            l.next.next &#x3D; res.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            res.next &#x3D; l.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            l.next &#x3D; tem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    while(head!&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        Node tem &#x3D; head.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        head.next &#x3D; res.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        res.next &#x3D; head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        head &#x3D; tem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    return res.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>有什么想问的吗<br>  技术栈　技术有哪些需要深入的</li></ul></li><li><p>三面</p><ul><li>将二叉树左子树放到父节点和右子数中间转换为链表<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">public TreeNode solution(TreeNode node)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    if(node &#x3D;&#x3D; null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        return node;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    if(node.left!&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; 递归左子树</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        TreeNode tail &#x3D; solution(node.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        TreeNode left &#x3D; node.left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        node.left &#x3D; null;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        node.right &#x3D; left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        tail.right &#x3D; right;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; 递归右子</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    solution(node.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    return right;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>1/2=0.5<br>1/3=0.(3)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bytedance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团到店Saas业务部门面试</title>
      <link href="/2020/03/19/%E7%BE%8E%E5%9B%A2%E5%88%B0%E5%BA%97saas%E4%B8%9A%E5%8A%A1%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/19/%E7%BE%8E%E5%9B%A2%E5%88%B0%E5%BA%97saas%E4%B8%9A%E5%8A%A1%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>一面<ul><li>HashSet的实现;如何判断不重复;插入数据是头插入还是尾插入<br>  同样要遍历比较key，为啥要采用头插入  <a id="more"></a></li><li>多线程了解吗;x打印值的范围为多少；如何是打印值为200，有几种方法<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-meta">@override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">          x++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">         Test test = <span class="hljs-keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">         <span class="hljs-keyword">new</span> Tread(test).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">         <span class="hljs-keyword">new</span> Tread(test).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">         system.out.println(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure></li><li>condition和barrier原理是什么</li><li>AQS是干什么用的;wait notify和park　unPark区别;AQS为何是双向链表;如何是实现公平锁和非公平锁</li><li>两个线程交替打印”A” “B”  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> <span class="hljs-title">implement</span> <span class="hljs-title">Runnable</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ReentrantLock lock = <span class="hljs-keyword">new</span> ReenTrantLock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    Condition condition = lock.condition();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run1</span><span class="hljs-params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">               system.out.println(<span class="hljs-string">"A"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run1</span><span class="hljs-params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">               system.out.println(<span class="hljs-string">"B"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        Test test = <span class="hljs-keyword">new</span> Test();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">new</span> Thread((test) -&gt; &#123;        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">               system.out.println(<span class="hljs-string">"A"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;&#125;).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;                <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">               system.out.println(<span class="hljs-string">"B"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-comment">// condition</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        &#125;&#125;).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// AtomicInteger</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> AtomicInteger count = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">new</span> Thread((count)-&gt;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                               system.out.println(<span class="hljs-string">"A"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                count.getAndIncrement();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    &#125;).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">new</span> Thread((count)-&gt;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                system.out.println(<span class="hljs-string">"B"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">                count.getAndDec();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    &#125;).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>二叉树前序遍历非递归实现，后序遍历非递归实现<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; pre</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">public void solution(TreeNode node )&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    LinkedList&lt;TreeNode&gt; stack &#x3D; new LinkedList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    if(node &#x3D;&#x3D; null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        return;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    stack.push(node);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F; visit node;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    while(!stack.isEmpty())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        TreeNode tem &#x3D; stack.peak();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        if(tem.left!&#x3D;null)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#x2F;&#x2F; visit tem.left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            stack.push(tem.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            tem.left &#x3D;&#x3D; null;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;else&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            stack.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            if(tem.right!&#x3D;null)&#123;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                &#x2F;&#x2F; visit tem.right</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                stack.push(tem.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>订单表为何使用自增id作为主键为何不适用uuid</li><li>数据库如何回滚;多个事务如何访问数据，多个事务如何保证访问数据是安全的;</li><li>x &gt; x + 1　程序员角度什么情况下会发生</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美团 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯pcg实习面试</title>
      <link href="/2020/03/13/%E8%85%BE%E8%AE%AFpcg%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/13/%E8%85%BE%E8%AE%AFpcg%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一面<br>  -自我介绍</p><ul><li>linux命令　cat awk top</li><li>mysql 查询　多表查询　sql语句<a id="more"></a></li><li>联合索引查询 idx(a,b) select * from t where a = 1和select * from t where b = 1　走不走索引<br>  <a href="https://www.cnblogs.com/xcsg/p/11109713.html" target="_blank" rel="noopener">https://www.cnblogs.com/xcsg/p/11109713.html</a></li><li>垃圾回收</li><li>redis sds hash 扩容　增长因子还是二倍扩容</li><li>10TB数据找出最大值</li><li>负载均衡算法</li><li>1000个值里找最小值</li></ul></li><li><p>二面</p><ul><li>中间件负载均衡比赛</li><li>多个负载节点如何处理</li><li>爱奇艺实习多久</li><li>是否想来深圳发展</li></ul></li><li><p>一面(2020/4/15)</p><ul><li>负载均衡比赛</li><li>爱奇艺实习</li><li>象棋　马的走法，从一个位置到另一个位置要多少步数</li><li>操作系统避免重复运行程序，进程通信，kill程序算什么异常</li><li>找用户三度好友的方法，eg:1-3-4-2 找1　2这种;存储一个用户所有好友用户的所用到的内存大小</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴淘宝互动平台实习生面试</title>
      <link href="/2020/03/11/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%B7%98%E5%AE%9D%E4%BA%92%E5%8A%A8%E5%B9%B3%E5%8F%B0%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/11/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%B7%98%E5%AE%9D%E4%BA%92%E5%8A%A8%E5%B9%B3%E5%8F%B0%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一面(2020.3.9 11:10)</p><ul><li>自我介绍</li><li>项目介绍</li><li>负载均衡 常用的负载均衡算法、有没有看过其他优秀的比赛代码</li><li>tcp<a id="more"></a></li><li>StringBuilder StringBuffer</li><li>jvm内存<br>后续记不得了</li></ul></li><li><p>二面(2020.3.11 10:15)</p><ul><li><p>为何去爱奇艺实习,其他同学去了吗　还是就你自己去了</p></li><li><p>实习经历描述</p></li><li><p>安卓和电视客户端包形式有何不同<br>  一般来说都是apk形式的，就是功能上　安卓的更倾向于支持点、划等触屏操作，电视上则是遥控器上的相关操作</p></li><li><p>为何考虑转移到jenkins构建，还有其他的构建平台吗？jenkins如何做到构建的</p><pre><code>CruiseControl 阿里云效　Hudson</code></pre></li><li><p>pipeline介绍下，ant gradle的区别和优缺点<br>  于是jenkins2.x开始流行pipeline的写法，以代码的方式来进行job的构建。<br>  ANT是最早的构建工具，基于idea,好象是2000年有的，当时是最流行java构建工具，不过它的XML脚本编写格式让XML文件特别大。对工程构建过程中的过程控制特别好。<br>  Maven它是用来给Ant补坑的，Maven第一次支持了从网络上下载的功能，仍然采用xml作为配置文件格式，它的问题是不能很好的相同库文件的版本冲突。Maven专注的是依赖管理，构建神马的并不擅长。<br>  Gradle是一个自动化的构建工具，Gradle属于结合以上两个的优点，它继承了Ant的灵活和Maven的生命周期管理，它最后被google作为了Android御用管理工具。它最大的*区别是不用XML作为配置文件格式，采用了DSL格式，使得脚本更加简洁。Gradle引入了基于Groovy语言的DSL语法来代替XML配置，因此它的配置文件是一个Groovy文件。</p></li><li><p>多节点无锁构建如何实现？和数据加锁有何区别?你这种实现方式缺点是什么？还有什么其他解决方案</p></li><li><p>使用redis如何使用加锁，为何redis是原子性的</p></li><li><p>redis的hash表是如何实现的和java的hash表有什么区别</p></li><li><p>redis的字符串如何是实现,search list如何实现</p></li><li><p>mysql索引如何实现,mysql如何实现加锁</p></li><li><p>有没有其他的实现缓存的nosql数据库,redis和memcache的区别</p></li><li><p>spring springboot springcloud</p></li><li><p>springboot自动配置<br>  <a href="https://blog.csdn.net/u014745069/article/details/83820511" target="_blank" rel="noopener">Spring Boot面试杀手锏————自动配置原理</a></p></li><li><p>java为何标了注解可以实现相应的功能</p></li><li><p>spring bean初始化过程</p></li><li><p>解析xml的方法<br>  SAX DOM JAXB<br>  <a href="https://blog.csdn.net/miniyuyu/article/details/80259952" target="_blank" rel="noopener">java xml解析工：dom4j , jdom , jaxb , stax, sax的具适用场景比较</a></p></li><li><p>jaxb和dom方式的区别<br>  性能和解析复杂程度上</p></li><li><p>http1 http2的区别</p></li><li><p>http 301 302区别<br>  301永久性转移　302暂时性转移</p></li><li><p>如何验证负载均衡的效果</p></li><li><p>rest和rpc有什么区别</p></li><li><p>有什么想问的</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备找暑期实习，至此时大约一个月</title>
      <link href="/2020/03/10/%E5%87%86%E5%A4%87%E6%89%BE%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%EF%BC%8C%E8%87%B3%E6%AD%A4%E6%97%B6%E5%A4%A7%E7%BA%A6%E4%B8%80%E4%B8%AA%E6%9C%88/"/>
      <url>/2020/03/10/%E5%87%86%E5%A4%87%E6%89%BE%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%EF%BC%8C%E8%87%B3%E6%AD%A4%E6%97%B6%E5%A4%A7%E7%BA%A6%E4%B8%80%E4%B8%AA%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<ul><li><p>恍恍惚惚　<br>从2.13号开始询问宇神如何制作简历，慌慌张张地制作完成简历，开始疯狂复习基础、刷面经。<br>感觉自己啥都不会，看着面经都有点不知道该怎么说。<br>经过一周多不到两周的准备，大约有点知识储备了，开始投阿里的提前批。第一次面试，面的十分僵硬，<br>tcp　http 没怎么准备，好多问题不清楚。<br><a id="more"></a><br>开始查漏补缺，看基础、源码。</p></li><li><p>底气不足<br>现在，面了阿里的几个部门都是一面没有问题，钉钉在等hr面，互动平台明天二面。还没有投其他公司，打算今明两天开始投其他大厂。<br>感觉面试的几个组成部分，java spring jvm　并发　数据库　网络　分布式。<br>这几块中，数据库是我最薄弱的部分，同时分布式以及中间件也掌握的不行，接下来重点准备这一部分，同时深入学习下netty</p></li><li><p>阶段总结<br>这一个月以来，学习效率不是很高，有时候压力有点大，总是忍不住出去喘口气。<br>投简历这一块，还是要多投，多找机会。之前投了３个部门就感觉很多了，想集中精力学习，不再投递。<br>后面才明白，多投递一次简历就多一次机会，可能再等这个部门的同时，另一个部门已经终面了。<br>回过头来看看，没想到两周前自己的想法有很大问题。<br>还是得仔细琢磨积极主动的意思。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴支付宝面试</title>
      <link href="/2020/03/06/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%94%AF%E4%BB%98%E5%AE%9D%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/06/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%94%AF%E4%BB%98%E5%AE%9D%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>一面<ul><li>String s = new String(“abc);会生成几个对象</li><li>final 在java中的作用</li><li>hashMap原理<a id="more"></a></li><li>hashMap是线程安全的吗？多线程操作hashMap会出现什么问题</li><li>ConcurrentHashMap介绍下</li><li>创建线程有几种方法</li><li>线程堵塞的方法,join的形式如何用</li><li>wait()和sleep()的区别</li><li>线程池有哪些参数；线程池运行原理；任务队列为空时，情况；</li><li>java内存管理</li><li>gc；cms初始标记和再次标记那个时间长；再次标记是如何标记；</li><li>springBean生命周期</li><li>@autowire原理</li><li>数组中找最大值和最小值,比较次数小于2n</li><li>说说红黑树</li><li>工厂模式？优点？哪几种？</li><li>事务隔离级别;解决什么问题;串行化问题;事务隔离如何实现</li><li>mysql锁类型;gap锁如何使用</li><li>项目中做的比较有难度的，有亮点的问题<br>  生成jenkins api xml文件，使用jaxb技术将对象映射程xml文件</li><li>你看我这边技术栈以及技术上有哪些需要深入的地方</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴ihome团队面试</title>
      <link href="/2020/03/03/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ihome%E5%9B%A2%E9%98%9F%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/03/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ihome%E5%9B%A2%E9%98%9F%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h4><ul><li>自我介绍</li><li>中间件比赛、负载均衡算法　使用什么java组件，底层怎么实现的，业界有哪些负载均衡算法以及优缺点</li><li>springboot springcloud 了解和使用经验,使用到springcloud哪些模块</li><li>让你自己实现rpc，讲解下思路<ul><li>将注册中心分离开使用请求方式注册发现服务，使用spring resttemplate发送请求调用提供者服务<a id="more"></a></li></ul></li><li>http协议是哪层协议，协议组成</li><li>不使用现有http组件请求<br>  socket serverSocket  </li><li>异步非堵塞如何使用<br>  换成socketChannel serverSocketChannnel可以完成非堵塞，异步还需要返回句柄</li><li>为什么能完成非堵塞功能<br>  selector 不用等待io写，到达请求后分配线程处理</li><li>这一块是用操作系统还是jvm来完成<br>  操作系统　fd epoll</li><li>对jvm了解吗</li><li>垃圾回收原理</li><li>springbean 放在内存哪块区域</li><li>springbean 一般是单例吗　可以是多例吗</li><li>bean会一直存在spring 容器里吗</li><li>spring在后台开发中作用</li><li>mysql索引有哪些</li><li>mysql实现join b+树索引和hash索引有什么区别<br>  不清楚</li><li>说说b+树，为什么使用B+树索引</li><li>mysql表上建的索引有哪些</li><li>不是主键索引是什么索引，二级索引了解过吗<br>  不清楚</li><li>事务中了解过吗</li><li>都完成都不完成属于数据库哪个特性，还有哪些特性</li><li>数据隔离性都有哪些级别，都有什么问题</li><li>数据库挂掉了如何恢复,什么机制</li><li>实习中收获比较大的事情</li><li>爱奇艺怎么样</li><li>ihome团队了解过，做的是和马生鲜业务，排斥来杭州吗</li><li>有哪些要问我的吗？(你看我这边技术栈还有哪些要补充的,技术上需要再深入的地方，可否给些建议?)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴钉钉面试</title>
      <link href="/2020/02/29/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E9%92%89%E9%92%89%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/02/29/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E9%92%89%E9%92%89%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li>一面<ul><li>个人介绍</li><li>项目介绍 亮点</li><li>多节点乐观锁实现</li><li>重复支付解决办法<br>  <a href="https://www.jianshu.com/p/6e9387218e12" target="_blank" rel="noopener">支付系统设计中，如何防止重复支付?</a></li><li>rbac介绍 具体实现<a id="more"></a></li><li>hashcode equal</li><li>HashMap HashTable concurrentHashMap</li><li>springboot配置Control步骤</li><li>servlet</li><li>常见设计模式　观察者模式</li><li>出二维迷宫算法</li><li>快排算法</li><li>最长子序列和</li><li>dp 01背包问题</li><li>二分查找在线编程</li><li>您看我的技术栈的补充以及技术水平有哪些需要深入的地方，可否给些建议？（问题）</li></ul></li><li>二面<ul><li>个人介绍</li><li>项目中的挑战性问题　具体实现</li><li>负载均衡比赛中剩余能力算法的具体实现</li><li>比赛评估依据</li><li>项目技术选型　为何这么选，其他实现方式的优缺点<br>  springboot+vue的好处<br>  springboot简化编码，starter-web依赖spring springmvc tomcat多个包<br>  简化配置　注解形式<br>  简化部署　java -jar *.jar</li><li>jvm内存管理</li><li>full gc过程 stop the word时间降低原因</li><li>rbac模型　其他技术选型比较</li><li>项目中　你做的优化的点</li><li>常用的数据结构以及使用场景 eg:hashmap</li><li>redis的数据结构</li><li>为何使用redis　好处</li><li>项目中为何使用redis，分布式锁为何使用redis,其他分布式锁实现，zookeeper的了解<br>  <a href="https://www.cnblogs.com/seesun2012/p/9214653.html" target="_blank" rel="noopener">Java分布式锁看这篇就够了</a></li><li>常见的设计模式　项目中实际使用的的设计模式,具体实现</li><li>tcp协议如何保证可靠连接的</li><li>快重传机制</li><li>ioc　如何获取bean</li><li>项目中怎么使用的springcloud 用到的springcloud组件</li><li>职业规划</li><li>对钉钉的了解</li><li>对阿里的了解以及企业文化</li><li>您看我的技术栈的补充以及技术水平有哪些需要深入的地方，可否给些建议？（问题）</li><li>那您看我还有下次的机会吗?(问题)</li><li>有没有投其他公司的简历或者阿里其他部门</li><li>如果进阿里的话，你个人的优势</li><li>开源相关</li></ul></li><li>hr面<ul><li>自我介绍</li><li>说一下项目中的难点，你在里面承担了什么角色，如何和同学协作，如何解决</li><li>介绍了钉钉开放平台的业务</li><li>有什么问题</li></ul></li><li>交叉面<ul><li>自我介绍</li><li>成绩绩点</li><li>array ArrayList区别</li><li>进程和线程概念　区别</li><li>计网七层</li><li>jdk jre区别</li><li>爱奇艺实习</li><li>烧一根不均匀的绳子需要一小时，用烧绳法如何确定1小时15分钟</li><li>评测题目: 无<br>Given a string, determine if it is a palindrome（回文，如果不清楚，按字面意思脑补下）, considering only alphanumeric characters and ignoring cases.<br>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.<br>Note:  ====<br>Have you consider that the string might be empty? This is a good question to ask during an interview.<br>For the purpose of this problem, we define empty string as valid palindrome.<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Write your code here</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">solution</span><span class="hljs-params">(String str)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   <span class="hljs-keyword">int</span>[] ch = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[str.length()];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;str.length();i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     <span class="hljs-keyword">if</span>((str.charAt(i)&gt;=<span class="hljs-string">'a'</span>&amp;&amp;str.charAt(i)&lt;=<span class="hljs-string">'z'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">               ||(str.charAt(i)&gt;=<span class="hljs-string">'A'</span>&amp;&amp;str.charAt(i)&lt;=<span class="hljs-string">'Z'</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">              <span class="hljs-keyword">char</span> c = str.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">ch[count++] = c&gt;=<span class="hljs-string">'A'</span>?c-<span class="hljs-string">'A'</span>:c-<span class="hljs-string">'a'</span>;            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;count/<span class="hljs-number">2</span>;i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">if</span>(ch[i]!=ch[count-<span class="hljs-number">1</span>-i])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">               <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020/2/28　淘系技术部一面</title>
      <link href="/2020/02/28/2020-2-28-%E6%B7%98%E7%B3%BB%E6%8A%80%E6%9C%AF%E9%83%A8%E4%B8%80%E9%9D%A2/"/>
      <url>/2020/02/28/2020-2-28-%E6%B7%98%E7%B3%BB%E6%8A%80%E6%9C%AF%E9%83%A8%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ul><li>个人介绍</li><li>自己遇到的项目中比较有挑战的点</li><li>项目问题 负载均衡</li><li>HTTP1 HTTP2优缺点<a id="more"></a><br>  http2增加了多路复用、头部压缩</li><li>场景：长url到短url</li><li>ThreadLocal使用场景</li><li>young gc full gc时机</li><li>年轻代对象转入到老年代的方式</li><li>两个线程串行执行方式</li><li>TCP如何保证可靠连接</li><li>乐观锁　悲观锁</li><li>数据库实现乐观锁　悲观锁</li><li>数据库分库分表</li><li>现有的最新的服务端架构　微服务等</li><li>个人对服务端架构的探索</li><li>HashMap 数据结构</li><li>hash冲突解决办法</li><li>个人职业规划</li><li>Http协议组成</li><li>cookie如何实现</li><li>浏览器如何实现重定向</li><li>close_wait time_wait何时出现</li><li>常见oom异常类型，什么情况下出现</li><li>mysql 优化方式</li><li>了解的设计模式　单例模式</li><li>对称加密和非对称加密有哪些 优缺点<br>  对称加密有　aes des　加密快　安全性低<br>  非对称加密　rsa 加密慢　安全性高<br>  对称加密用来加密内容，非对称机密一般还是用公钥加密对称加密密钥，私钥解密</li><li>linux 查看ｃｐｕ　内存的命令</li><li>linux统计日志的命令　根据日志字段统计信息等</li><li>linux机器间传输文件命令</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴用户增长部提前批面经</title>
      <link href="/2020/02/24/%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF%E9%83%A8%E6%8F%90%E5%89%8D%E6%89%B9%E9%9D%A2%E7%BB%8F/"/>
      <url>/2020/02/24/%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF%E9%83%A8%E6%8F%90%E5%89%8D%E6%89%B9%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>用户增长部<br>２月２０号做了笔试，三道题目<a id="more"></a><br>  1、单向链表“双节”点逆转 ，比如：1-&gt;2 -&gt;3 -&gt;4 -&gt;5    逆转后  4-&gt;5-&gt;2-&gt;3-&gt;1  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">solution</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     <span class="hljs-keyword">int</span> value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      Node next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">solution</span><span class="hljs-params">(node root)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span> || root.next == <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">return</span> root</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">Node  index = root.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      root.next = <span class="hljs-keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      Node last;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">while</span>(index != <span class="hljs-keyword">null</span> &amp;&amp; index.next != <span class="hljs-keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        Node tem = index.next.next</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">          index.next.next =root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        root = index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        index = tem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(index != <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  index.next = root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  root = index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure><!--more-->  2、给定一棵二叉树，每个节点只包含数字0-9，从根节点到叶子节点的每条路径可以表示成一个数，请这些数的和。例如从根节点到叶子节点分别为1-&gt;2-&gt;3，那么这条路径代表数字123。求所有路径代表的数字的和  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="hljs-keyword">int</span> value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      Node left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        Node right;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    ArrayList&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">solution</span><span class="hljs-params">(Node node)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">if</span>(node == <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      trace(node,<span class="hljs-number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">for</span>(Integer value: res)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      sum+=value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="hljs-keyword">return</span> sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">trace</span><span class="hljs-params">(Node node , <span class="hljs-keyword">int</span> value)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">if</span>(node == <span class="hljs-keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      res.add(value);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;<span class="hljs-keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">           <span class="hljs-keyword">int</span> sum = value*<span class="hljs-number">10</span>+node.value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      trace(node.left,sum);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      trace(node.right,sum);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure>  3、微信群聊中,每个人都有未读消息和　已读消息,如何设计提供每个人显示多少未读消息且能快速找到具体的未读消息(假设是一周时间段,如果是群人数有限和群人数无限)? 请使用 最少的存储空间和最快速的查找算法 来解决<br>  answer:  －　wechat类模拟群，wechat的ａｄｄ方法在将增加ｕｓｅｒｓ的messageNum数量（即未读消息数量）并且在数据表中写入消息（消息仅写入一次）、用户消息关联、用户未读消息数量，用户关联表ｓｔａｔｅ初始消息为未读；<pre><code>－　根据这个可以将用户的所有未读消息查询出来，每个消息有时间戳字段（默认时间戳排序），根据时间二分法就可以查询；若根据内容查询，ｍｅｓｓａｇｅ有根据内容生成的ｈａｓｈ字段，可依此存入容器查询，或者使用快速查找均可；</code></pre></li></ul><pre><code>public class Wechat{ private List&lt;User&gt; users;  public void add(){  增加用户未读信息数量;  }}public class User{ private Long userId;  private Integer messageNum;}  /**  可一条消息对应多个用户  BUseMessage为用户与消息关联表  */  public class  BUseMessage{    private Long UserId;    private Long messageId;    //是否已读    private Integer state;  }  public class Message{  private Long messageId;  private String content;    private Long timeStamp;    private Integar state;    //　根据content生成ｈａｓｈ值    private Long hash;    public Long hashcod(){    return hash;    }  }</code></pre><ul><li>商家成长部<br>２月２２号收到商家增长部提前批面试<ul><li>个人介绍</li><li>喜欢干啥</li><li>阅读过哪些中间件源码，擅长的技术</li><li>获奖</li><li>tcp udp区别</li><li>一个消息包从北京发送的广州的流程</li><li>说说arp协议</li><li>说说面向对象的几个原则</li><li>面向对象的优点</li><li>计算机内负数怎么表示，为什么</li><li>三次握手的过程 二次握手的问题</li><li>说说滑动窗口协议</li><li>hashmap的get过程</li><li>synchronized用法，方法添加static的区别</li><li>说说cap    </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期实习面试准备</title>
      <link href="/2020/02/17/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
      <url>/2020/02/17/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ul><li>多思考，挖掘项目难点，多总结<br>做完项目一定要总结，自己在项目中担任什么角色，解决了什么痛点，项目有哪些难点，怎么解决难点这些，<br>以及可以优化的地方，优化方案等，可以不一定实现，但是一定要知道怎么去解决。<br>但是如果没有想清楚难点、优化思路，再多的项目经验也白搭。</li><li>引导式面试<br>面试肯定会遇到不会的地方，这个时候直接说不会，虽然不一定会直接挂，但是对整个面试肯定会有影响，<br>这个时候就可以把面试官引导到自己熟悉的相关技术上，一般绝大多数面试官会让继续讲，<br>建议可以各个方面知识都研究一个，研究深入点即可，例如缓存redis、消息队列kafka等。<br>去理解面试官想要问的东西，主动去说，不一定要等到面试官问透，而且很多面试官表述问题不清楚，<br>这时候一定要问清楚面试官想问的是不是你要回答的，答非所问也十分不可取。</li><li>每次面试必总结<br>面试真的是学习技术最快的过程，很多时候自己学的，不一定学透了，经过面试官一顿灵魂拷问后发现自己什么都不会，<br>面试完总结这些知识，然后多面试几次后面就很容易了。</li><li>自信<br>很多时候会被面试官问到怀疑人生，也可能会经历压力面，面试问的越难，反倒可能说明面试官对你很认可，<br>需要问些更深入的问题提高评级。<br>不论面试官问的问题是已经准备了很久的、烂熟于心还是从未接触过，都要自信，从容面对，也千万不要因为简单问题而放松，简单问题也可以回答的不一样，<br>例如java gc可以降到jdk11最新回收算法，这肯定比书上看到的cms g1有亮点的多，面试官也会觉得你热爱技术。</li></ul><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li><p>红黑树</p></li><li><p>B树和B+树</p></li><li><p>大文件排序<br><a href="https://blog.csdn.net/qq_29048719/article/details/81133643" target="_blank" rel="noopener">对含有一亿数据的大文件进行排序，要求使用内存小于32MB</a><br>参考链接：<br><a href="https://blog.csdn.net/wyqwilliam/article/details/82935922" target="_blank" rel="noopener">二叉树，平衡二叉树，红黑树，B-树、B+树、B*树的区别</a><br><a href="https://blog.csdn.net/u010899985/article/details/80981053#commentBox" target="_blank" rel="noopener">红黑树和AVL树（平衡二叉树）区别</a><br><a href="https://www.cnblogs.com/aspirant/p/9214485.html" target="_blank" rel="noopener">一步步分析为什么B+树适合作为索引的结构 以及索引原理 (阿里面试)</a></p><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><p><a href="https://tech.meituan.com/2018/11/15/java-lock.html" target="_blank" rel="noopener">不可不说的Java“锁”事</a><br><a href="https://www.cnblogs.com/nanqiang/p/9934063.html" target="_blank" rel="noopener">面向对象与面向过程的优缺点</a><br><a href="https://blog.csdn.net/qq_34375473/article/details/84852650" target="_blank" rel="noopener">面向对象五大基本原则详解</a><br><a href="https://blog.csdn.net/h2604396739/article/details/83109292" target="_blank" rel="noopener">反射原理</a><br><a href="https://blog.csdn.net/leonliu06/article/details/78685197" target="_blank" rel="noopener">补码原理——负数为什么要用补码表示</a><br><a href="https://blog.csdn.net/sunxianghuang/article/details/52221913?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">跳表（SkipList）及ConcurrentSkipListMap源码解析</a></p><a id="more"></a><h3 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h3><p><a href="https://blog.csdn.net/qq_40910541/article/details/80686362" target="_blank" rel="noopener">Linux常用命令（面试题）</a><br><a href="https://blog.csdn.net/jiangbr/article/details/82848492" target="_blank" rel="noopener">最全Linux 面试常用命令</a></p><h3 id="Jvm"><a href="#Jvm" class="headerlink" title="Jvm"></a>Jvm</h3></li><li><p>分代回收算法:<a href="http://www.importnew.com/19255.html" target="_blank" rel="noopener">http://www.importnew.com/19255.html</a><br>年轻代：复制回收算法 Scavenge GC（Eden-&gt;Survivor-&gt;Survivor）<br>老年代：年轻代n次回收后，扔存在的对象进入老年代。Full GC（老年、持久被写满或显示调用）用的是标记／清除法，老年代的垃圾回收会导致长时间的停顿<br>持久代：存放静态文件<br>收集器：串行：单线程效率高（适用于client模式下）；并行：多线程（最大垃圾回收暂停:吞吐量）；并发：应用不停止，响应要求高。浮动垃圾，需要保证内存空间<br>CMS收集器，目前web服务器开发最常用的收集器，并发收集（也就是垃圾回收线程和应用程序线程同时运行）。问豪神：（由于这个阶段应用程序同时也在运行，所以并发标记阶段结束后，并不能标记出所有的存活对象。为了解决这个问题，需要再次停顿应用程序，称为 再次标记阶段（remark））</p></li><li><p>在Java语言中，可以作为GC Roots的对象包括下面几种：</p></li></ul><p>虚拟机栈（栈帧中的本地变量表）中的引用对象。<br>方法区中的类静态属性引用的对象。<br>方法区中的常量引用的对象。<br>本地方法栈中JNI（Native方法）的引用对象</p><ul><li><p>JVM垃圾收集器：<br>Serial 收集器：串行收集器，使用单线程进行收集，适用于client模式<br>ParNew收集器：Serial的多线程版本<br>CMS 收集器：<br>初始标记：只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿<br>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿<br>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿<br>并发清除：不需要停顿</p></li><li><p>对象创建过程：<br>检查常量池中是否有即将要创建的这个对象所属的类的符号引用；<br>进而检查这个符号引用所代表的类是否已经被JVM加载；若该类还没有被加载，就找该类的class文件，并加载进方法区；若该类已经被JVM加载，则准备为对象分配内存；<br>根据方法区中该类的信息确定该类所需的内存大小； 一个对象所需的内存大小是在这个对象所属类被定义完就能确定的！且一个类所生产的所有对象的内存大小是一样的！JVM在一个类被加载进方法区的时候就知道该类生产的每一个对象所需要的内存大小。<br>从堆中划分一块对应大小的内存空间给新的对象； 分配堆中内存有两种方式：指针碰撞 －－如果JVM的垃圾收集器采用复制算法或标记-整理算法，那么堆中空闲内存是完整的区域，并且空闲内存和已使用内存之间由一个指针标记。那么当为一个对象分配内存时，只需移动指针即可。因此，这种在完整空闲区域上通过移动指针来分配内存的方式就叫做“指针碰撞”。　　空闲列表 －－如果JVM的垃圾收集器采用标记-清除算法，那么堆中空闲区域和已使用区域交错，因此需要用一张“空闲列表”来记录堆中哪些区域是空闲区域，从而在创建对象的时候根据这张“空闲列表”找到空闲区域，并分配内存。<br>为对象中的成员变量赋上初始值(默认初始化)；对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；<br>设置对象头中的信息；<br>调用对象的构造函数进行初始化</p></li><li><p>JVM内存模型：<br>【Java堆】用于存储Java对象，每个Java对象都是这个对象类的副本，会复制包含继承自它父类的所有非静态属性。<br>【方法区】用于存储类结构信息，class文件加载进JVM时会被解析成JVM识别的几个部分分别存储在不同的数据结构中：常量池、域、方法数据、方法体、构造函数，包括类中的方法、实例初始化、接口初始化等。<br>【Java栈】和线程关联，每个线程创建的时候，JVM都会为他分配一个对应的Java栈，这个栈含有多个栈帧；栈帧则是个方法关联，每个方法的运行都会创建一个自己的栈帧，含有内存变量，操作栈、方法返回值。<br>【PC寄存器】则用于记录下一条要执行的字节码指令地址和被中断。如果方法是 native的，程序计数器寄存器的值不会被定义为空。<br>【本地方法栈】是为JVM运行Native方法准备的空间，类似于Java栈。</p></li><li><p>双亲委派模型</p></li></ul><p>启动类加载器  拓展类加载器  应用程序类加载器 自定义加载器<br>每个类加载器在收到类加载请求时，都不会自己先加载，而是将该请求委派给父类加载器去完成，若父类加载器可以完成该类的加载请求任务，<br>则成功返回，若父类加载器无法完成该类的加载请求任务，子类加载器才会尝试加载，这就是双亲委派模式。</p><p>优点：采用双亲委派模式可使Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父加载器已经加载了该类时，就没有必要让子ClassLoader再加载一次。其次还可以防止子类加载器加载的类恶意覆盖Java核心API。例如，类java.lang.Object类存放在JDK\jre\lib下的rt.jar之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了Object类在程序中的各种类加载器中都是同一个类。即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。</p><ul><li>类加载</li></ul><p>启动类加载器：Bootstrap ClassLoader，它负责加载存放在JDK\jre\lib(JDK代表??JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.<em>开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的。<br>扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.</em>开头的类），开发者可以直接使用扩展类加载器。<br>应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。<br>因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：1）在执行非置信代码之前，自动验证数字签名。2）动态地创建符合用户特定需要的定制化构建类。3）从特定的场所取得java class，例如数据库中和网络中。</p><ul><li>符号引用和直接引用</li></ul><p>在java中，一个java类将会编译成一个class文件。在编译时，java类并不知道引用类的实际内存地址，因此只能使用符号引用来代替。比如org.simple.People类引用org.simple.Tool类，在编译时People类并不知道Tool类的实际内存地址，因此只能使用符号org.simple.Tool(假设)来表示Tool类的地址。而在类装载器装载People类时，此时可以通过虚拟机获取Tool类 的实际内存地址，因此便可以既将符号org.simple.Tool替换为Tool类的实际内存地址，及直接引用地址。<br>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中。<br>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定已经存在于内存之中了。</p><p>参考链接：<br><a href="http://blog.sina.com.cn/s/blog_df25c55f0102wxh3.html" target="_blank" rel="noopener">CMS 垃圾收集器 - 工作原理，浮动垃圾，三色标记法 </a><br><a href="https://blog.csdn.net/weixin_28760063/article/details/81271827" target="_blank" rel="noopener">jvm如何判断对象是否可以回收或存活</a><br><a href="https://blog.csdn.net/a724888/article/details/77981592" target="_blank" rel="noopener">深入理解JVM虚拟机2：JVM垃圾回收基本原理和算法</a><br><a href="https://blog.csdn.net/diaopai5230/article/details/101216653" target="_blank" rel="noopener">CMS收集器和G1收集器 他们的优缺点对比 最后并发清除 CMS 不需要停顿，G1需要停顿…</a><br><a href="https://thinkinjava.cn/categories/JVM/" target="_blank" rel="noopener">Jvm介绍</a><br><a href="https://blog.csdn.net/qq_36071795/article/details/83715456" target="_blank" rel="noopener">自定义类加载器</a><br><a href="https://blog.csdn.net/qq_34402394/article/details/72793119#commentBox" target="_blank" rel="noopener">java虚拟机的符号引用和直接引用</a><br><a href="https://blog.csdn.net/seujava_er/article/details/90114716" target="_blank" rel="noopener">JVM关于OOM异常的调优</a><br><a href="https://blog.csdn.net/qq_38182963/article/details/78660779" target="_blank" rel="noopener">深入理解 Tomcat（四）Tomcat 类加载器之为何违背双亲委派模型</a><br><a href="https://www.jianshu.com/p/76959115d486" target="_blank" rel="noopener">深入理解JVM-内存模型（jmm）和GC</a><br><a href="https://blog.csdn.net/qq_20499001/article/details/89288497" target="_blank" rel="noopener">阿里面试100%问到，JVM性能调优篇</a><br><a href="https://blog.csdn.net/lengxiao1993/article/details/86689331#comments" target="_blank" rel="noopener">面试题之窒息翻译：类加载机制的双亲委派（正解：父委派模型）</a><br><a href="https://blog.csdn.net/dd864140130/article/details/49515403" target="_blank" rel="noopener">深入JVM字节码执行引擎</a></p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>1.悲观锁：比较适合写入操作比较频繁的场景，如果出现大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。<br>2.乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。<br>3.线程池：新建线程 -&gt; 达到核心数 -&gt; 加入队列 -&gt; 新建线程（非核心） -&gt; 达到最大数 -&gt; 触发拒绝策略。　线程数量未达到corePoolSize，则新建一个线程(核心线程)执行任务。线程数量达到了corePools，则将任务移入队列。等待队列已满，新建线程(非核心线程)执行任务。队列已满，总线程数又达到了maximumPoolSize，就会由(RejectedExecutionHandler)抛出异常<br>4.为什么使用线程池：单个任务处理时间比较短，需要处理的任务数量很大。降低资源消耗　提高线程的可管理性　<br>5.newCachedThreadPool 工作线程的创建数量几乎没有限制 newFixedThreadPool　　　 newScheduledThreadPool支持定时及周期性任务执行　　newSingleThreadExecutor单线程化的线程池，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行　　　<br>6.线程池中的线程在新建后进入while循环，从task队列获取任务，当没有待执行任务时，若线程数量小于等于核心线程数量，若核心线程不可退出则调用队列的take阻塞直到新任务到来，若可以退出，则调用poll，时间超时后线程结束。<br>7.CountDownLatch 利用它可以实现一个任务等待其他一个或一组任务执行后再触发的功能，不可重用。CyclicBarrier　让一组线程等待至某个状态之后再全部同时执行，可重用。<br>8.分布式系统CAP定理：Consistency（一致性），Availability（可用性），Partition tolerance（分区容错）　web场景一般可用性高于一致性　所以退而求其次追求最终一致性(eventual consistency)　　分区容错在分布式系统中不可避免<br>9.自旋锁与互斥锁：自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是 否该自旋锁的保持者已经释放了锁，所以自旋锁的效率远 高于互斥锁。虽然它的效率比互斥锁高，但是它一直占用CPU，他在未获得锁的情况下，一直运行－－自旋，所以占用着CPU，如果不能在很短的时间内获得锁，这无疑会使CPU效率降低。不适用与IO场景，单核CPU，代码长时间执行。自旋锁的实现：使用java的cas原子操作AtomicReference，循环将原子变量从null设置为当前线程，若当前原子变量不为null则一直循环。<br>10.死锁的原因与预防：１互斥：某种资源一次只允许一个进程访问，即该资源一旦分配给某个进程　２占有且等待：一个进程本身占有资源（一种或多种），同时还有资源未得到满足，正在等待其他进程释放该资源　３不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。　４循环等待：存在一个进程环，使得每个进程都占有下一个进程所需的至少一种资源。<br>       预防的主要做法是破坏除互斥之外的三个条件<br>11.线程与进程的区别：<br>       一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程是操作系统可识别的最小执行和调度单位。<br>       资源分配给进程，同一进程的所有线程共享该进程的所有资源。 同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。<br>       引入线程的操作系统中，把线程作为调度和分派的基本单位。而把进程作为资源拥有的基本单位<br>       系统开销　由于在创建或撤消进程时，系统都要为之分配或回收资源，如内存空间、I／o设备等。因此，操作系统所付出的开销将显著地大于在创建或撤消线程时的开销。<br>12.进程的几种状态: 1) 运行状态：进程正在处理器上上运行。在单处理器环境下，每个时刻最多只有一个进程处于运行状态。2) 就绪状态：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器即可运行。3) 阻塞状态：又称为等待状态，进程正在等待某一事件而暂停运行，如等待某资源为可用（不包括处理器）或等待输入/输出完成。即使处理器空闲，该进程也不能运行。4) 创建状态：进程正在被创建，尚未到就绪状态。5) 结束状态：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。<br>13.程序段(Text):程序代码在内存中的映射，存放函数体的二进制代码。初始化过的数据(Data):在程序运行初已经对变量进行初始化的数据。未初始化过的数据(BSS):在程序运行初未对变量进行初始化的数据。栈 (Stack):存储局部、临时变量，函数调用时，存储函数的返回指针，用于控制函数的调用和返回。在程序块开始时自动分配内存,结束时自动释放内存，其操作方式类似于数据结构中的栈。堆 (Heap):存储动态内存分配,需要程序员手工分配,手工释放.<br>14.使用线程池的好处：减少创建和销毁线程导致的时间开销和内存资源开销，如果不使用线程池可能导致系统创建大量同类线程导致资源耗尽或者频繁切换<br>15.UUID含义是通用唯一识别码 (Universally Unique Identifier) UUID由以下几部分的组合：<br>       1）当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同<br>       2）时钟序列。？？？问五七<br>       3）全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得<br>16.线程的几种创建方式：以继承Thread类的方式创建线程，　以实现Runnable接口的方式创建线程，　以Callable+FutureTask的方式创建线程<br>17.公平锁与非公平锁的区别<br>       非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。<br>       非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。<br>       公平锁和非公平锁就这两点区别，如果这两次 CAS 都不成功，那么后面非公平锁和公平锁是一样的，都要进入到阻塞队列等待唤醒。相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。<br>18.分布式事务：<br>       TCC:Try、Confirm、Cancel　Try 阶段：对各个服务的资源做检测以及对资源进行锁定。Confirm 阶段：在各个服务中执行实际的操作。Cancel 阶段：如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经执行成功的业务逻辑的回滚操作。<br>       <a href="https://www.cnblogs.com/jajian/p/10014145.html" target="_blank" rel="noopener">tcc事务原理</a><br>参考链接：<br><a href="https://blog.csdn.net/lovezhaohaimig/article/details/80344299" target="_blank" rel="noopener">Java并发编程之异步Future机制的原理和实现</a><br><a href="https://javadoop.com/post/java-thread-pool" target="_blank" rel="noopener">深度解读 java 线程池设计思想及源码实现</a><br><a href="https://www.jianshu.com/p/abfa29c01e1d" target="_blank" rel="noopener">CompletableFuture原理解析</a><br><a href="https://www.cnblogs.com/wangsen/p/11170709.html" target="_blank" rel="noopener">CountDownLatch和CylicBarrier以及Semaphare你使用过吗</a><br><a href="https://blog.csdn.net/w372426096/article/details/80437198" target="_blank" rel="noopener">[分布式]：分布式系统的CAP理论</a><br><a href="https://www.jianshu.com/p/58911d2e8b28" target="_blank" rel="noopener">分布式事务之TCC</a><br><a href="https://coderbee.net/index.php/concurrent/20131115/577" target="_blank" rel="noopener">自旋锁、排队自旋锁、MCS锁、CLH锁</a></p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li>动态代理</li></ul><p>Cglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展.JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉.<br>jdk动态代理</p><ul><li><p>IOC</p><p>  1.IOC: 容器ApplicationContext虽然继承自BeanFactory的接口，但其内部持有一个BeanFactory实例，用于创建和管理Bean，项目启动后调用其refresh方法进行初始化，生成所有单例模式的Bean。BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。首先会根据配置加载BeanDefinition，然后将所以的BeanDefinition存入容器的一个Map中，完成后BeanFactory的初始化完成。随后开始Bean的初始化流程，通过getBean进行加载，已经加载过的会直接返回，加载过程中遇到依赖的Bean会进行递归加载，调用无参构造函数或者构造函数依赖注入进行实例创建，然后对Bean依赖的property进行注入<br>  2.Spring循换依赖问题：通过三级缓存和提前曝光机制解决。比如Ａ字段中依赖Ｂ，Ｂ字段中依赖Ａ。当Ａ在实例化后（对象初始化的第一步）便曝光到第三级缓存中，属性赋值Ｂ时发现没有B，便初始化Ｂ，在属性赋值Ａ时便可以在第三级缓存中找到Ａ的引用赋值，完成Ｂ的初始化，保存到第一级缓存；之后返回给Ａ完成初始化。</p></li></ul><p>参考链接：<br><a href="https://javadoop.com/post/spring-ioc" target="_blank" rel="noopener">Spring IOC 容器源码分析</a><br><a href="https://blog.csdn.net/quliuwuyiz/article/details/79416184" target="_blank" rel="noopener">Spring如何解决循环依赖</a></p><p>-　AOP</p><p>AOP:　ProxyFatoryBean用于创建代理对象，先初始化Advisor链，然后进行代理类的生成。当代理类执行方法时，会调用invoke方法，invoke方法中对aop拦截器进行检测，如果存在拦截器，则生成MethodInvocation进行拦截链的链式调用。不断得调用procced方法，每次进去后计数器自增，取出下一个拦截其，检查advise与当前的调用是否match,匹配的话将执行该advise    </p><p>参考链接：<br><a href="https://javadoop.com/post/spring-aop-source" target="_blank" rel="noopener">Spring AOP 源码解析</a><br><a href="https://www.cnblogs.com/CodeBear/p/10867707.html#4462519" target="_blank" rel="noopener">剑指Spring源码（三）俯瞰Spring的Bean的生命周期（大众版）</a></p><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><ul><li>Ribbon<br>　负责均衡客户端基于RestTemplate实现，通过拦截器机制实现负载均衡，在拦截器中拿到请求url中的serviceId，传入LoadBalanceClient进行服务实例的获取,获取时通过ILoadBalance负载均衡器获取服务，服务实例对象封装了ip等信息。利用服务实例初始化serviceRequestWarpper，重写getUri函数将服务id转换为ip，继续进行后续拦截链的链式调用。</li></ul><p>参考链接：<br><a href="https://blog.csdn.net/hanhanbubble/article/details/90752591" target="_blank" rel="noopener">关于RestTemplate 非常推荐的几篇博文（原理剖析）</a><br><a href="https://www.cnblogs.com/jajian/p/9973555.html" target="_blank" rel="noopener">spring cloud底层原理</a></p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li>代理模式</li></ul><p>静态代理：由程序员或特定工具创建代理类，在程序运行前代理类的.class文件已经存在<br>动态代理：在程序运行时通过反射机制动态创建而成</p><p>静态代理类优缺点</p><p>优点：</p><p>代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可（解耦合），对于如上的客户端代码，newUserManagerImpl()可以应用工厂将它隐藏，如上只是举个例子而已。</p><p>缺点：</p><p>1）代理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><p>2）代理对象只服务于一种类型的对象，如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了。如上的代码是只为UserManager类的访问提供了代理，但是如果还要为其他类如Department类提供代理的话，就需要我们再次添加代理Department的代理类。</p><p>参考链接：<br><a href="https://www.cnblogs.com/zuoxiaolong/p/pattern3.html" target="_blank" rel="noopener">代理模式</a><br><a href="https://blog.csdn.net/hejingyuan6/article/details/36203505" target="_blank" rel="noopener">JAVA学习篇–静态代理VS动态代理</a><br><a href="https://www.jianshu.com/p/8afd396e314f" target="_blank" rel="noopener">项目中用到的设计模式</a></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>引擎对比<br>MyISAM拥有较高的插入、查询速度，但不支持事务。MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复<br>InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，InnoDB是默认的MySQL引擎。InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件。这与MyISAM表不同，比如在MyISAM表中每个表被存放在分离的文件中。聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键。辅助索引data域存储相应记录主键的值而不是地址。InnoDB还支持外键（FOREIGN KEY）</li></ul><p><a href>MySQL存储引擎MyISAM与InnoDB区别总结整理</a></p><ul><li>事务</li></ul><p>数据库事务的实现原理：<br>事务每开启一个实例，都会分配一个版本号给它，如果读取的数据行正在被其它事务执行DELETE或UPDATE操作（即该行上有排他锁），这时该事物的读取操作不会等待行上的锁释放，而是根据版本号去读取行的快照数据（记录在undo log中），这样，事务中的查询操作返回的都是同一版本下的数据，解决了不可重复读问题。<br>原子性和一致性通过Undo log来实现。UndoLog的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLog）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。<br>RedoLog记录的是新数据的备份。在事务提交前，只要将RedoLog持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是RedoLog已经持久化。系统可以根据RedoLog的内容，将所有数据恢复到最新的状态。</p><p>脏读：是指一个事务中访问到了另外一个事务未提交的数据。不可重复读是指在一个事务内根据同一个条件对行记录进行多次查询，但是搜出来的结果却不一致。幻读是指同一个事务内多次查询返回的结果集不一样（比如增加了或者减少了行记录）。不同在于不可重复读是同一个记录的数据内容被修改了，幻读是数据行记录变多了或者少了<br>事务隔离：read uncommitted（读取未提交数据：导致脏读）　read committed（可以读取其他事务提交的数据：导致不可重复读）—大多数数据库默认的隔离级别；repeatable read（可重读：导致幻读）—MySQL默认的隔离级别；serializable（串行化：有事务读的时候其他写会被挂起）</p><p>事务特性：原子性　　一致性　数据库总数从一个一致性的状态转换到另一个一致性的状态。　　隔离性　一个事务所做的修改在最终提交以前，对其他事务是不可见的。　持久性　一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</p><ul><li><p>索引<br>数据库索引分类：从数据结构角度　B+树索引　hash索引　FULLTEXT索引（InnoDB引擎5.7以后支持）R-Tree索引　　从物理存储角度　　聚簇索引（一般对主键建立，物理存放顺序与索引顺序是一致的）　非聚簇索引　　聚簇索引中的每个叶子节点包含主键值和余下的列</p></li><li><p>mysql gap锁</p></li></ul><p>只有在rr隔离级别下才会使用gap锁，会把数据库中索引行划分为一个个左开右闭的区间（相邻行记录），根据where &lt; &gt;这种查询方式，使用gap锁</p><p><a href="http://www.fordba.com/locks-set-by-different-sql-statements-in-innodb.html" target="_blank" rel="noopener">MySQL innodb中各种SQL语句加锁分析</a><br><a href="https://www.cnblogs.com/auxg/p/Cluster-and-NonCluster-index.html" target="_blank" rel="noopener">和刚入门的菜鸟们聊聊–什么是聚簇索引与非聚簇索引</a><br><a href="https://blog.csdn.net/Abysscarry/article/details/80792876" target="_blank" rel="noopener">多个单列索引和联合索引的区别详解</a></p><ul><li>Redis<br>Redis主从同步策略　主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。<a href="https://blog.csdn.net/rentuo53/article/details/84912941" target="_blank" rel="noopener">https://blog.csdn.net/rentuo53/article/details/84912941</a><br>Redis的哨兵机制　能监控多个master-slave集群，发现master宕机后能进行自动切换。不时地监控redis是否按照预期良好地运行;如果发现某个redis节点运行出现状况，能够通知另外一个进程；能够进行自动切换（进行主备切换）。当一个master节点不可用时，能够选举出master的多个slave中的一个来作为新的master,其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。使用raft选举算法.<br>缓存穿透：缓存穿透是指查询一个一定不存在的数据，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了。　　　解决方案：有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空，我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。<br>缓存雪崩　缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。解决方案：缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线 程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。这里分享一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。<br>缓存击穿　对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。解决方案　使用互斥锁(mutex key)　业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。<br><a href="https://blog.csdn.net/a2133212132/article/details/80685313?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Redis深度解析</a></li><li>分布式系统一致性<br>XA协议　　第一阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交　　第二阶段：事务协调器要求每个数据库提交数据，或者回滚数据。　　优点： 尽量保证了数据的强一致，实现成本较低，缺点:　单点问题:事务管理器如果宕机，资源管理器就会一直阻塞，导致数据库无法使用。　同步阻塞:在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。　数据不一致:两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。</li><li>数据库优化</li></ul><p>查询优化：面对大规模数据量时，采取SELECT * FROM table WHERE id &gt;= (SELECT id FROM table LIMIT 1000000, 1) LIMIT 10; 对分页查询进行优化，由于查询出id后，会遍历按照id 去外存区table数据　然后丢弃前面的，导致效率低下。<br><a href="http://www.nowamagic.net/librarys/veda/detail/1900" target="_blank" rel="noopener">如何提高MySQL Limit查询的性能</a><br><a href="https://blog.csdn.net/u013628152/article/details/82184809" target="_blank" rel="noopener">数据库优化方案整理</a></p><p>参考链接：<br><a href="https://blog.csdn.net/qq_38238296/article/details/88362999#commentBox" target="_blank" rel="noopener">MySQL的锁机制和加锁原理</a><br><a href="https://blog.csdn.net/mysteryhaohao/category_6270382.html" target="_blank" rel="noopener">mysql学习</a><br><a href="https://thinkinjava.cn/2019/03/16/2019/2019-03-16-mysql/" target="_blank" rel="noopener">MySql 三大知识点——索引、锁、事务</a><br><a href="https://blog.csdn.net/hcmony/article/details/80694560" target="_blank" rel="noopener">为什么分布式一定要有redis，redis的一些优缺点q</a><br><a href="https://blog.csdn.net/qq360694660/article/details/88695365" target="_blank" rel="noopener">数据库本地事务的实现原理</a><br><a href="https://blog.csdn.net/oracle_29/article/details/85717855" target="_blank" rel="noopener">数据库 redo undo log</a><br><a href="https://www.cnblogs.com/CodeBear/p/10911177.html" target="_blank" rel="noopener">大白话布隆过滤器</a><br><a href="https://www.cnblogs.com/CodeBear/p/12118050.html#4472208" target="_blank" rel="noopener">谈谈数据库，缓存一致性</a><br><a href="https://www.cnblogs.com/xichji/p/11286443.html" target="_blank" rel="noopener">REDIS缓存穿透，缓存击穿，缓存雪崩原因+解决方案</a><br><a href="https://www.cnblogs.com/aspirant/p/9214485.html" target="_blank" rel="noopener">一步步分析为什么B+树适合作为索引的结构 以及索引原理 (阿里面试)</a><br><a href="https://blog.csdn.net/yhl_jxy/article/details/91879874" target="_blank" rel="noopener">Redis持久化(rdb、aof、混合)</a><br><a href="https://blog.csdn.net/qq_34337272/article/details/80012284" target="_blank" rel="noopener">面试中关于Redis的问题看这篇就够了</a></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li><p>tcp三次握手的本质：交换并确认双方的数据序号。</p><pre><code>1.SYN-SENT --&gt; &lt;SEQ=100&gt;&lt;CTL=SYN&gt; --&gt; SYN-RECEIVED ​ 2.ESTABLISHED &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=SYN,ACK&gt; &lt;-- SYN-RECEIVED ​ 3.ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt; --&gt; ESTABLISHED四次挥手，每一端的关闭请求都需要被确认一次：2（client, server）*2(FIN, ACK)　服务器主动关闭链接的话会只有两次挥手　后续会回复客户端RSTTIME_WAIT的产生条件：主动关闭方在发送四次挥手的最后一个ACK（第四次挥手后不会立刻关闭）会变为TIME_WAIT状态，保留次状态的时间为两个MSL（linux里一个MSL为30s，是不可配置的）TIME_WAIT两个MSL的作用：可靠安全的关闭TCP连接。比如网络拥塞，主动方最后一个ACK被动方没收到，这时被动方会对FIN开启TCP重传，发送多个FIN包，在这时尚未关闭的TIME_WAIT就会把这些尾巴问题处理掉，不至于对新连接及其它服务产生影响。TIME_WAIT占用的资源：少量内存（查资料大概4K）和一个fd。TIME_WAIT关闭的危害：1、  网络情况不好时，如果主动方无TIME_WAIT等待，关闭前个连接后，主动方与被动方又建立起新的TCP连接，这时被动方重传或延时过来的FIN包过来后会直接影响新的TCP连接；2、  同样网络情况不好并且无TIME_WAIT等待，关闭连接后无新连接，当接收到被动方重传或延迟的FIN包后，会给被动方回一个RST包，可能会影响被动方其它的服务连接。TIME_WAIT过多的解决办法： net.ipv4.tcp_tw_recycle=1  　表示开启TCP连接中TIME-WAIT sockets的快速回收</code></pre></li><li><p>Reactor模式<br>  　一种比较流行的做法是服务端监听线程和 IO 线程分离，类似于 Reactor 的多线程模型。bossGrouＰ线程组实际就是 Acceptor 线程池，负责处理客户端的 TCP 连接请求，workerGroup 是真正负责 I/O 读写操作的线程组</p></li><li><p>TCP确保可靠性的机制　校验和　序列号　确认应答　超时重传　连接管理（三次握手　四次挥手）　<br>流量控制　在TCP协议的报头信息当中，有窗口大小，即接收端接收数据缓冲区的剩余大小。接收端会在确认应答发送ACK报文时，将自己的即时窗口大小填入，并跟随ACK报文一起发送过去。而发送方根据ACK报文里的窗口大小的值的改变进而改变自己的发送速度。如果接收到窗口大小的值为0，那么发送方将停止发送数据。并定期的向接收端发送窗口探测数据段，让接收端把窗口大小告诉发送端。<br>拥塞控制　 快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认<br>RST标志位表示强制断开链接<br>sack selective acknowledgment，也就是选择性确认，添加sack功能需要在TCP包头加两个选项，一个是开启选项（enabling optiocookie 一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效,存放数据大小一般4K左右，而sessionStorage与localStorage大小在5兆左右，在客户端生成，localStorage除非被清除，否则会永久保存，sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除，cookie在与服务器端通信每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题,而sessionStorage与localStorage仅在客户端（即浏览器）中保存，不参与和服务器的通信。n），另一个是sack选项（sack option）本身。开启sack选项后，receiver会将自己收到了哪些包，没收到哪些包的信息记录在sack段中告诉给sender，这样sender便可以一次性重传所有的丢包。<br>MSS : Maximum Segment Size最大分段大小</p></li><li><p>状态码:<br>100（Continue）客户端应该继续它的请求。这个过渡的响应用于告知客户端，请求的初始部分已经被服务器收到，并且没有被服务器拒绝。客户端应该继续发送剩余的请求，如果请求已经完成，就忽略这个响应。服务器必须在请求完成后发送一个最终的响应。<br>206状态码（Partial Content）服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。<br>304 表明了客户端中所请求资源的缓存仍然是有效的,也就是说该资源从上次缓存到现在并没有被修改过.条件请求可以在确保客户端的资源是最新的同时避免因每次都请求完整资源给服务器带来的性能问题.<br>301 redirect: 301 代表永久性转移(Permanently Moved) 302 redirect: 302 代表暂时性转移(Temporarily Moved )</p></li><li><p>EPoll两种工作模式<br>  ET:当有事件发生时，系统只会通知你一次，即在调用epoll_wait返回fd后，不管这个事件你处理还是没处理，处理完没有处理完，当再次调用epoll_wait时，都不会再返回该fd　LT:使用LT模式意味着只要fd处于可读或者可写状态，每次epoll_wait都会返回该fd，这样的话会带来很大的系统开销，且处理时候每次都需要把这些fd轮询一遍，如果fd的数量巨大，不管有没有事件发生，epoll_wait都会触发这些fd的轮询判断。</p></li><li><p>TCP报文段是面向字节流的，UDP包是面向数据报的<br>  面向报文的传输方式是应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。若太短，会是IP太小。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这也就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。如果应用程序一次只发送一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去。在TCP建立连接前两次握手的SYN报文中选项字段的MSS值，通信双方商定通信的最大报文长度。如果应用层交付下来的数据过大，就会对数据分段，然后发送；否则通过滑动窗口协议来控制通信双发的数据。<br>  tcp传输对准确性要求高速度相对可以慢，因此用于HTTP,FTP，邮件传输，远程连接；udp用于即时通讯延迟低，准确性低，网络电话，语音通信</p></li><li><p>netty的零拷贝<br>  将内存空间分段的字节数组在逻辑上整合为一个整体的字节数组（段式内存思想，将逻辑index变成分块编号和段内偏移）<br>参考链接：<br><a href="https://www.cnblogs.com/lvyahui/p/9030232.html" target="_blank" rel="noopener">Reactor三种线程模型与Netty线程模型</a><br><a href="https://blog.csdn.net/zhang6223284/article/details/81414149" target="_blank" rel="noopener">TCP 和 UDP 的区别</a><br><a href="https://blog.csdn.net/wdscq1234/article/details/52503315?locationNum=3" target="_blank" rel="noopener">TCP-IP详解：SACK选项（Selective Acknowledgment）</a></p><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3></li><li><p>网络io发生时涉及的对象和步骤<br>  1）等待数据准备 (Waiting for the data to be ready)<br>  2）将数据从内核拷贝到进程中(Copying the data from the kernel to the process)<br><a href="https://blog.csdn.net/u011032846/article/details/81507216" target="_blank" rel="noopener">web服务器和客户端完成并行处理请求三大方式</a><br><a href="https://www.cnblogs.com/cainingning/p/9556642.html" target="_blank" rel="noopener">并发编程(IO多路复用)</a></p><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3></li><li><p>rpc<br><a href="https://www.jianshu.com/p/2accc2840a1b" target="_blank" rel="noopener">如何给老婆解释什么是RPC</a><br><a href="https://www.jianshu.com/p/5b90a4e70783" target="_blank" rel="noopener">如何实现一个简单的RPC</a></p></li><li><p>springCloud<br><a href="https://blog.csdn.net/jerryDzan/article/details/89137818" target="_blank" rel="noopener">SpringCloud面试常见问题</a></p><h3 id="场景问题"><a href="#场景问题" class="headerlink" title="场景问题"></a>场景问题</h3><p><a href="https://www.cnblogs.com/crazymakercircle/p/9833847.html" target="_blank" rel="noopener">Reactor模式</a><br><a href="https://blog.csdn.net/qq_38601777/article/details/104092959" target="_blank" rel="noopener">一个最简单的RPC实现及其原理</a><br><a href="https://www.jianshu.com/p/729f1f0f6e18" target="_blank" rel="noopener">架构师手把手教你如何设计一个秒杀系统？</a><br><a href="https://blog.csdn.net/mulinsen77/article/details/89054063" target="_blank" rel="noopener">如何设计一个秒杀系统</a><br><a href="https://kb.kutu66.com/algorithm/post_1011410" target="_blank" rel="noopener">检查 1亿的手机号码以进行重复</a><br><a href="https://www.jianshu.com/p/b39eb55d4670" target="_blank" rel="noopener">如何在有限的内存限制下实现数十亿级手机号码去重</a><br><a href="https://www.cnblogs.com/metoy/p/4470418.html" target="_blank" rel="noopener">Java多线程读取大文件</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库事务</title>
      <link href="/2020/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>数据库事务级别依次由低到高有：</p><ul><li>读未提交</li><li>读已提交</li><li>可重复读</li><li>序列化<br>mysql默认隔离级别是可重复读</li></ul><p>不同事务级别带来的问题，主要是同一事务内多次读取的内容不一致问题<br><br></p><ul><li>脏读：事务A中，读取到另一个事务B未提交的内容，然后事务B回滚，导致事务A读取的数据为脏数据。<br>事务A读取了内容C，事务B更新了内容C但是未提交，事务A又一次读取内容C，但是内容C改变，两次读取内容不一致。</li><li>不可重复读：事务A多次读取同一数据，事务B在事务A多次读取过程中，对数据进行了更新并提交，导致<br>事务A多次读取同一数据，但结果不一致。</li><li>幻读：事务A读取了表内所有行，事务B新增了一行，A再次读取时发现两次结果不一致，多了一行。</li></ul><p>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决TIME_WAIT过多的问题</title>
      <link href="/2020/02/09/%E8%A7%A3%E5%86%B3TIME-WAIT%E8%BF%87%E5%A4%9A%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/09/%E8%A7%A3%E5%86%B3TIME-WAIT%E8%BF%87%E5%A4%9A%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li><p>TIME_WAIT产生原因<br>一般在是TCP断开连接时，主动断开的一方会进入到TIME_WAIT的状态。此状态<br>会保留2MSL时间（30s 1min 2min不等）</p><br>在web应用中，基于TCP的http短连接通常由Server端先断开连接，往往Server端会产生TIME_WAIT连接记录，在高并发的应用中，此状态的连接较多。</li><li><p>解决办法<br>配置文件中写入 net.ipv4.tcp_tw_recycle=1  　表示开启TCP连接中TIME-WAIT sockets的快速回收</p></li></ul><p>-参考连接<br><a href="https://www.cnblogs.com/dadonggg/p/8778318.html" target="_blank" rel="noopener">解决TIME_WAIT过多造成的问题</a><br><br><br><a href="https://blog.csdn.net/hemin1003/article/details/82963558" target="_blank" rel="noopener">阿里ECS/Linux大量TIME_WAIT解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器</title>
      <link href="/2020/01/30/Java%E5%AE%B9%E5%99%A8/"/>
      <url>/2020/01/30/Java%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h2><p>容器主要包括Collection和Map两种，Collection存储着对象的集合，Map存储着键值对(两个对象)的映射表</p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.Set</h4><ul><li>TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作</li><li>HashSet：基于哈希表实现，不支持有序性操作</li><li>LinkedHashSet：具有HashSet的查找效率，内部使用双向链表维护元素的插入顺序</li></ul><h4 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h4><ul><li>ArrayList：基于动态数组实现，支持随机访问</li><li>Vector：和ArrayList相似，但它是线程安全的</li><li>LinkedList：基于双向链表实现，只能顺序访问。LinkedList还可以用作栈、队列和双向队列。<a id="more"></a></li></ul><h4 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h4><ul><li>LinkedList ： 可用作双向队列</li><li>PriorityQueue：基于堆实现，可用作优先队列</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li>TreeMap：基于红黑树实现</li><li>HashMap：基于哈希表实现</li><li>HashTable：和HashMap相似，但它是线程安全的，但是一般不使用它，使用ConcurrentHashMap效率更高，因为引入了分段锁</li><li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序</li></ul><h2 id="二、容器中的设计模式"><a href="#二、容器中的设计模式" class="headerlink" title="二、容器中的设计模式"></a>二、容器中的设计模式</h2><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>Collection继承了Iterable接口，其中的iterator()方法能够产生一个Iterator对象，通过这个对象可以遍历Collection中的元素。</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>java.util.Arrays#asList()可以把数组类型转换为List类型。</p><h2 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="1-概览"><a href="#1-概览" class="headerlink" title="1.概览"></a>1.概览</h4><p>ArrayList基于数组实现，所以支持快速随机访问，RandomAccess接口标志该类支持快速随机访问。<br>数组默认大小为10。</p><h4 id="2-扩容"><a href="#2-扩容" class="headerlink" title="2.扩容"></a>2.扩容</h4><p>添加元素时使用ensureCapacityInternal()来保证容量足够，如果不够，扩容。<br>新容量大小为旧容量大小的1.5倍。<br><br><br>扩容操作需调用Arrays.copyOf()把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</p><h4 id="3-Fail-fast"><a href="#3-Fail-fast" class="headerlink" title="3.Fail-fast"></a>3.Fail-fast</h4><p>modCount用来记录ArrayList结构发生变化的次数，在进行序列化或者迭代的时候，需要<br>比较前后modCount是否改变，若改变了需要抛出ConcurrentModificationException异常.</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><h4 id="1-同步"><a href="#1-同步" class="headerlink" title="1.同步"></a>1.同步</h4><p>使用synchronized进行同步</p><h4 id="2-比较"><a href="#2-比较" class="headerlink" title="2.比较"></a>2.比较</h4><p>因为使用synchronized同步，所以开销要比ArrayList大一些</p><p>在使用方面，可使用Collections.synchronizedList()和CopyOnWriteArrayList代替</p><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><h4 id="1-读写分离"><a href="#1-读写分离" class="headerlink" title="1.读写分离"></a>1.读写分离</h4><p>CopyOnWriteArrayList写操作时，加锁，将原有数组元素拷贝到一个新的数组中，写入元素，将原有数组指向新的数组，释放锁<br>读操作在原有数组中，读写分离，互不影响</p><p>CopyOnWriteArrayList 存在内存占用和数据不一致性问题<br>所以它不适合内存敏感以及对实时性要求高的场景</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>基于双向链表实现</p><p>和ArrayList的区别可以归结为数组和链表的区别</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="1-存储结构"><a href="#1-存储结构" class="headerlink" title="1.存储结构"></a>1.存储结构</h4><p>内部维护一个Node类型的数组，作为hash表；Node数据结构包含4个字段，有key、value、next指针、int型hash值</p><p>数组的每一个位置被当做一个桶，一个桶存放一个链表。</p><h4 id="2-拉链法的工作原理"><a href="#2-拉链法的工作原理" class="headerlink" title="2.拉链法的工作原理"></a>2.拉链法的工作原理</h4><p>哈希表为解决hash冲突有开放地址法和链地址法。比较来说，链地址法更适合于大规模数据和不确定性数据的存储，处理冲突简单且不易出现堆积问题，节省空间</p><ul><li>确定hash桶数组索引位置<br>key值取哈希值时采用高位运算使得hash值的高位通常也能参与到计算hash表值中，使用与运算代替取模提高一定的效率。</li><li>HashMap的put方法<br>JDK 1.7 之前使用头插法、JDK 1.8 使用尾插法<br><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/d669d29c.png" alt></li><li>扩容机制<br>在hash表容量扩大为两倍时，在rehash时有了一定的优化，在数组位置上只有一个元素时，rehash赋值到新的hash表；有多个元素时，根据扩容的位为1或0，进行优化</li></ul><h4 id="3-参看链接"><a href="#3-参看链接" class="headerlink" title="3.参看链接"></a>3.参看链接</h4><p><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html" target="_blank" rel="noopener">Java 8系列之重新认识HashMap</a><br><a href="https://www.jianshu.com/p/75adf47958a7" target="_blank" rel="noopener">HashMap 相关面试题及其解答</a></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>(1) 扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。</p><p>(2) 负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。</p><p>(3) HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。</p><p>(4) JDK1.8引入红黑树大程度优化了HashMap的性能。</p><p>(5) 还没升级JDK1.8的，现在开始升级吧。HashMap的性能提升仅仅是JDK1.8的冰山一角。</p><pre><code>Q：HashMap，LinkedHashMap，TreeMap 有什么区别？A：HashMap 参考其他问题；LinkedHashMap 保存了记录的插入顺序，在用 Iterator 遍历时，先取到的记录肯定是先插入的；遍历比 HashMap 慢；TreeMap 实现 SortMap 接口，能够把它保存的记录根据键排序（默认按键值升序排序，也可以指定排序的比较器）Q：HashMap 和 HashTable 有什么区别？A：①、HashMap 是线程不安全的，HashTable 是线程安全的；②、由于线程安全，所以 HashTable 的效率比不上 HashMap；③、HashMap最多只允许一条记录的键为null，允许多条记录的值为null，而 HashTable 不允许；④、HashMap 默认初始化数组的大小为16，HashTable 为 11，前者扩容时，扩大两倍，后者扩大两倍+1；⑤、HashMap 需要重新计算 hash 值，而 HashTable 直接使用对象的 hashCode</code></pre><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p><a href="https://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/" target="_blank" rel="noopener">jdk1.7版本的ConcurrentHashMap解析</a><br><a href="https://blog.csdn.net/weixin_44460333/article/details/86770169" target="_blank" rel="noopener">HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库行级锁</title>
      <link href="/2020/01/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%8C%E7%BA%A7%E9%94%81/"/>
      <url>/2020/01/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%8C%E7%BA%A7%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>今天写支付接口时，在客户端调用支付完成后，微信会调用微信支付通知接口<br>，而且存在多次调用问题，此时需要是使用数据锁，解决并发访问问题。</p><a id="more"></a><ul><li>redis锁</li></ul><p>首先考虑使用redis锁，将订单主键作为redis键值，使用redis setx方法，<br>将锁粒度控制在单一订单上，也比较合适，但是使用的话需要引入redis、不算简单。<br>好处是以后方便拓展</p><ul><li>数据库行级锁</li></ul><blockquote><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p></blockquote><p>考虑直接使用数据库行级锁，使用起来比较简单，配合事务，一行sql就搞定了</p><p>测试了一下，在查询的时候 相应字段普通索引不会是用行级锁，使用的还是表锁。<br>于是将订单的流水号字段建立唯一索引，使用for update查询测试为是行级锁。</p><p>spring具体使用方法为：业务方法上添加@Tranactional注解，可手写sql或者使用jpa @LOCK注解即可。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2019/12/30/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/12/30/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-数据类型"><a href="#一、-数据类型" class="headerlink" title="一、 数据类型"></a>一、 数据类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li>byte 8</li><li>short 16</li><li>char 16</li><li>int 32</li><li>float 32</li><li>long 64</li><li>double 64</li><li>boolean ~</li></ul><p>boolean类型可以使用1bit来存储，但是具体大小没有明确规定。jvm会在编译时期将boolean类型转int，使用1 0 表示。</p><a id="more"></a><h4 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h4><p>基本类型对应的缓存池如下：</p><ul><li>boolean true false</li><li>short -128 and 127</li><li>int -128 and 127</li><li>char in the range \u0000 to \u007F</li></ul><p>以Integer为例子， new Integer()将新增一个对象，而Integer.valueOf()则会首先在缓存池里选取。</p><h3 id="二、-String"><a href="#二、-String" class="headerlink" title="二、 String"></a>二、 String</h3><h4 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h4><p>字符串常量池保存着所有的字符串字面量。一般来说，这些字面量编译期就确定。也可以使用String.intern()在<br>运行时期将字符串添加到String Pool中。</p><h3 id="三、-运算"><a href="#三、-运算" class="headerlink" title="三、 运算"></a>三、 运算</h3><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>java中的参数传递是以值传递的方式，而不是引用传递。<br>可以认为传递的参数是针对原有引用存储值的拷贝，并不是原来的引用。</p><h3 id="四、-关键字"><a href="#四、-关键字" class="headerlink" title="四、 关键字"></a>四、 关键字</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>声明数据为常量</p><ul><li>对于基本类型，final使数据不变</li><li>对于引用类型，final是引用不变，即不可引用其他对象，但被引用的对象可以修改</li></ul><p>声明方法不能被子类重写<br>private方法隐式地定义为final，如果子类中出现和基类的一个private方法名相同的方法，不是对基类方法的重写，而是新定义的一个方法</p><p>声明类不允许被继承</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>静态方法必须有实现，不能还是抽象方法<br>静态方法中不能有this super关键字，这两个关键字与具体对象关联</p><p>静态代码块在类初始化时运行一次</p><p>初始化顺序：<br>静态变量和静态代码块优于实例变量和普通代码块，构造函数最后初始化</p><p>存在继承的情况下，初始化顺序为：</p><ul><li>父类 （静态变量、静态代码块）</li><li>子类 （静态变量、静态代码块）</li><li>父类 （实例变量、普通代码块）</li><li>父类 （构造函数）</li><li>子类 （实例变量、普通代码块）</li><li>子类 （构造函数）</li></ul><h3 id="五、-Object通用方法"><a href="#五、-Object通用方法" class="headerlink" title="五、 Object通用方法"></a>五、 Object通用方法</h3><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><p>实现：</p><ul><li>检查是否为同一个对象的引用，如果是直接返回true</li><li>检查是否为同一种类型，如果不是直接返回false</li><li>将Object对象进行转型</li><li>判断每个关键字段是否相等</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">int</span> a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">int</span> b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> == o ) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">if</span>(o ==<span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        Example that = (Example) o;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.a == that.a &amp;&amp; <span class="hljs-keyword">this</span>.b == that.b)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="hljs-keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h4><p>等价的两个对象散列值一定相等<br>在覆盖equals()方法时应当总是覆盖hashCode()方法，保证等价的两个对象哈希值也相等。</p><p>理想的哈希函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的哈希值上。这就要求<br>了哈希函数要把所有域的值都考虑进来。可以将每个域都当成R进制的某一位，然后组成一个R进制<br>的整数。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">int</span> result = <span class="hljs-number">17</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    result = <span class="hljs-number">31</span> * result + x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    result = <span class="hljs-number">31</span> * result + y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    result = <span class="hljs-number">31</span> * result + z;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h4><p><strong>1.cloneable</strong></p><p>clone()是Object的project方法，一个类没有重写Clone()方法，其他类就不能直接去调用该<br>类实例的Clone()方法。还需要实现Cloneable接口。</p><p><strong>2.浅拷贝与深拷贝</strong></p><p>浅拷贝：原始对象和拷贝对象引用指向同一个对象<br>深拷贝：原始对象和拷贝对象引用指向不同的对象</p><p>上文中的clone()方法通常是对依照原始对象new一个新的拷贝对象，然后根据原始对象的每个域<br>复制给拷贝对象。</p><p><strong>3.clone()的替代方案</strong><br>使用clone()方法比较复杂，最好不要使用clone()，可以使用拷贝构造函数或者拷贝工厂<br>来拷贝一个对象</p><p>也可以使用序列化的方式拷贝</p><h3 id="六、继承"><a href="#六、继承" class="headerlink" title="六、继承"></a>六、继承</h3><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h4><p><strong>1.抽象类</strong><br>如果一个类中包含抽象方法，那这个类必须声明为抽象类<br>抽象类和普通类最大的区别是抽象类不能被实例化，只能被继承</p><p><strong>2.接口</strong></p><p>接口的成员(字段+方法)默认都是public的，并且不允许定义为private和protected<br>接口的字段默认都是static和final的</p><p><strong>3.比较</strong></p><ul><li>从设计层面看，抽象类提供一种is-a关系，需要满足里氏代换原则，即子类对象必须<br>能够替换掉所有父类对象；接口更像是一种like-a关系</li><li>从使用上看，一个类可以实现多个接口，但是不能继承多个抽象类。</li><li>接口字段只能是static和final类型的，抽象类没有限制</li><li>接口的成员只能是public的，抽象类成员可有多种访问权限</li></ul><h3 id="七、泛型"><a href="#七、泛型" class="headerlink" title="七、泛型"></a>七、泛型</h3><p>使用泛型的好处：<br>1.在集合中存储对象并在使用前进行类型转换不方便，泛型提供了编译期间的类型安全，<br>确保能能够把正确类型的对象放入到集合中<br><br><br>2.在写业务封装对象时，泛型可以提供限定某种类型</p><p><a href="https://cloud.tencent.com/developer/article/1033693" target="_blank" rel="noopener">10道java泛型面试题</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP状态问题</title>
      <link href="/2019/12/27/TCP%E7%8A%B6%E6%80%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/27/TCP%E7%8A%B6%E6%80%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="TCP三次握手建立连接"><a href="#TCP三次握手建立连接" class="headerlink" title="TCP三次握手建立连接"></a>TCP三次握手建立连接</h4><ul><li>Client发送带有SYN和seq = x的包到Server;Client转为SYN_SENT</li><li>Server返回SYN、ACK、ack = x +1和seq = y的包，Server从LISTEN切换到SYN_RCVD</li><li>Client发送ACK、 ack = y +1和seq = x+1 的包，都转为ESTABLISHED</li></ul><a id="more"></a><p>三次握手的主要目的是：<strong>信息对等和防止超时</strong>。防止超时导致脏连接。<br>如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<br>此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p><h4 id="TCP四次挥手释放连接"><a href="#TCP四次挥手释放连接" class="headerlink" title="TCP四次挥手释放连接"></a>TCP四次挥手释放连接</h4><ul><li>Client发送带有FIN和seq = x的包到Server，Client从ESTABLISHED转为FIN_WAIT_1</li><li>Server发送带有Ack 、ack= x+1和seq = y的包到Client，Server进入到CLOSE_WAIT状态</li><li>Client收到确认请求后，进入FIN_WAIT_2，等待服务器发送释放报文</li><li>Server最后的数据发送完毕后，便发送释放报文，FIN = 1,ack = x+1 和 seq = w ,Server进入到LAST_ACK状态</li><li>Client收到释放报文后，发出ACK、ack = w+1和seq = x+1，进入到TIME_WAIT状态。这是TCP连接还没有释放，必须等待2<br>MSL（最长报文段寿命）时间后，当Client撤销相应的TCB后，才进入CLOSED状态</li><li>Server只要收到了客户端发出的确认，立即进入CLOSED状态。Server结束TCP连接的时间要比客户端早一些。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年终总结</title>
      <link href="/2019/12/21/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/21/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p> 2019年还剩下10天，马上就要2020年了<br><br> 回想过去的这一年里，有收获、也有失落、五味杂陈。<br> <br><br> 感觉人成长变化都是由一件件事情驱动的，如果没有经过经历我还是我，很难有实质性的变化。</p> <a id="more"></a><p>如果说过去的2018年是由毕业到读研的一个过渡，让我重新体会到那种高中步入到大学的那种感觉；<br>这2019年感觉便是对新阶段人生的加深、熟悉、进步。</p><ul><li><p>学习工作</p><ol><li>spring实战</li><li>java编程思想</li><li>redis设计与实现</li><li>图解http</li><li>深入理解JVM</li><li>大型网站技术架构</li><li>程序员修炼之道</li><li>effect java</li><li>maven实战</li><li>java8实战</li><li>阿里巴巴Java开发手册</li><li>netty实战（未看完）</li><li>spring cloud微服务实战（未看完）</li><li>高效能人士的七个习惯（未看完）</li><li>亲密关系（未看完）</li><li>球状闪电</li><li>数不清的技术博客（自我感觉多数未消化）</li></ol></li></ul><p>这样一一列出来，发现也是读了不少书，其中以技术书籍为主。去年读研半年，课余时间算是刚刚入门，过年回来后，<br>便开始疯狂补充知识，其中有个致命的问题就是理论走在了前面 实践没有跟上。这个问题在开了新项目路边停车、在实习后<br>得到了一定程度的解决。</p><p>这一年编码能力、阅读代码的能力都得到了一定程度的提高，从最开始阅读java源码都有问题、速度慢、不是特别理解等，到现在阅读速度上、理解上都有很大的提高。</p><p>刷题： </p><pre><code>刷题刷的有些敷衍，在牛客上刷完了剑指offer、程序员面试金典的题，暗示自我感觉效果不好。在碰到不太会的问题时就去看了解答，但是也没有回过头来认真思考。接下来到到寒假结束有一个半月时间，承诺自己最少在leetcode刷100题。</code></pre><p>比赛： </p><pre><code>1.参加了腾讯的微信小程序比赛，最后进了复赛但是也没有拿到名次，2.阿里第五届中间件比赛，一开始直接懵逼了，各种不会。使劲搞了一番 616/4095,意料之内等赛事结束后，又进行了一波复盘 照着大佬的代码思考一番，敲出一个版本，在自适应负载均衡比赛中 45/498，还算满意还有一个消息队列的题目一直没吃透，抽时间再搞一稿</code></pre><p>参加比赛确实能学到很多东西，这次参加中间件比赛，接触到了很多之前不懂的东西，很有收获</p><p>实习：</p><pre><code>在七月份的时候，偷偷出去实习了两个月。在爱奇艺做的是一个内部使用的系统，用的技术也比较老 ssh这一套技术框架。自己对待的比较认真，老大给的任务都非常认真的完成，只不过有时候，完成了也不提交代码，磨一点时间自己学习。写些CURD、封装接口、OSS使用、jenkins使用、将设计模式用到代码中 也学到了很多东西，感觉最重要的是通过做这个中老的框架的东西，让我对spring、tomcat有了更好的理解，梳理了从请求发出到返回的整个过程、细节。仿照开源项目，写demo tomcat、spring等，也给开源项目贡献了一次代码，虽然只是文本翻译... 这次实习过程对自己很重要，也很感谢老大</code></pre><ul><li>生活</li></ul><p>生活上还是自己一个人，孤单倒不孤独，可能是真的单身习惯了；有时候去参加联谊、想要找个女朋友，但是感觉找不找得到也无所谓。并不是多放在心上，宁愿<br>更多一点时间待着实验室里…<br><br>实习时候碰到一个女生，做了件好蠢的事情…<br><br>最近 感情上有碰到些问题，有点不知道自己该不该接受，有点想逃避、有点想接受…不愿多想、感觉自己又会犯错误</p><p>深深的感觉到 父母因为文化问题有些愚昧，自己也成年好多年了，家里有些事情应该帮他们做主意；一转眼弟弟也上初中了，马上该上高中了，<br>感觉跟当初的我一样，知道好好学习，但是也会特别想玩。有时想将自己遗憾没有做的事情，嘱咐他 想让他不要错过，但是往往事与愿违。<br><br>姨姐今年也结婚了，最开始还考虑要不要回家…看到她结婚真好<br><br>生活有条不紊，注意作息 健康饮食</p><ul><li>方法论</li></ul><p>这一年加深了对理论联系实践、从实践中来到实践中去的认知</p><p>在学习生活中，光学习理论知识不实践、光实践不增强理论知识都不行，只有两者不同程度的并进才能达到较好的效果。<br>比如，实践碰到问题了，回过头来学习理论知识，而后再实践；从实践中学习，实践中验证学到的东西，不断重复这个过程</p><ul><li>明年承诺</li></ul><ol><li>leetcode刷300题</li><li>拿到alibaba的offer</li><li>竹笛最少两首拿手曲子</li><li>英语达到能够听明白歌曲的程度</li><li>日语学习完新标准第一册</li><li>象棋稳定业二</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gc</title>
      <link href="/2019/12/05/gc/"/>
      <url>/2019/12/05/gc/</url>
      
        <content type="html"><![CDATA[<h3 id="判断对象是否存活，可以使用引用计数器或者可达性分析两种方法。"><a href="#判断对象是否存活，可以使用引用计数器或者可达性分析两种方法。" class="headerlink" title="判断对象是否存活，可以使用引用计数器或者可达性分析两种方法。"></a>判断对象是否存活，可以使用引用计数器或者可达性分析两种方法。</h3><p>引用计数器：<br>当引用计数器为零的时候，表明没用引用再指向该对象，但是引用计数器不能解决循环引用的情况；<br>可达性分析：</p><ol><li>当不能从GC Root寻找一条路径到达该对象时， 将进行第一次标记。</li><li>第一次标记后检查对象是否重写了finalize() 和是否已经被调用了finalize()方法。若没有重写finalize()方法或已经被调用，则进行回收。</li><li>在已经重写finalize()方法且未调用的情况下，将对象加入一个F-Queue 的队列中，稍后进行第二次检查。</li><li>在第二次标记之前，对象如果执行finalize()方法并完成自救，对象则不会被回收。否则完成第二次标记，进行回收。值得注意的是finalize()方法并不可靠。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java内存分配</title>
      <link href="/2019/12/04/java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
      <url>/2019/12/04/java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="java内存区域"><a href="#java内存区域" class="headerlink" title="java内存区域"></a>java内存区域</h3><p>线程私有的：程序计数器、虚拟机栈、本地方法栈<br>线程公有的：方法区、堆</p><ul><li>程序计数器</li></ul><p>和操作系统的程序计数器类似，用于控制程序执行步数，计算跳转内存地址</p><ul><li>虚拟机栈</li></ul><p>用来存储方法执行时的局部变量、动态链接、方法出口等。</p><ul><li>本地方法栈</li></ul><p>用来存储java JNI调用的native方法的相关信息，和虚拟机栈类似</p><a id="more"></a><ul><li>方法区</li></ul><p>用来存储常量、静态变量、类信息等信息，通俗来讲存储类的通用的模板数据</p><ul><li>堆</li></ul><p>存储几乎所有的实例化对象和数组，包括对象的实例变量。</p><p>Java7之后，String Pool被移到堆内，因为永久代空间有限，在大量使用字符串的场景下会出现OutOfMemoryError错误</p><ul><li>直接内存</li></ul><p>这不是虚拟机数据区的一部分，属于堆外内存。这样可以避免在java堆和native堆中来回复制数据。</p><h3 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h3><p>对于线程共享的静态变量、实例变量、和构成数组对象的元素是存储在堆中，算是常说的主内存。<br>而每个线程使用这些变量的时候则需要将其读取复制到自身的工作内存，处理后再写会主内存。<br>所以会有变量可见性问题，即不能及时看到变化。<br>对于关键字volatile来说，其修饰的变量读写直接在主内存中，不涉及到工作内存的读写，所有是保证可见性的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>双亲委派模型类加载器问题</title>
      <link href="/2019/12/02/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/02/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>下图是关于类加载顺序的总结</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/csxiaoshang/images/master/bolg/image1241399721.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/2019/11/27/2019-11-27-CommandPattern/"/>
      <url>/2019/11/27/2019-11-27-CommandPattern/</url>
      
        <content type="html"><![CDATA[<ul><li>命令模式</li></ul><p>下图为命令模式类图<br><img src="https://raw.githubusercontent.com/csxiaoshang/images/master/bolg/images20191127153840.png" alt><br><br><br><br><br>简单的看，命令模式实现了命令发起者和命令执行者的解耦，中间增加了一层调用者。<br>命令组合命令执行者，调用者中维护一个命令列表，并封装命令执行方法。命令发起者则将命令添加到命令调用者中。</p><a id="more"></a> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Client&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    putCommand(Command command,Receiver receiver);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">class Invoker&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    List&lt;Command&gt; commandList;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    executeCommand()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        commandList.forEach(command-&gt;command.execute());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">interface Command&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    execute();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">class CommandA implements Command&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    Receiver receiver;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    execute()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        receiver.action();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">class Receiver&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    action()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; 需要执行的业务逻辑</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iqiyi实习总结</title>
      <link href="/2019/11/26/2019-11-26-iqiyi/"/>
      <url>/2019/11/26/2019-11-26-iqiyi/</url>
      
        <content type="html"><![CDATA[<ul><li>在爱奇艺实习的经验总结</li></ul><p>今年算是在7月到9月在爱奇艺实习了两个月，算是偷偷的跑了出去。说实话这两个月在爱奇艺学到的东西不多，接手的项目并不是一个线上使用的能够盈利的项目。<br>而是一个公司内部使用的一个持续集成、持续部署的系统，给爱奇艺电视打包各种不同的软件。用的是ssh框架，比较老，给自己的活主要是一些curd，也包括修改前端页面jsp。<br>唯一有点任务量的算是封装httpclient的api上传下载文件，另一个算是这个系统的核心业务了，编写使用jenkins api的通用工具类，自己写完后就将这个工具类开源了，还打包推到了maven中央仓库。。。</p><a id="more"></a><br>之前都是用springboot写项目，虽然大四的时候看了些javaweb的教程，学习了jsp、servlet，但是也不是太明白。通过做这个项目算是明白了spring项目的启动原理，ioc、aop的一些核心的东西，当时在公司里明白了一个http请求到tomcat处理后分发到spring再处理后，再到业务处理完返回的整个流程的时候，特别兴奋，也模仿github上的一个项目编写了一个小的tomcat demo.在公司的时候，同时看了些左潇龙大佬的设计模式博客，受益颇多。对java的继承 泛型理解多了些，尝试编写通用型的代码，注意编码时的解耦。jvm这本书读了内存那块，看了并发实战的一部分内容。<br>这两个月一下子就过去了，学到了挺多东西，但是又感觉没有多少，技术水平还得继续增强。<br>掌握好基础，多实践多学习！]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话设计模式学习小结</title>
      <link href="/2019/01/26/2019-01-26-DesignPattern/"/>
      <url>/2019/01/26/2019-01-26-DesignPattern/</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到算法的客户</p><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>就一个类而言，应该只有一个引起它变化的原因</p><h2 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h2><p>软件实体应该可以扩展，但是不可修改（增加新需求增加新代码）</p><a id="more"></a><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><p>针对接口编程，不要对实现编程</p><ul><li>高层模块不应该依赖底层模块，两个都应该依赖抽象</li><li>抽象不应该依赖细节，细节应该依赖抽象<h2 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h2>一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。即在软件里面，把父类都替换成它的子类，程序的行为没有变化。</li></ul><p><em>子类型必须能够替换掉它们的父类型</em><br><strong>通俗来讲，就是高层模块依赖接口，具体实现则是继承了此接口的实现类</strong></p><h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>为其他对象提供一种代理以控制对这个对象的访问</p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>用原型实例制定创建对象的种类，并且通过拷贝这些原型创建新的对象</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想学习小结</title>
      <link href="/2019/01/16/2019-01-16-ThinkInJava/"/>
      <url>/2019/01/16/2019-01-16-ThinkInJava/</url>
      
        <content type="html"><![CDATA[<h1 id="这段时间学习了下Java编程思想"><a href="#这段时间学习了下Java编程思想" class="headerlink" title="这段时间学习了下Java编程思想"></a>这段时间学习了下Java编程思想</h1><blockquote><p>之前做项目一些不懂的地方，通过这个看书找到很多答案，也知道不太会的问题应该去哪找了，感觉对自己很有帮助。</p></blockquote><a id="more"></a><blockquote><p>这本书看的时候并没有完完全全详细的看完，看了一些重点章节 仍有很多不会的地方，后续还要通过博客学习完善，甚至得再看看书。最后，感觉这本书对于java学习的进阶很有帮助。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode练习汇总（持续更新）</title>
      <link href="/2019/01/16/2019-01-16-leetcode/"/>
      <url>/2019/01/16/2019-01-16-leetcode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在个人github上新建了一个leetcode仓库，以后的练习将提交到此处</p></blockquote><p><a href="https://github.com/csxiaoshang/leetcode" target="_blank" rel="noopener">地址</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用springboot+ajax+bootstrap搭建的一个前后端耦合的个人博客项目</title>
      <link href="/2018/11/14/2018-11-14-springbootblog/"/>
      <url>/2018/11/14/2018-11-14-springbootblog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>搭建的比较简陋，只是完成了基本的用户和发表博客、展示博客等功能</p></blockquote><p><a href="https://github.com/csxiaoshang/blog" target="_blank" rel="noopener">项目地址</a></p><p>之后会继续学习springboot，了解前后端分离的使用。</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>232. Implement Queue using Stacks</title>
      <link href="/2018/09/22/2018-09-22-ImplementQueueusinggStacks/"/>
      <url>/2018/09/22/2018-09-22-ImplementQueueusinggStacks/</url>
      
        <content type="html"><![CDATA[<h1 id="Question-Implement-the-following-operations-of-a-queue-using-stacks"><a href="#Question-Implement-the-following-operations-of-a-queue-using-stacks" class="headerlink" title="Question: Implement the following operations of a queue using stacks."></a>Question: Implement the following operations of a queue using stacks.</h1><p>  用两个栈就可以实现一个队列的操作，注意判断栈是否为空</p>  <a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-comment">/** Initialize your data structure here. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     Stack&lt;Integer&gt; stack1=<span class="hljs-keyword">new</span> Stack&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack2=<span class="hljs-keyword">new</span> Stack&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyQueue</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span>(!stack2.isEmpty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">stack1.push(stack2.pop());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">stack1.push(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span>(!stack1.isEmpty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">stack2.push(stack1.pop());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> x=stack2.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span>(!stack1.isEmpty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">stack2.push(stack1.pop());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> stack2.peek();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(stack1.isEmpty()&amp;&amp;stack2.isEmpty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考虑后不去参加头条实习面试</title>
      <link href="/2018/09/22/2018-09-22-toutiaomianshibuqu/"/>
      <url>/2018/09/22/2018-09-22-toutiaomianshibuqu/</url>
      
        <content type="html"><![CDATA[<p>昨天下午收到了头条HR的电话，让过去参加面试，本来挺高兴的，寻思就算去不上，过去面试吸取下经验也是好的。</p><a id="more"></a><p>今天正好大学同学一起聚餐，特别高兴聊了很多。也寻思去过去看看肯定是好的，回来后，打算看看头条JAVA后台的实习面经，看了几篇劝退了。</p><p>您好，诚意邀请您参加字节跳动的面试。<br>【面试时间】：2018-09-26 16:00:00<br>【面试地点】：知春路甲48号盈都大厦B座10层<br>【面试流程】：笔试/初试-复试-终面<br>【乘车路线】：地铁10号线或13号线（知春路站B口出），西行约100米左转，前方左手边的写字楼即到。</p><p>深深的感觉到自己水平能力还有很大欠缺，想要做好java后台开发还有很长的路要走。</p><p>同时也很高兴自己来到了北京，这里机会真的是多。自己投了3份简历，两个让我去面试。在这种大环境下，真的是海阔凭鱼跃，天高任鸟飞。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试搜狗实习</title>
      <link href="/2018/09/21/2018-09-21-sougoumianshi/"/>
      <url>/2018/09/21/2018-09-21-sougoumianshi/</url>
      
        <content type="html"><![CDATA[<h3 id="面试搜狗的实习，估计凉了"><a href="#面试搜狗的实习，估计凉了" class="headerlink" title="面试搜狗的实习，估计凉了"></a>面试搜狗的实习，估计凉了</h3><a id="more"></a><p>  之前没事投了几个简历，也记不清这次是 java 还是android的了，还有点不太想去。。<br>  寻思了下还是过去吧，面试下还能增长下经验，了解下今后的学习方向。<br>  过去后，先去了前台登记了下，等一会面试的人过来了，叫到一个屋子里面试。先给了我一份试题，一串代码关于继承和上转型的，有一些 activity的lanchmode啥的 sevice的生命周期啥的，不太会;后面是两道编程题，比较简单，一个是用链表实现堆栈的push pop peak，一个是查找字符串里第一个不重复的字符。自我介绍了下，聊了下项目，项目怎么实现的啥的，后来问了点java的多态啥的，有点忘了，面试中我想起来，这个投的应该是android，他说了一句话，看你做的东西应该是没有调用过一些android核心的api，应该是凉了。</p><p>  算是个经验，不会的东西还有很多，没事多刷刷leetcode，把java研究精通些。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. Median of Two Sorted Arrays</title>
      <link href="/2018/09/20/2018-09-20-MedianofTwoSortedArrays/"/>
      <url>/2018/09/20/2018-09-20-MedianofTwoSortedArrays/</url>
      
        <content type="html"><![CDATA[<h2 id="Question-There-are-two-sorted-arrays-nums1-and-nums2-of-size-m-and-n-respectively-Find-the-median-of-the-two-sorted-arrays-The-overall-run-time-complexity-should-be-O-log-m-n-You-may-assume-nums1-and-nums2-cannot-be-both-empty"><a href="#Question-There-are-two-sorted-arrays-nums1-and-nums2-of-size-m-and-n-respectively-Find-the-median-of-the-two-sorted-arrays-The-overall-run-time-complexity-should-be-O-log-m-n-You-may-assume-nums1-and-nums2-cannot-be-both-empty" class="headerlink" title="Question: There are two sorted arrays nums1 and nums2 of size m and n respectively.Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).You may assume nums1 and nums2 cannot be both empty."></a>Question: There are two sorted arrays nums1 and nums2 of size m and n respectively.Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).You may assume nums1 and nums2 cannot be both empty.</h2><p>这道题比较简单，就是讲两个数组合并下然后排序，找中位数就可以了</p><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1,<span class="hljs-keyword">int</span>[] nums2)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span>[] shuzu=Arrays.copyOf(nums1,nums1.length+nums2.length);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">System.arraycopy(nums2, <span class="hljs-number">0</span>, shuzu, nums1.length, nums2.length);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Arrays.sort(shuzu);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> num=nums1.length+nums2.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">double</span> count=<span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> count=(<span class="hljs-keyword">double</span>)(shuzu[num/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>]+shuzu[num/<span class="hljs-number">2</span>])/<span class="hljs-number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="hljs-keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">count=(<span class="hljs-keyword">double</span>)shuzu[(num-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Longest Substring Without Repeating Characters</title>
      <link href="/2018/09/18/2018-09-18-LongestSubstringWithoutRepeatingCharacters/"/>
      <url>/2018/09/18/2018-09-18-LongestSubstringWithoutRepeatingCharacters/</url>
      
        <content type="html"><![CDATA[<h2 id="Question-Given-a-string-find-the-length-of-the-longest-substring-without-repeating-characters"><a href="#Question-Given-a-string-find-the-length-of-the-longest-substring-without-repeating-characters" class="headerlink" title="Question: Given a string, find the length of the longest substring without repeating characters."></a>Question: Given a string, find the length of the longest substring without repeating characters.</h2><p>这道题两个循环遍历找最大的子串也可以，但是那样会慢一些，这里借助set的性质处理的这道题，感觉还可以用KMP算法，等回头做了再贴上来</p><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       <span class="hljs-keyword">int</span> len=s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Set&lt;Character&gt; se=<span class="hljs-keyword">new</span> HashSet&lt;Character&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;j&lt;len;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(!se.contains(s.charAt(j))) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">se.add(s.charAt(j));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">j++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">ans=Math.max(ans, j-i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">se.remove(s.charAt(i));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">i++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> ans;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20.Valid Parentheses</title>
      <link href="/2018/09/17/2018-09-17-ValidParentheses/"/>
      <url>/2018/09/17/2018-09-17-ValidParentheses/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一道比较简单的堆栈题目，但是本人很少用java写程序做题，做题的过程中出了很多错误，也上网百度了下，算是完成了</p></blockquote><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Stack&lt;Character&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;Character&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">char</span> ch=s.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">switch</span> (ch) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'('</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'['</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'&#123;'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">stack.push(ch);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">')'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>((stack.isEmpty())||stack.peek()!=<span class="hljs-string">'('</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">stack.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">']'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>((stack.isEmpty())||stack.peek()!=<span class="hljs-string">'['</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">stack.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'&#125;'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>((stack.isEmpty())||stack.peek()!=<span class="hljs-string">'&#125;'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">stack.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">default</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span>(!stack.isEmpty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭一个自己的vpn</title>
      <link href="/2018/05/18/2018-05-18-create-vpn/"/>
      <url>/2018/05/18/2018-05-18-create-vpn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>寻思自己搭建一个VPN留着用来翻墙学习游戏，了解到可以使用shadowsocks，再租一个国外的服务器搭好环境基本就可以使用了</p></blockquote><a id="more"></a><p><a href="https://www.yigeni.com/build-a-wall-ss-server/" target="_blank" rel="noopener">参考博客</a></p><p><a href="https://www.flyzy2005.com/fan-qiang/shadowsocks/install-shadowsocks-in-one-command/" target="_blank" rel="noopener">参考博客2脚本搭建ss</a></p><p><a href="https://my.vultr.com" target="_blank" rel="noopener">服务器网址</a></p><blockquote><p>当然现在还没有搭 &gt;_&lt;！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2018/05/16/2018-05-16-firstblog/"/>
      <url>/2018/05/16/2018-05-16-firstblog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上网学习了一上午怎么用github搭建个人博客，找到了xudailong先生的博客，fork项目，拿来做了一下更改，算是初步完成了，表示感谢！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
