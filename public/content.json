{"pages":[{"title":"刘云尚","text":"联系方式 Email：970090853@qq.com 个人信息 刘云尚/男/1996 Github：https://github.com/csxiaoshang 目前在北京，北京邮电大学","link":"/about/index.html"}],"posts":[{"title":"my first blog","text":"上网学习了一上午怎么用github搭建个人博客，找到了xudailong先生的博客，fork项目，拿来做了一下更改，算是初步完成了，表示感谢！","link":"/2018/05/16/2018-05-16-firstblog/"},{"title":"搭一个自己的vpn","text":"寻思自己搭建一个VPN留着用来翻墙学习游戏，了解到可以使用shadowsocks，再租一个国外的服务器搭好环境基本就可以使用了 参考博客 参考博客2脚本搭建ss 服务器网址 当然现在还没有搭 &gt;_&lt;！","link":"/2018/05/18/2018-05-18-create-vpn/"},{"title":"20.Valid Parentheses","text":"这是一道比较简单的堆栈题目，但是本人很少用java写程序做题，做题的过程中出了很多错误，也上网百度了下，算是完成了 1class Solution {2 public boolean isValid(String s) {3 Stack&lt;Character&gt; stack=new Stack&lt;Character&gt;();4 for(int i=0;i&lt;s.length();i++){5 char ch=s.charAt(i);6 switch (ch) {7 case '(':8 case '[':9 case '{':10 stack.push(ch);11 break;12 case ')':13 if((stack.isEmpty())||stack.peek()!='(')14 return false;15 else16 stack.pop();17 break;18 case ']':19 if((stack.isEmpty())||stack.peek()!='[')20 return false;21 else22 stack.pop();23 break;24 case '}':25 if((stack.isEmpty())||stack.peek()!='}')26 return false;27 else28 stack.pop();29 break;30 default:31 break;32 }33 }34 if(!stack.isEmpty())35 return false;36 return true;37 }38 }","link":"/2018/09/17/2018-09-17-ValidParentheses/"},{"title":"4. Median of Two Sorted Arrays","text":"Question: There are two sorted arrays nums1 and nums2 of size m and n respectively.Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).You may assume nums1 and nums2 cannot be both empty.这道题比较简单，就是讲两个数组合并下然后排序，找中位数就可以了 1class Solution {2 public static double findMedianSortedArrays(int[] nums1,int[] nums2) {3 int[] shuzu=Arrays.copyOf(nums1,nums1.length+nums2.length);4 System.arraycopy(nums2, 0, shuzu, nums1.length, nums2.length);5 Arrays.sort(shuzu);6 int num=nums1.length+nums2.length;7 double count=0;8 if(num%2==0) {9 count=(double)(shuzu[num/2-1]+shuzu[num/2])/2;10 }else {11 count=(double)shuzu[(num-1)/2];12 }13 return count;14 }15 }","link":"/2018/09/20/2018-09-20-MedianofTwoSortedArrays/"},{"title":"3.Longest Substring Without Repeating Characters","text":"Question: Given a string, find the length of the longest substring without repeating characters.这道题两个循环遍历找最大的子串也可以，但是那样会慢一些，这里借助set的性质处理的这道题，感觉还可以用KMP算法，等回头做了再贴上来 1class Solution {2 public int lengthOfLongestSubstring(String s) {3 int len=s.length();4 int ans=0;5 Set&lt;Character&gt; se=new HashSet&lt;Character&gt;();6 for(int i=0,j=0;j&lt;len;) {7 if(!se.contains(s.charAt(j))) {8 se.add(s.charAt(j));9 j++;10 ans=Math.max(ans, j-i);11 }12 else {13 se.remove(s.charAt(i));14 i++;15 }16 }17 return ans;18 }19}","link":"/2018/09/18/2018-09-18-LongestSubstringWithoutRepeatingCharacters/"},{"title":"面试搜狗实习","text":"面试搜狗的实习，估计凉了 之前没事投了几个简历，也记不清这次是 java 还是android的了，还有点不太想去。。 寻思了下还是过去吧，面试下还能增长下经验，了解下今后的学习方向。 过去后，先去了前台登记了下，等一会面试的人过来了，叫到一个屋子里面试。先给了我一份试题，一串代码关于继承和上转型的，有一些 activity的lanchmode啥的 sevice的生命周期啥的，不太会;后面是两道编程题，比较简单，一个是用链表实现堆栈的push pop peak，一个是查找字符串里第一个不重复的字符。自我介绍了下，聊了下项目，项目怎么实现的啥的，后来问了点java的多态啥的，有点忘了，面试中我想起来，这个投的应该是android，他说了一句话，看你做的东西应该是没有调用过一些android核心的api，应该是凉了。 算是个经验，不会的东西还有很多，没事多刷刷leetcode，把java研究精通些。","link":"/2018/09/21/2018-09-21-sougoumianshi/"},{"title":"Java编程思想学习小结","text":"这段时间学习了下Java编程思想 之前做项目一些不懂的地方，通过这个看书找到很多答案，也知道不太会的问题应该去哪找了，感觉对自己很有帮助。 这本书看的时候并没有完完全全详细的看完，看了一些重点章节 仍有很多不会的地方，后续还要通过博客学习完善，甚至得再看看书。最后，感觉这本书对于java学习的进阶很有帮助。","link":"/2019/01/16/2019-01-16-ThinkInJava/"},{"title":"使用springboot+ajax+bootstrap搭建的一个前后端耦合的个人博客项目","text":"搭建的比较简陋，只是完成了基本的用户和发表博客、展示博客等功能 项目地址 之后会继续学习springboot，了解前后端分离的使用。","link":"/2018/11/14/2018-11-14-springbootblog/"},{"title":"考虑后不去参加头条实习面试","text":"昨天下午收到了头条HR的电话，让过去参加面试，本来挺高兴的，寻思就算去不上，过去面试吸取下经验也是好的。 今天正好大学同学一起聚餐，特别高兴聊了很多。也寻思去过去看看肯定是好的，回来后，打算看看头条JAVA后台的实习面经，看了几篇劝退了。 您好，诚意邀请您参加字节跳动的面试。【面试时间】：2018-09-26 16:00:00【面试地点】：知春路甲48号盈都大厦B座10层【面试流程】：笔试/初试-复试-终面【乘车路线】：地铁10号线或13号线（知春路站B口出），西行约100米左转，前方左手边的写字楼即到。 深深的感觉到自己水平能力还有很大欠缺，想要做好java后台开发还有很长的路要走。 同时也很高兴自己来到了北京，这里机会真的是多。自己投了3份简历，两个让我去面试。在这种大环境下，真的是海阔凭鱼跃，天高任鸟飞。","link":"/2018/09/22/2018-09-22-toutiaomianshibuqu/"},{"title":"leetcode练习汇总（持续更新）","text":"在个人github上新建了一个leetcode仓库，以后的练习将提交到此处 地址","link":"/2019/01/16/2019-01-16-leetcode/"},{"title":"大话设计模式学习小结","text":"策略模式它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到算法的客户 单一职责原则就一个类而言，应该只有一个引起它变化的原因 开放封闭原则软件实体应该可以扩展，但是不可修改（增加新需求增加新代码） 依赖倒转原则针对接口编程，不要对实现编程 高层模块不应该依赖底层模块，两个都应该依赖抽象 抽象不应该依赖细节，细节应该依赖抽象里氏代换原则一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。即在软件里面，把父类都替换成它的子类，程序的行为没有变化。 子类型必须能够替换掉它们的父类型通俗来讲，就是高层模块依赖接口，具体实现则是继承了此接口的实现类 装饰模式动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活 代理模式为其他对象提供一种代理以控制对这个对象的访问 工厂方法模式定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类 原型模式用原型实例制定创建对象的种类，并且通过拷贝这些原型创建新的对象","link":"/2019/01/26/2019-01-26-DesignPattern/"},{"title":"232. Implement Queue using Stacks","text":"Question: Implement the following operations of a queue using stacks. 用两个栈就可以实现一个队列的操作，注意判断栈是否为空 1 class MyQueue {2 /** Initialize your data structure here. */3 Stack&lt;Integer&gt; stack1=new Stack&lt;&gt;();4 Stack&lt;Integer&gt; stack2=new Stack&lt;&gt;();5 public MyQueue() {6 7 }8 9 public void push(int x) {10 while(!stack2.isEmpty())11 stack1.push(stack2.pop());12 stack1.push(x);13 }14 public int pop() {15 while(!stack1.isEmpty())16 stack2.push(stack1.pop());17 int x=stack2.pop();18 return x;19 }20 public int peek() {21 while(!stack1.isEmpty())22 stack2.push(stack1.pop());23 return stack2.peek();24 }25 public boolean empty() {26 if(stack1.isEmpty()&amp;&amp;stack2.isEmpty())27 return true;28 else29 return false;30 }31}","link":"/2018/09/22/2018-09-22-ImplementQueueusinggStacks/"},{"title":"iqiyi实习总结","text":"在爱奇艺实习的经验总结 今年算是在7月到9月在爱奇艺实习了两个月，算是偷偷的跑了出去。说实话这两个月在爱奇艺学到的东西不多，接手的项目并不是一个线上使用的能够盈利的项目。而是一个公司内部使用的一个持续集成、持续部署的系统，给爱奇艺电视打包各种不同的软件。用的是ssh框架，比较老，给自己的活主要是一些curd，也包括修改前端页面jsp。唯一有点任务量的算是封装httpclient的api上传下载文件，另一个算是这个系统的核心业务了，编写使用jenkins api的通用工具类，自己写完后就将这个工具类开源了，还打包推到了maven中央仓库。。。 之前都是用springboot写项目，虽然大四的时候看了些javaweb的教程，学习了jsp、servlet，但是也不是太明白。通过做这个项目算是明白了spring项目的启动原理，ioc、aop的一些核心的东西， 当时在公司里明白了一个http请求到tomcat处理后分发到spring再处理后，再到业务处理完返回的整个流程的时候，特别兴奋，也模仿github上的一个项目编写了一个小的tomcat demo.在公司的时候 ，同时看了些左潇龙大佬的设计模式博客，受益颇多。对java的继承 泛型理解多了些，尝试编写通用型的代码，注意编码时的解耦。jvm这本书读了内存那块，看了并发实战的一部分内容。 这两个月一下子就过去了，学到了挺多东西，但是又感觉没有多少，技术水平还得继续增强。 掌握好基础，多实践多学习！","link":"/2019/11/26/2019-11-26-iqiyi/"},{"title":"2020/2/28　淘系技术部一面","text":"个人介绍 自己遇到的项目中比较有挑战的点 项目问题 负载均衡 HTTP1 HTTP2优缺点 http2增加了多路复用、头部压缩 场景：长url到短url ThreadLocal使用场景 young gc full gc时机 年轻代对象转入到老年代的方式 两个线程串行执行方式 TCP如何保证可靠连接 乐观锁 悲观锁 数据库实现乐观锁 悲观锁 数据库分库分表 现有的最新的服务端架构 微服务等 个人对服务端架构的探索 HashMap 数据结构 hash冲突解决办法 个人职业规划 Http协议组成 cookie如何实现 浏览器如何实现重定向 close_wait time_wait何时出现 常见oom异常类型，什么情况下出现 mysql 优化方式 了解的设计模式 单例模式 对称加密和非对称加密有哪些 优缺点 对称加密有 aes des 加密快 安全性低 非对称加密 rsa 加密慢 安全性高 对称加密用来加密内容，非对称机密一般还是用公钥加密对称加密密钥，私钥解密 linux 查看ｃｐｕ 内存的命令 linux统计日志的命令 根据日志字段统计信息等 linux机器间传输文件命令","link":"/2020/02/28/2020-2-28-%E6%B7%98%E7%B3%BB%E6%8A%80%E6%9C%AF%E9%83%A8%E4%B8%80%E9%9D%A2/"},{"title":"命令模式","text":"命令模式 下图为命令模式类图简单的看，命令模式实现了命令发起者和命令执行者的解耦，中间增加了一层调用者。命令组合命令执行者，调用者中维护一个命令列表，并封装命令执行方法。命令发起者则将命令添加到命令调用者中。 1class Client{2 putCommand(Command command,Receiver receiver);3}45class Invoker{6 List&lt;Command&gt; commandList;7 executeCommand(){8 commandList.forEach(command-&gt;command.execute());9 }10}1112interface Command{13 execute();14}1516class CommandA implements Command{17 Receiver receiver;18 execute(){19 receiver.action();20 }21}2223class Receiver{24 action(){25 // 需要执行的业务逻辑26 }27}","link":"/2019/11/27/2019-11-27-CommandPattern/"},{"title":"2019年终总结","text":"2019年还剩下10天，马上就要2020年了 回想过去的这一年里，有收获、也有失落、五味杂陈。 感觉人成长变化都是由一件件事情驱动的，如果没有经过经历我还是我，很难有实质性的变化。 如果说过去的2018年是由毕业到读研的一个过渡，让我重新体会到那种高中步入到大学的那种感觉；这2019年感觉便是对新阶段人生的加深、熟悉、进步。 学习工作 spring实战 java编程思想 redis设计与实现 图解http 深入理解JVM 大型网站技术架构 程序员修炼之道 effect java maven实战 java8实战 阿里巴巴Java开发手册 netty实战（未看完） spring cloud微服务实战（未看完） 高效能人士的七个习惯（未看完） 亲密关系（未看完） 球状闪电 数不清的技术博客（自我感觉多数未消化） 这样一一列出来，发现也是读了不少书，其中以技术书籍为主。去年读研半年，课余时间算是刚刚入门，过年回来后，便开始疯狂补充知识，其中有个致命的问题就是理论走在了前面 实践没有跟上。这个问题在开了新项目路边停车、在实习后得到了一定程度的解决。 这一年编码能力、阅读代码的能力都得到了一定程度的提高，从最开始阅读java源码都有问题、速度慢、不是特别理解等，到现在阅读速度上、理解上都有很大的提高。 刷题： 刷题刷的有些敷衍，在牛客上刷完了剑指offer、程序员面试金典的题，暗示自我感觉效果不好。在碰到不太会的问题时就去看了解答，但是也没有回过头来 认真思考。接下来到到寒假结束有一个半月时间，承诺自己最少在leetcode刷100题。比赛： 1.参加了腾讯的微信小程序比赛，最后进了复赛但是也没有拿到名次， 2.阿里第五届中间件比赛，一开始直接懵逼了，各种不会。使劲搞了一番 616/4095,意料之内 等赛事结束后，又进行了一波复盘 照着大佬的代码思考一番，敲出一个版本，在自适应负载均衡比赛中 45/498，还算满意 还有一个消息队列的题目一直没吃透，抽时间再搞一稿参加比赛确实能学到很多东西，这次参加中间件比赛，接触到了很多之前不懂的东西，很有收获 实习： 在七月份的时候，偷偷出去实习了两个月。在爱奇艺做的是一个内部使用的系统，用的技术也比较老 ssh这一套技术框架。自己对待的比较认真，老大给的任务都 非常认真的完成，只不过有时候，完成了也不提交代码，磨一点时间自己学习。写些CURD、封装接口、OSS使用、jenkins使用、将设计模式用到代码中 也学到了很多东西，感觉最重要的是 通过做这个中老的框架的东西，让我对spring、tomcat有了更好的理解，梳理了从请求发出到返回的整个过程、细节。仿照开源项目，写demo tomcat、spring等，也给 开源项目贡献了一次代码，虽然只是文本翻译... 这次实习过程对自己很重要，也很感谢老大 生活 生活上还是自己一个人，孤单倒不孤独，可能是真的单身习惯了；有时候去参加联谊、想要找个女朋友，但是感觉找不找得到也无所谓。并不是多放在心上，宁愿更多一点时间待着实验室里…实习时候碰到一个女生，做了件好蠢的事情…最近 感情上有碰到些问题，有点不知道自己该不该接受，有点想逃避、有点想接受…不愿多想、感觉自己又会犯错误 深深的感觉到 父母因为文化问题有些愚昧，自己也成年好多年了，家里有些事情应该帮他们做主意；一转眼弟弟也上初中了，马上该上高中了，感觉跟当初的我一样，知道好好学习，但是也会特别想玩。有时想将自己遗憾没有做的事情，嘱咐他 想让他不要错过，但是往往事与愿违。姨姐今年也结婚了，最开始还考虑要不要回家…看到她结婚真好生活有条不紊，注意作息 健康饮食 方法论 这一年加深了对理论联系实践、从实践中来到实践中去的认知 在学习生活中，光学习理论知识不实践、光实践不增强理论知识都不行，只有两者不同程度的并进才能达到较好的效果。比如，实践碰到问题了，回过头来学习理论知识，而后再实践；从实践中学习，实践中验证学到的东西，不断重复这个过程 明年承诺 leetcode刷300题 拿到alibaba的offer 竹笛最少两首拿手曲子 英语达到能够听明白歌曲的程度 日语学习完新标准第一册 象棋稳定业二","link":"/2019/12/21/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"},{"title":"TCP状态问题","text":"TCP三次握手建立连接 Client发送带有SYN和seq = x的包到Server;Client转为SYN_SENT Server返回SYN、ACK、ack = x +1和seq = y的包，Server从LISTEN切换到SYN_RCVD Client发送ACK、 ack = y +1和seq = x+1 的包，都转为ESTABLISHED 三次握手的主要目的是：信息对等和防止超时。防止超时导致脏连接。如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。 TCP四次挥手释放连接 Client发送带有FIN和seq = x的包到Server，Client从ESTABLISHED转为FIN_WAIT_1 Server发送带有Ack 、ack= x+1和seq = y的包到Client，Server进入到CLOSE_WAIT状态 Client收到确认请求后，进入FIN_WAIT_2，等待服务器发送释放报文 Server最后的数据发送完毕后，便发送释放报文，FIN = 1,ack = x+1 和 seq = w ,Server进入到LAST_ACK状态 Client收到释放报文后，发出ACK、ack = w+1和seq = x+1，进入到TIME_WAIT状态。这是TCP连接还没有释放，必须等待2MSL（最长报文段寿命）时间后，当Client撤销相应的TCB后，才进入CLOSED状态 Server只要收到了客户端发出的确认，立即进入CLOSED状态。Server结束TCP连接的时间要比客户端早一些。","link":"/2019/12/27/TCP%E7%8A%B6%E6%80%81%E9%97%AE%E9%A2%98/"},{"title":"Java容器","text":"一、概览容器主要包括Collection和Map两种，Collection存储着对象的集合，Map存储着键值对(两个对象)的映射表 Collection1.Set TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作 HashSet：基于哈希表实现，不支持有序性操作 LinkedHashSet：具有HashSet的查找效率，内部使用双向链表维护元素的插入顺序 2.List ArrayList：基于动态数组实现，支持随机访问 Vector：和ArrayList相似，但它是线程安全的 LinkedList：基于双向链表实现，只能顺序访问。LinkedList还可以用作栈、队列和双向队列。 3.Queue LinkedList ： 可用作双向队列 PriorityQueue：基于堆实现，可用作优先队列 Map TreeMap：基于红黑树实现 HashMap：基于哈希表实现 HashTable：和HashMap相似，但它是线程安全的，但是一般不使用它，使用ConcurrentHashMap效率更高，因为引入了分段锁 LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序 二、容器中的设计模式迭代器模式Collection继承了Iterable接口，其中的iterator()方法能够产生一个Iterator对象，通过这个对象可以遍历Collection中的元素。 适配器模式java.util.Arrays#asList()可以把数组类型转换为List类型。 三、源码分析ArrayList1.概览ArrayList基于数组实现，所以支持快速随机访问，RandomAccess接口标志该类支持快速随机访问。数组默认大小为10。 2.扩容添加元素时使用ensureCapacityInternal()来保证容量足够，如果不够，扩容。新容量大小为旧容量大小的1.5倍。扩容操作需调用Arrays.copyOf()把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。 3.Fail-fastmodCount用来记录ArrayList结构发生变化的次数，在进行序列化或者迭代的时候，需要比较前后modCount是否改变，若改变了需要抛出ConcurrentModificationException异常. Vector1.同步使用synchronized进行同步 2.比较因为使用synchronized同步，所以开销要比ArrayList大一些 在使用方面，可使用Collections.synchronizedList()和CopyOnWriteArrayList代替 CopyOnWriteArrayList1.读写分离CopyOnWriteArrayList写操作时，加锁，将原有数组元素拷贝到一个新的数组中，写入元素，将原有数组指向新的数组，释放锁读操作在原有数组中，读写分离，互不影响 CopyOnWriteArrayList 存在内存占用和数据不一致性问题所以它不适合内存敏感以及对实时性要求高的场景 LinkedList基于双向链表实现 和ArrayList的区别可以归结为数组和链表的区别 HashMap1.存储结构内部维护一个Node类型的数组，作为hash表；Node数据结构包含4个字段，有key、value、next指针、int型hash值 数组的每一个位置被当做一个桶，一个桶存放一个链表。 2.拉链法的工作原理哈希表为解决hash冲突有开放地址法和链地址法。比较来说，链地址法更适合于大规模数据和不确定性数据的存储，处理冲突简单且不易出现堆积问题，节省空间 确定hash桶数组索引位置key值取哈希值时采用高位运算使得hash值的高位通常也能参与到计算hash表值中，使用与运算代替取模提高一定的效率。 HashMap的put方法JDK 1.7 之前使用头插法、JDK 1.8 使用尾插法 扩容机制在hash表容量扩大为两倍时，在rehash时有了一定的优化，在数组位置上只有一个元素时，rehash赋值到新的hash表；有多个元素时，根据扩容的位为1或0，进行优化 3.参看链接Java 8系列之重新认识HashMapHashMap 相关面试题及其解答 注意(1) 扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。 (2) 负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。 (3) HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。 (4) JDK1.8引入红黑树大程度优化了HashMap的性能。 (5) 还没升级JDK1.8的，现在开始升级吧。HashMap的性能提升仅仅是JDK1.8的冰山一角。 Q：HashMap，LinkedHashMap，TreeMap 有什么区别？ A：HashMap 参考其他问题； LinkedHashMap 保存了记录的插入顺序，在用 Iterator 遍历时，先取到的记录肯定是先插入的；遍历比 HashMap 慢； TreeMap 实现 SortMap 接口，能够把它保存的记录根据键排序（默认按键值升序排序，也可以指定排序的比较器） Q：HashMap 和 HashTable 有什么区别？ A：①、HashMap 是线程不安全的，HashTable 是线程安全的； ②、由于线程安全，所以 HashTable 的效率比不上 HashMap； ③、HashMap最多只允许一条记录的键为null，允许多条记录的值为null，而 HashTable 不允许； ④、HashMap 默认初始化数组的大小为16，HashTable 为 11，前者扩容时，扩大两倍，后者扩大两倍+1； ⑤、HashMap 需要重新计算 hash 值，而 HashTable 直接使用对象的 hashCodeConcurrentHashMapjdk1.7版本的ConcurrentHashMap解析HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！","link":"/2020/01/30/Java%E5%AE%B9%E5%99%A8/"},{"title":"gc","text":"判断对象是否存活，可以使用引用计数器或者可达性分析两种方法。引用计数器：当引用计数器为零的时候，表明没用引用再指向该对象，但是引用计数器不能解决循环引用的情况；可达性分析： 当不能从GC Root寻找一条路径到达该对象时， 将进行第一次标记。 第一次标记后检查对象是否重写了finalize() 和是否已经被调用了finalize()方法。若没有重写finalize()方法或已经被调用，则进行回收。 在已经重写finalize()方法且未调用的情况下，将对象加入一个F-Queue 的队列中，稍后进行第二次检查。 在第二次标记之前，对象如果执行finalize()方法并完成自救，对象则不会被回收。否则完成第二次标记，进行回收。值得注意的是finalize()方法并不可靠。","link":"/2019/12/05/gc/"},{"title":"java内存分配","text":"java内存区域线程私有的：程序计数器、虚拟机栈、本地方法栈线程公有的：方法区、堆 程序计数器 和操作系统的程序计数器类似，用于控制程序执行步数，计算跳转内存地址 虚拟机栈 用来存储方法执行时的局部变量、动态链接、方法出口等。 本地方法栈 用来存储java JNI调用的native方法的相关信息，和虚拟机栈类似 方法区 用来存储常量、静态变量、类信息等信息，通俗来讲存储类的通用的模板数据 堆 存储几乎所有的实例化对象和数组，包括对象的实例变量。 Java7之后，String Pool被移到堆内，因为永久代空间有限，在大量使用字符串的场景下会出现OutOfMemoryError错误 直接内存 这不是虚拟机数据区的一部分，属于堆外内存。这样可以避免在java堆和native堆中来回复制数据。 java内存模型对于线程共享的静态变量、实例变量、和构成数组对象的元素是存储在堆中，算是常说的主内存。而每个线程使用这些变量的时候则需要将其读取复制到自身的工作内存，处理后再写会主内存。所以会有变量可见性问题，即不能及时看到变化。对于关键字volatile来说，其修饰的变量读写直接在主内存中，不涉及到工作内存的读写，所有是保证可见性的。","link":"/2019/12/04/java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"},{"title":"Java基础","text":"一、 数据类型基本类型 byte 8 short 16 char 16 int 32 float 32 long 64 double 64 boolean ~ boolean类型可以使用1bit来存储，但是具体大小没有明确规定。jvm会在编译时期将boolean类型转int，使用1 0 表示。 缓存池基本类型对应的缓存池如下： boolean true false short -128 and 127 int -128 and 127 char in the range \\u0000 to \\u007F 以Integer为例子， new Integer()将新增一个对象，而Integer.valueOf()则会首先在缓存池里选取。 二、 StringString Pool字符串常量池保存着所有的字符串字面量。一般来说，这些字面量编译期就确定。也可以使用String.intern()在运行时期将字符串添加到String Pool中。 三、 运算参数传递java中的参数传递是以值传递的方式，而不是引用传递。可以认为传递的参数是针对原有引用存储值的拷贝，并不是原来的引用。 四、 关键字final声明数据为常量 对于基本类型，final使数据不变 对于引用类型，final是引用不变，即不可引用其他对象，但被引用的对象可以修改 声明方法不能被子类重写private方法隐式地定义为final，如果子类中出现和基类的一个private方法名相同的方法，不是对基类方法的重写，而是新定义的一个方法 声明类不允许被继承 static静态方法必须有实现，不能还是抽象方法静态方法中不能有this super关键字，这两个关键字与具体对象关联 静态代码块在类初始化时运行一次 初始化顺序：静态变量和静态代码块优于实例变量和普通代码块，构造函数最后初始化 存在继承的情况下，初始化顺序为： 父类 （静态变量、静态代码块） 子类 （静态变量、静态代码块） 父类 （实例变量、普通代码块） 父类 （构造函数） 子类 （实例变量、普通代码块） 子类 （构造函数） 五、 Object通用方法equals()实现： 检查是否为同一个对象的引用，如果是直接返回true 检查是否为同一种类型，如果不是直接返回false 将Object对象进行转型 判断每个关键字段是否相等 1public class Example{2 int a;3 int b;4 5 @Override6 public boolean equals(Object o){7 if(this == o ) return true;8 if(o ==null || getClass() != o.getClass()) return false;9 Example that = (Example) o;10 if(this.a == that.a &amp;&amp; this.b == that.b)11 return true;12 else13 return false;14 }15} hashCode()等价的两个对象散列值一定相等在覆盖equals()方法时应当总是覆盖hashCode()方法，保证等价的两个对象哈希值也相等。 理想的哈希函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的哈希值上。这就要求了哈希函数要把所有域的值都考虑进来。可以将每个域都当成R进制的某一位，然后组成一个R进制的整数。 1@Override2public int hashCode(){3 int result = 17;4 result = 31 * result + x;5 result = 31 * result + y;6 result = 31 * result + z;7 return result;8} clone()1.cloneable clone()是Object的project方法，一个类没有重写Clone()方法，其他类就不能直接去调用该类实例的Clone()方法。还需要实现Cloneable接口。 2.浅拷贝与深拷贝 浅拷贝：原始对象和拷贝对象引用指向同一个对象深拷贝：原始对象和拷贝对象引用指向不同的对象 上文中的clone()方法通常是对依照原始对象new一个新的拷贝对象，然后根据原始对象的每个域复制给拷贝对象。 3.clone()的替代方案使用clone()方法比较复杂，最好不要使用clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象 也可以使用序列化的方式拷贝 六、继承抽象类与接口1.抽象类如果一个类中包含抽象方法，那这个类必须声明为抽象类抽象类和普通类最大的区别是抽象类不能被实例化，只能被继承 2.接口 接口的成员(字段+方法)默认都是public的，并且不允许定义为private和protected接口的字段默认都是static和final的 3.比较 从设计层面看，抽象类提供一种is-a关系，需要满足里氏代换原则，即子类对象必须能够替换掉所有父类对象；接口更像是一种like-a关系 从使用上看，一个类可以实现多个接口，但是不能继承多个抽象类。 接口字段只能是static和final类型的，抽象类没有限制 接口的成员只能是public的，抽象类成员可有多种访问权限 七、泛型使用泛型的好处：1.在集合中存储对象并在使用前进行类型转换不方便，泛型提供了编译期间的类型安全，确保能能够把正确类型的对象放入到集合中2.在写业务封装对象时，泛型可以提供限定某种类型 10道java泛型面试题","link":"/2019/12/30/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"title":"准备找暑期实习，至此时大约一个月","text":"恍恍惚惚 从2.13号开始询问宇神如何制作简历，慌慌张张地制作完成简历，开始疯狂复习基础、刷面经。感觉自己啥都不会，看着面经都有点不知道该怎么说。经过一周多不到两周的准备，大约有点知识储备了，开始投阿里的提前批。第一次面试，面的十分僵硬，tcp http 没怎么准备，好多问题不清楚。开始查漏补缺，看基础、源码。 底气不足现在，面了阿里的几个部门都是一面没有问题，钉钉在等hr面，互动平台明天二面。还没有投其他公司，打算今明两天开始投其他大厂。感觉面试的几个组成部分，java spring jvm 并发 数据库 网络 分布式。这几块中，数据库是我最薄弱的部分，同时分布式以及中间件也掌握的不行，接下来重点准备这一部分，同时深入学习下netty 阶段总结这一个月以来，学习效率不是很高，有时候压力有点大，总是忍不住出去喘口气。投简历这一块，还是要多投，多找机会。之前投了３个部门就感觉很多了，想集中精力学习，不再投递。后面才明白，多投递一次简历就多一次机会，可能再等这个部门的同时，另一个部门已经终面了。回过头来看看，没想到两周前自己的想法有很大问题。还是得仔细琢磨积极主动的意思。","link":"/2020/03/10/%E5%87%86%E5%A4%87%E6%89%BE%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%EF%BC%8C%E8%87%B3%E6%AD%A4%E6%97%B6%E5%A4%A7%E7%BA%A6%E4%B8%80%E4%B8%AA%E6%9C%88/"},{"title":"双亲委派模型类加载器问题","text":"下图是关于类加载顺序的总结","link":"/2019/12/02/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E9%97%AE%E9%A2%98/"},{"title":"数据库事务","text":"数据库事务级别依次由低到高有： 读未提交 读已提交 可重复读 序列化mysql默认隔离级别是可重复读 不同事务级别带来的问题，主要是同一事务内多次读取的内容不一致问题 脏读：事务A中，读取到另一个事务B未提交的内容，然后事务B回滚，导致事务A读取的数据为脏数据。事务A读取了内容C，事务B更新了内容C但是未提交，事务A又一次读取内容C，但是内容C改变，两次读取内容不一致。 不可重复读：事务A多次读取同一数据，事务B在事务A多次读取过程中，对数据进行了更新并提交，导致事务A多次读取同一数据，但结果不一致。 幻读：事务A读取了表内所有行，事务B新增了一行，A再次读取时发现两次结果不一致，多了一行。 小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表","link":"/2020/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"},{"title":"数据库行级锁","text":"今天写支付接口时，在客户端调用支付完成后，微信会调用微信支付通知接口，而且存在多次调用问题，此时需要是使用数据锁，解决并发访问问题。 redis锁 首先考虑使用redis锁，将订单主键作为redis键值，使用redis setx方法，将锁粒度控制在单一订单上，也比较合适，但是使用的话需要引入redis、不算简单。好处是以后方便拓展 数据库行级锁 表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般 考虑直接使用数据库行级锁，使用起来比较简单，配合事务，一行sql就搞定了 测试了一下，在查询的时候 相应字段普通索引不会是用行级锁，使用的还是表锁。于是将订单的流水号字段建立唯一索引，使用for update查询测试为是行级锁。 spring具体使用方法为：业务方法上添加@Tranactional注解，可手写sql或者使用jpa @LOCK注解即可。","link":"/2020/01/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%8C%E7%BA%A7%E9%94%81/"},{"title":"快手效率工程2020春招实习面试","text":"一面(2020/04/14) 自我介绍 停车云业务以及架构介绍 负载均衡比赛介绍 hashMap concurrentHashMap spring ioc 以及aop的使用 jvm内存 实现多线程的方法 避免订单重复支付的方法 手写sql Person id gender age name 1 M 35 zhangsan 2 F 29 lisi select count(*) from Person where gender=”M” and age &gt; 35 group by age; spring中用到的设计模式 手写单例模式 1public class singleton{2 public volatile Singleton singleton;3 private Object lock = new Object();4 public Singleton getSingletion(){5 if(singleton == null){6 synchronized(lock){7 if(singleton == null){8 singleton = new Singleton();9 }10 }11 }12 return singleton;13 }14} 部门主要做的业务 二面(2020/04/15) 负载均衡比赛 aop原理 array和list区别 hashmap和list初始容量 扩容 currentHashMap线程安全原理 @Tranactional注解原理 hibenate和mybatis区别 full gc触发条件 年轻代和老年代的比例，年轻带 eden surivrior比例 实现一个方法，判断一个字符串，最多删除一个字符，能否成为回文串。abccbca 公司对新的实习生的培养机制 hr面 面试过程中的收获、评价 目前有哪些面试流程以及offer 个人对想去的部门和想做的业务是如何考虑的 对快手面试以及其他公司的面试过程体验如何 想问的问题(问了部门业务)","link":"/2020/04/14/%E5%BF%AB%E6%89%8B%E6%95%88%E7%8E%87%E5%B7%A5%E7%A8%8B2020%E6%98%A5%E6%8B%9B%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"},{"title":"字节跳动抖音直播平台面试","text":"一面 自我介绍 负载均衡比赛 其他负载均衡算法 java内存模型 分区 gc gc优化 多线程创建线程 线程池 线程同步 进程通信的方式 10亿int整型数，以及一台可用内存为1GB的机器，时间复杂度要求O(n)，统计只出现一次的数？（或者是没有出现过的数字 假设数组 A 和 B 都是有序的，并且 A 有足够多余的空间可以合并 B。要求不使用额外的空间，把 B 合并进 A 并保证最终的数组有序1public void solution(int[] A,int size,int[] B){2 if(B==null || B.length == 0){3 return;4 }5 int n = size;6 int m = B.length;7 int index = n+m-1;8 for(int i = index;i&gt;=0;i--){9 if(A[n-1]&gt;B[m-1]){10 A[index] = A[n-1];11 n--;12 }else{13 A[index] = B[m-1];14 m--;15 }16 if(m&lt;=0||n&lt;=0){17 break;18 }19 }20 if(n&lt;=0){21 for(int i = index;i&gt;=0;i--){22 A[i] = B[m--]23 }24 }25} 有什么想问的 部门主要做的哪些业务 二面(2020/3/24_153322) 停车云介绍 负载均衡比赛介绍 请求是同步的吗 服务提供逻辑是线性的吗 lru如何实现 ans:使用链表形式,最近访问的节点放在链表头部，移出时 移出尾部节点 使用双链表还是单链表 为什么 ans:使用双链表，可以比较好的访问尾部节点，移出时方便 有没有移出中间节点的情况 这种方案读取数据时间复杂为o(n),怎么办 ans:这样使用hash表的形式做lru 这种hash表形式读取的时间复杂度 解决hash冲突办法,降低读取时间复杂度的方式 ans:链地址、线性探测、rehash；通过转换为红黑树的方式 还有其他的方法吗 ans:链表 链表可以吗 ans:好像不可以，数据结构固定了 二叉树可以吗 ans:也可以，但是出现o(n)情况；二叉平衡树严格，旋转操作比较多 B树呢 ans:B树导致数据结构复杂，感觉有点重，没必要 mysql where a = xx and b = xx and c = xx, a b c 每列都有单独索引，具体怎么使用索引 ans:妈的居然答了都会用。。 聚簇索引和非聚簇索引 中断 中断之后流程 用户态和内核态 单链表从后往前每k个进行逆序，空间复杂度O(1)1，2，3，4，5，6，7k=41，2，3, 7,6,5,4k=31，4,3,2, 7,6,5Node solution(Node node,int k){1 Node head = node;2 Node res = new Node(-1);3 if(node == null){4 return;5 }6 while(node !=null){7 int l = head;8 int r = head;9 while(k--&amp;&amp;r!=null){10 r = r.next;11 }12 if(r ==null){13 break;14 }15 while(r.next!=null){16 l = l.next;17 r = r.next;18 }19 while(l!=r &amp;&amp; l.next!=null){20 Node tem = l.next.next;21 l.next.next = res.next;22 res.next = l.next;23 l.next = tem;24 }25 }26 while(head!=null){27 Node tem = head.next;28 head.next = res.next;29 res.next = head;30 head = tem;31 }32 return res.next;33} 有什么想问的吗 技术栈 技术有哪些需要深入的 三面 将二叉树左子树放到父节点和右子数中间转换为链表1public TreeNode solution(TreeNode node){2 if(node == null){3 return node;4 }5 if(node.left!=null){6 // 递归左子树7 TreeNode tail = solution(node.left);8 TreeNode left = node.left;9 node.left = null;10 node.right = left;11 tail.right = right;12 }13 // 递归右子14 solution(node.right);15 return right;16} 1/2=0.51/3=0.(3)","link":"/2020/03/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%8A%96%E9%9F%B3%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0%E4%B8%80%E9%9D%A2/"},{"title":"腾讯天美实习面试","text":"一面 个人介绍 比赛介绍 节点服务故障里如何处理 项目中多节点同时构建如何实现 mysql和redis区别 redis内存和硬盘数据一致性 aof形式，set 数据 delete数据流程 redis崩溃后如何恢复 mysql索引类型,b+树 hash冲突解决办法 大量的ip地址查找","link":"/2020/04/09/%E8%85%BE%E8%AE%AF%E5%A4%A9%E7%BE%8E%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"},{"title":"暑期实习面试准备","text":"面试 多思考，挖掘项目难点，多总结做完项目一定要总结，自己在项目中担任什么角色，解决了什么痛点，项目有哪些难点，怎么解决难点这些，以及可以优化的地方，优化方案等，可以不一定实现，但是一定要知道怎么去解决。但是如果没有想清楚难点、优化思路，再多的项目经验也白搭。 引导式面试面试肯定会遇到不会的地方，这个时候直接说不会，虽然不一定会直接挂，但是对整个面试肯定会有影响，这个时候就可以把面试官引导到自己熟悉的相关技术上，一般绝大多数面试官会让继续讲，建议可以各个方面知识都研究一个，研究深入点即可，例如缓存redis、消息队列kafka等。去理解面试官想要问的东西，主动去说，不一定要等到面试官问透，而且很多面试官表述问题不清楚，这时候一定要问清楚面试官想问的是不是你要回答的，答非所问也十分不可取。 每次面试必总结面试真的是学习技术最快的过程，很多时候自己学的，不一定学透了，经过面试官一顿灵魂拷问后发现自己什么都不会，面试完总结这些知识，然后多面试几次后面就很容易了。 自信很多时候会被面试官问到怀疑人生，也可能会经历压力面，面试问的越难，反倒可能说明面试官对你很认可，需要问些更深入的问题提高评级。不论面试官问的问题是已经准备了很久的、烂熟于心还是从未接触过，都要自信，从容面对，也千万不要因为简单问题而放松，简单问题也可以回答的不一样，例如java gc可以降到jdk11最新回收算法，这肯定比书上看到的cms g1有亮点的多，面试官也会觉得你热爱技术。 数据结构和算法 红黑树 B树和B+树 大文件排序对含有一亿数据的大文件进行排序，要求使用内存小于32MB参考链接：二叉树，平衡二叉树，红黑树，B-树、B+树、B*树的区别红黑树和AVL树（平衡二叉树）区别一步步分析为什么B+树适合作为索引的结构 以及索引原理 (阿里面试) Java基础不可不说的Java“锁”事面向对象与面向过程的优缺点面向对象五大基本原则详解反射原理补码原理——负数为什么要用补码表示跳表（SkipList）及ConcurrentSkipListMap源码解析 linux命令Linux常用命令（面试题）最全Linux 面试常用命令 Jvm 分代回收算法:http://www.importnew.com/19255.html年轻代：复制回收算法 Scavenge GC（Eden-&gt;Survivor-&gt;Survivor）老年代：年轻代n次回收后，扔存在的对象进入老年代。Full GC（老年、持久被写满或显示调用）用的是标记／清除法，老年代的垃圾回收会导致长时间的停顿持久代：存放静态文件收集器：串行：单线程效率高（适用于client模式下）；并行：多线程（最大垃圾回收暂停:吞吐量）；并发：应用不停止，响应要求高。浮动垃圾，需要保证内存空间CMS收集器，目前web服务器开发最常用的收集器，并发收集（也就是垃圾回收线程和应用程序线程同时运行）。问豪神：（由于这个阶段应用程序同时也在运行，所以并发标记阶段结束后，并不能标记出所有的存活对象。为了解决这个问题，需要再次停顿应用程序，称为 再次标记阶段（remark）） 在Java语言中，可以作为GC Roots的对象包括下面几种： 虚拟机栈（栈帧中的本地变量表）中的引用对象。方法区中的类静态属性引用的对象。方法区中的常量引用的对象。本地方法栈中JNI（Native方法）的引用对象 JVM垃圾收集器：Serial 收集器：串行收集器，使用单线程进行收集，适用于client模式ParNew收集器：Serial的多线程版本CMS 收集器：初始标记：只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿并发清除：不需要停顿 对象创建过程：检查常量池中是否有即将要创建的这个对象所属的类的符号引用；进而检查这个符号引用所代表的类是否已经被JVM加载；若该类还没有被加载，就找该类的class文件，并加载进方法区；若该类已经被JVM加载，则准备为对象分配内存；根据方法区中该类的信息确定该类所需的内存大小； 一个对象所需的内存大小是在这个对象所属类被定义完就能确定的！且一个类所生产的所有对象的内存大小是一样的！JVM在一个类被加载进方法区的时候就知道该类生产的每一个对象所需要的内存大小。从堆中划分一块对应大小的内存空间给新的对象； 分配堆中内存有两种方式：指针碰撞 －－如果JVM的垃圾收集器采用复制算法或标记-整理算法，那么堆中空闲内存是完整的区域，并且空闲内存和已使用内存之间由一个指针标记。那么当为一个对象分配内存时，只需移动指针即可。因此，这种在完整空闲区域上通过移动指针来分配内存的方式就叫做“指针碰撞”。 空闲列表 －－如果JVM的垃圾收集器采用标记-清除算法，那么堆中空闲区域和已使用区域交错，因此需要用一张“空闲列表”来记录堆中哪些区域是空闲区域，从而在创建对象的时候根据这张“空闲列表”找到空闲区域，并分配内存。为对象中的成员变量赋上初始值(默认初始化)；对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；设置对象头中的信息；调用对象的构造函数进行初始化 JVM内存模型：【Java堆】用于存储Java对象，每个Java对象都是这个对象类的副本，会复制包含继承自它父类的所有非静态属性。【方法区】用于存储类结构信息，class文件加载进JVM时会被解析成JVM识别的几个部分分别存储在不同的数据结构中：常量池、域、方法数据、方法体、构造函数，包括类中的方法、实例初始化、接口初始化等。【Java栈】和线程关联，每个线程创建的时候，JVM都会为他分配一个对应的Java栈，这个栈含有多个栈帧；栈帧则是个方法关联，每个方法的运行都会创建一个自己的栈帧，含有内存变量，操作栈、方法返回值。【PC寄存器】则用于记录下一条要执行的字节码指令地址和被中断。如果方法是 native的，程序计数器寄存器的值不会被定义为空。【本地方法栈】是为JVM运行Native方法准备的空间，类似于Java栈。 双亲委派模型 启动类加载器 拓展类加载器 应用程序类加载器 自定义加载器每个类加载器在收到类加载请求时，都不会自己先加载，而是将该请求委派给父类加载器去完成，若父类加载器可以完成该类的加载请求任务，则成功返回，若父类加载器无法完成该类的加载请求任务，子类加载器才会尝试加载，这就是双亲委派模式。 优点：采用双亲委派模式可使Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父加载器已经加载了该类时，就没有必要让子ClassLoader再加载一次。其次还可以防止子类加载器加载的类恶意覆盖Java核心API。例如，类java.lang.Object类存放在JDK\\jre\\lib下的rt.jar之中，因此无论是哪个类加载器要加载此类，最终都会委派给启动类加载器进行加载，这边保证了Object类在程序中的各种类加载器中都是同一个类。即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。 类加载 启动类加载器：Bootstrap ClassLoader，它负责加载存放在JDK\\jre\\lib(JDK代表??JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.开头的类均被Bootstrap ClassLoader加载）。启动类加载器是无法被Java程序直接引用的。扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\\jre\\lib\\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.开头的类），开发者可以直接使用扩展类加载器。应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：1）在执行非置信代码之前，自动验证数字签名。2）动态地创建符合用户特定需要的定制化构建类。3）从特定的场所取得java class，例如数据库中和网络中。 符号引用和直接引用 在java中，一个java类将会编译成一个class文件。在编译时，java类并不知道引用类的实际内存地址，因此只能使用符号引用来代替。比如org.simple.People类引用org.simple.Tool类，在编译时People类并不知道Tool类的实际内存地址，因此只能使用符号org.simple.Tool(假设)来表示Tool类的地址。而在类装载器装载People类时，此时可以通过虚拟机获取Tool类 的实际内存地址，因此便可以既将符号org.simple.Tool替换为Tool类的实际内存地址，及直接引用地址。符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中。直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定已经存在于内存之中了。 参考链接：CMS 垃圾收集器 - 工作原理，浮动垃圾，三色标记法 jvm如何判断对象是否可以回收或存活深入理解JVM虚拟机2：JVM垃圾回收基本原理和算法CMS收集器和G1收集器 他们的优缺点对比 最后并发清除 CMS 不需要停顿，G1需要停顿…Jvm介绍自定义类加载器java虚拟机的符号引用和直接引用JVM关于OOM异常的调优深入理解 Tomcat（四）Tomcat 类加载器之为何违背双亲委派模型深入理解JVM-内存模型（jmm）和GC阿里面试100%问到，JVM性能调优篇面试题之窒息翻译：类加载机制的双亲委派（正解：父委派模型）深入JVM字节码执行引擎 并发1.悲观锁：比较适合写入操作比较频繁的场景，如果出现大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。2.乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。3.线程池：新建线程 -&gt; 达到核心数 -&gt; 加入队列 -&gt; 新建线程（非核心） -&gt; 达到最大数 -&gt; 触发拒绝策略。 线程数量未达到corePoolSize，则新建一个线程(核心线程)执行任务。线程数量达到了corePools，则将任务移入队列。等待队列已满，新建线程(非核心线程)执行任务。队列已满，总线程数又达到了maximumPoolSize，就会由(RejectedExecutionHandler)抛出异常4.为什么使用线程池：单个任务处理时间比较短，需要处理的任务数量很大。降低资源消耗 提高线程的可管理性 5.newCachedThreadPool 工作线程的创建数量几乎没有限制 newFixedThreadPool newScheduledThreadPool支持定时及周期性任务执行 newSingleThreadExecutor单线程化的线程池，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行 6.线程池中的线程在新建后进入while循环，从task队列获取任务，当没有待执行任务时，若线程数量小于等于核心线程数量，若核心线程不可退出则调用队列的take阻塞直到新任务到来，若可以退出，则调用poll，时间超时后线程结束。7.CountDownLatch 利用它可以实现一个任务等待其他一个或一组任务执行后再触发的功能，不可重用。CyclicBarrier 让一组线程等待至某个状态之后再全部同时执行，可重用。8.分布式系统CAP定理：Consistency（一致性），Availability（可用性），Partition tolerance（分区容错） web场景一般可用性高于一致性 所以退而求其次追求最终一致性(eventual consistency) 分区容错在分布式系统中不可避免9.自旋锁与互斥锁：自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是 否该自旋锁的保持者已经释放了锁，所以自旋锁的效率远 高于互斥锁。虽然它的效率比互斥锁高，但是它一直占用CPU，他在未获得锁的情况下，一直运行－－自旋，所以占用着CPU，如果不能在很短的时间内获得锁，这无疑会使CPU效率降低。不适用与IO场景，单核CPU，代码长时间执行。自旋锁的实现：使用java的cas原子操作AtomicReference，循环将原子变量从null设置为当前线程，若当前原子变量不为null则一直循环。10.死锁的原因与预防：１互斥：某种资源一次只允许一个进程访问，即该资源一旦分配给某个进程 ２占有且等待：一个进程本身占有资源（一种或多种），同时还有资源未得到满足，正在等待其他进程释放该资源 ３不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。 ４循环等待：存在一个进程环，使得每个进程都占有下一个进程所需的至少一种资源。 预防的主要做法是破坏除互斥之外的三个条件11.线程与进程的区别： 一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程是操作系统可识别的最小执行和调度单位。 资源分配给进程，同一进程的所有线程共享该进程的所有资源。 同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。 引入线程的操作系统中，把线程作为调度和分派的基本单位。而把进程作为资源拥有的基本单位 系统开销 由于在创建或撤消进程时，系统都要为之分配或回收资源，如内存空间、I／o设备等。因此，操作系统所付出的开销将显著地大于在创建或撤消线程时的开销。12.进程的几种状态: 1) 运行状态：进程正在处理器上上运行。在单处理器环境下，每个时刻最多只有一个进程处于运行状态。2) 就绪状态：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器即可运行。3) 阻塞状态：又称为等待状态，进程正在等待某一事件而暂停运行，如等待某资源为可用（不包括处理器）或等待输入/输出完成。即使处理器空闲，该进程也不能运行。4) 创建状态：进程正在被创建，尚未到就绪状态。5) 结束状态：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。13.程序段(Text):程序代码在内存中的映射，存放函数体的二进制代码。初始化过的数据(Data):在程序运行初已经对变量进行初始化的数据。未初始化过的数据(BSS):在程序运行初未对变量进行初始化的数据。栈 (Stack):存储局部、临时变量，函数调用时，存储函数的返回指针，用于控制函数的调用和返回。在程序块开始时自动分配内存,结束时自动释放内存，其操作方式类似于数据结构中的栈。堆 (Heap):存储动态内存分配,需要程序员手工分配,手工释放.14.使用线程池的好处：减少创建和销毁线程导致的时间开销和内存资源开销，如果不使用线程池可能导致系统创建大量同类线程导致资源耗尽或者频繁切换15.UUID含义是通用唯一识别码 (Universally Unique Identifier) UUID由以下几部分的组合： 1）当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同 2）时钟序列。？？？问五七 3）全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得16.线程的几种创建方式：以继承Thread类的方式创建线程， 以实现Runnable接口的方式创建线程， 以Callable+FutureTask的方式创建线程17.公平锁与非公平锁的区别 非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。 非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。 公平锁和非公平锁就这两点区别，如果这两次 CAS 都不成功，那么后面非公平锁和公平锁是一样的，都要进入到阻塞队列等待唤醒。相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。18.分布式事务： TCC:Try、Confirm、Cancel Try 阶段：对各个服务的资源做检测以及对资源进行锁定。Confirm 阶段：在各个服务中执行实际的操作。Cancel 阶段：如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经执行成功的业务逻辑的回滚操作。 tcc事务原理参考链接：Java并发编程之异步Future机制的原理和实现深度解读 java 线程池设计思想及源码实现CompletableFuture原理解析CountDownLatch和CylicBarrier以及Semaphare你使用过吗[分布式]：分布式系统的CAP理论分布式事务之TCC自旋锁、排队自旋锁、MCS锁、CLH锁 Spring 动态代理 Cglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展.JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉.jdk动态代理 IOC 1.IOC: 容器ApplicationContext虽然继承自BeanFactory的接口，但其内部持有一个BeanFactory实例，用于创建和管理Bean，项目启动后调用其refresh方法进行初始化，生成所有单例模式的Bean。BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。首先会根据配置加载BeanDefinition，然后将所以的BeanDefinition存入容器的一个Map中，完成后BeanFactory的初始化完成。随后开始Bean的初始化流程，通过getBean进行加载，已经加载过的会直接返回，加载过程中遇到依赖的Bean会进行递归加载，调用无参构造函数或者构造函数依赖注入进行实例创建，然后对Bean依赖的property进行注入 2.Spring循换依赖问题：通过三级缓存和提前曝光机制解决。比如Ａ字段中依赖Ｂ，Ｂ字段中依赖Ａ。当Ａ在实例化后（对象初始化的第一步）便曝光到第三级缓存中，属性赋值Ｂ时发现没有B，便初始化Ｂ，在属性赋值Ａ时便可以在第三级缓存中找到Ａ的引用赋值，完成Ｂ的初始化，保存到第一级缓存；之后返回给Ａ完成初始化。 参考链接：Spring IOC 容器源码分析Spring如何解决循环依赖 - AOP AOP: ProxyFatoryBean用于创建代理对象，先初始化Advisor链，然后进行代理类的生成。当代理类执行方法时，会调用invoke方法，invoke方法中对aop拦截器进行检测，如果存在拦截器，则生成MethodInvocation进行拦截链的链式调用。不断得调用procced方法，每次进去后计数器自增，取出下一个拦截其，检查advise与当前的调用是否match,匹配的话将执行该advise 参考链接：Spring AOP 源码解析剑指Spring源码（三）俯瞰Spring的Bean的生命周期（大众版） Spring Cloud Ribbon 负责均衡客户端基于RestTemplate实现，通过拦截器机制实现负载均衡，在拦截器中拿到请求url中的serviceId，传入LoadBalanceClient进行服务实例的获取,获取时通过ILoadBalance负载均衡器获取服务，服务实例对象封装了ip等信息。利用服务实例初始化serviceRequestWarpper，重写getUri函数将服务id转换为ip，继续进行后续拦截链的链式调用。 参考链接：关于RestTemplate 非常推荐的几篇博文（原理剖析）spring cloud底层原理 设计模式 代理模式 静态代理：由程序员或特定工具创建代理类，在程序运行前代理类的.class文件已经存在动态代理：在程序运行时通过反射机制动态创建而成 静态代理类优缺点 优点： 代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可（解耦合），对于如上的客户端代码，newUserManagerImpl()可以应用工厂将它隐藏，如上只是举个例子而已。 缺点： 1）代理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。 2）代理对象只服务于一种类型的对象，如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了。如上的代码是只为UserManager类的访问提供了代理，但是如果还要为其他类如Department类提供代理的话，就需要我们再次添加代理Department的代理类。 参考链接：代理模式JAVA学习篇–静态代理VS动态代理项目中用到的设计模式 数据库 引擎对比MyISAM拥有较高的插入、查询速度，但不支持事务。MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，InnoDB是默认的MySQL引擎。InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件。这与MyISAM表不同，比如在MyISAM表中每个表被存放在分离的文件中。聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键。辅助索引data域存储相应记录主键的值而不是地址。InnoDB还支持外键（FOREIGN KEY） MySQL存储引擎MyISAM与InnoDB区别总结整理 事务 数据库事务的实现原理：事务每开启一个实例，都会分配一个版本号给它，如果读取的数据行正在被其它事务执行DELETE或UPDATE操作（即该行上有排他锁），这时该事物的读取操作不会等待行上的锁释放，而是根据版本号去读取行的快照数据（记录在undo log中），这样，事务中的查询操作返回的都是同一版本下的数据，解决了不可重复读问题。原子性和一致性通过Undo log来实现。UndoLog的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLog）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。RedoLog记录的是新数据的备份。在事务提交前，只要将RedoLog持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是RedoLog已经持久化。系统可以根据RedoLog的内容，将所有数据恢复到最新的状态。 脏读：是指一个事务中访问到了另外一个事务未提交的数据。不可重复读是指在一个事务内根据同一个条件对行记录进行多次查询，但是搜出来的结果却不一致。幻读是指同一个事务内多次查询返回的结果集不一样（比如增加了或者减少了行记录）。不同在于不可重复读是同一个记录的数据内容被修改了，幻读是数据行记录变多了或者少了事务隔离：read uncommitted（读取未提交数据：导致脏读） read committed（可以读取其他事务提交的数据：导致不可重复读）—大多数数据库默认的隔离级别；repeatable read（可重读：导致幻读）—MySQL默认的隔离级别；serializable（串行化：有事务读的时候其他写会被挂起） 事务特性：原子性 一致性 数据库总数从一个一致性的状态转换到另一个一致性的状态。 隔离性 一个事务所做的修改在最终提交以前，对其他事务是不可见的。 持久性 一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。 索引数据库索引分类：从数据结构角度 B+树索引 hash索引 FULLTEXT索引（InnoDB引擎5.7以后支持）R-Tree索引 从物理存储角度 聚簇索引（一般对主键建立，物理存放顺序与索引顺序是一致的） 非聚簇索引 聚簇索引中的每个叶子节点包含主键值和余下的列 mysql gap锁 只有在rr隔离级别下才会使用gap锁，会把数据库中索引行划分为一个个左开右闭的区间（相邻行记录），根据where &lt; &gt;这种查询方式，使用gap锁 MySQL innodb中各种SQL语句加锁分析和刚入门的菜鸟们聊聊–什么是聚簇索引与非聚簇索引多个单列索引和联合索引的区别详解 RedisRedis主从同步策略 主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。https://blog.csdn.net/rentuo53/article/details/84912941Redis的哨兵机制 能监控多个master-slave集群，发现master宕机后能进行自动切换。不时地监控redis是否按照预期良好地运行;如果发现某个redis节点运行出现状况，能够通知另外一个进程；能够进行自动切换（进行主备切换）。当一个master节点不可用时，能够选举出master的多个slave中的一个来作为新的master,其它的slave节点会将它所追随的master的地址改为被提升为master的slave的新地址。使用raft选举算法.缓存穿透：缓存穿透是指查询一个一定不存在的数据，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了。 解决方案：有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空，我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。缓存雪崩 缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。解决方案：缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线 程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。这里分享一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。缓存击穿 对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。解决方案 使用互斥锁(mutex key) 业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。Redis深度解析 分布式系统一致性XA协议 第一阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交 第二阶段：事务协调器要求每个数据库提交数据，或者回滚数据。 优点： 尽量保证了数据的强一致，实现成本较低，缺点: 单点问题:事务管理器如果宕机，资源管理器就会一直阻塞，导致数据库无法使用。 同步阻塞:在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。 数据不一致:两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。 数据库优化 查询优化：面对大规模数据量时，采取SELECT * FROM table WHERE id &gt;= (SELECT id FROM table LIMIT 1000000, 1) LIMIT 10; 对分页查询进行优化，由于查询出id后，会遍历按照id 去外存区table数据 然后丢弃前面的，导致效率低下。如何提高MySQL Limit查询的性能数据库优化方案整理 参考链接：MySQL的锁机制和加锁原理mysql学习MySql 三大知识点——索引、锁、事务为什么分布式一定要有redis，redis的一些优缺点q数据库本地事务的实现原理数据库 redo undo log大白话布隆过滤器谈谈数据库，缓存一致性REDIS缓存穿透，缓存击穿，缓存雪崩原因+解决方案一步步分析为什么B+树适合作为索引的结构 以及索引原理 (阿里面试)Redis持久化(rdb、aof、混合)面试中关于Redis的问题看这篇就够了 网络 tcp三次握手的本质：交换并确认双方的数据序号。 1.SYN-SENT --&gt; &lt;SEQ=100&gt;&lt;CTL=SYN&gt; --&gt; SYN-RECEIVED ​ 2.ESTABLISHED &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=SYN,ACK&gt; &lt;-- SYN-RECEIVED ​ 3.ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt; --&gt; ESTABLISHED 四次挥手，每一端的关闭请求都需要被确认一次：2（client, server）*2(FIN, ACK) 服务器主动关闭链接的话会只有两次挥手 后续会回复客户端RST TIME_WAIT的产生条件：主动关闭方在发送四次挥手的最后一个ACK（第四次挥手后不会立刻关闭）会变为TIME_WAIT状态，保留次状态的时间为两个MSL（linux里一个MSL为30s，是不可配置的） TIME_WAIT两个MSL的作用：可靠安全的关闭TCP连接。比如网络拥塞，主动方最后一个ACK被动方没收到，这时被动方会对FIN开启TCP重传，发 送多个FIN包，在这时尚未关闭的TIME_WAIT就会把这些尾巴问题处理掉，不至于对新连接及其它服务产生影响。 TIME_WAIT占用的资源：少量内存（查资料大概4K）和一个fd。 TIME_WAIT关闭的危害：1、 网络情况不好时，如果主动方无TIME_WAIT等待，关闭前个连接后，主动方与被动方又建立起新的TCP连接，这时被 动方重传或延时过来的FIN包过来后会直接影响新的TCP连接；2、 同样网络情况不好并且无TIME_WAIT等待，关闭连接后无新连接，当接收到被动 方重传或延迟的FIN包后，会给被动方回一个RST包，可能会影响被动方其它的服务连接。 TIME_WAIT过多的解决办法： net.ipv4.tcp_tw_recycle=1 表示开启TCP连接中TIME-WAIT sockets的快速回收 Reactor模式 一种比较流行的做法是服务端监听线程和 IO 线程分离，类似于 Reactor 的多线程模型。bossGrouＰ线程组实际就是 Acceptor 线程池，负责处理客户端的 TCP 连接请求，workerGroup 是真正负责 I/O 读写操作的线程组 TCP确保可靠性的机制 校验和 序列号 确认应答 超时重传 连接管理（三次握手 四次挥手） 流量控制 在TCP协议的报头信息当中，有窗口大小，即接收端接收数据缓冲区的剩余大小。接收端会在确认应答发送ACK报文时，将自己的即时窗口大小填入，并跟随ACK报文一起发送过去。而发送方根据ACK报文里的窗口大小的值的改变进而改变自己的发送速度。如果接收到窗口大小的值为0，那么发送方将停止发送数据。并定期的向接收端发送窗口探测数据段，让接收端把窗口大小告诉发送端。拥塞控制 快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认RST标志位表示强制断开链接sack selective acknowledgment，也就是选择性确认，添加sack功能需要在TCP包头加两个选项，一个是开启选项（enabling optiocookie 一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效,存放数据大小一般4K左右，而sessionStorage与localStorage大小在5兆左右，在客户端生成，localStorage除非被清除，否则会永久保存，sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除，cookie在与服务器端通信每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题,而sessionStorage与localStorage仅在客户端（即浏览器）中保存，不参与和服务器的通信。n），另一个是sack选项（sack option）本身。开启sack选项后，receiver会将自己收到了哪些包，没收到哪些包的信息记录在sack段中告诉给sender，这样sender便可以一次性重传所有的丢包。MSS : Maximum Segment Size最大分段大小 状态码:100（Continue）客户端应该继续它的请求。这个过渡的响应用于告知客户端，请求的初始部分已经被服务器收到，并且没有被服务器拒绝。客户端应该继续发送剩余的请求，如果请求已经完成，就忽略这个响应。服务器必须在请求完成后发送一个最终的响应。206状态码（Partial Content）服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。304 表明了客户端中所请求资源的缓存仍然是有效的,也就是说该资源从上次缓存到现在并没有被修改过.条件请求可以在确保客户端的资源是最新的同时避免因每次都请求完整资源给服务器带来的性能问题.301 redirect: 301 代表永久性转移(Permanently Moved) 302 redirect: 302 代表暂时性转移(Temporarily Moved ) EPoll两种工作模式 ET:当有事件发生时，系统只会通知你一次，即在调用epoll_wait返回fd后，不管这个事件你处理还是没处理，处理完没有处理完，当再次调用epoll_wait时，都不会再返回该fd LT:使用LT模式意味着只要fd处于可读或者可写状态，每次epoll_wait都会返回该fd，这样的话会带来很大的系统开销，且处理时候每次都需要把这些fd轮询一遍，如果fd的数量巨大，不管有没有事件发生，epoll_wait都会触发这些fd的轮询判断。 TCP报文段是面向字节流的，UDP包是面向数据报的 面向报文的传输方式是应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。若太短，会是IP太小。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这也就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。如果应用程序一次只发送一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去。在TCP建立连接前两次握手的SYN报文中选项字段的MSS值，通信双方商定通信的最大报文长度。如果应用层交付下来的数据过大，就会对数据分段，然后发送；否则通过滑动窗口协议来控制通信双发的数据。 tcp传输对准确性要求高速度相对可以慢，因此用于HTTP,FTP，邮件传输，远程连接；udp用于即时通讯延迟低，准确性低，网络电话，语音通信 netty的零拷贝 将内存空间分段的字节数组在逻辑上整合为一个整体的字节数组（段式内存思想，将逻辑index变成分块编号和段内偏移）参考链接：Reactor三种线程模型与Netty线程模型TCP 和 UDP 的区别TCP-IP详解：SACK选项（Selective Acknowledgment） IO 网络io发生时涉及的对象和步骤 1）等待数据准备 (Waiting for the data to be ready) 2）将数据从内核拷贝到进程中(Copying the data from the kernel to the process)web服务器和客户端完成并行处理请求三大方式并发编程(IO多路复用) 分布式 rpc如何给老婆解释什么是RPC如何实现一个简单的RPC springCloudSpringCloud面试常见问题 场景问题Reactor模式一个最简单的RPC实现及其原理架构师手把手教你如何设计一个秒杀系统？如何设计一个秒杀系统检查 1亿的手机号码以进行重复如何在有限的内存限制下实现数十亿级手机号码去重Java多线程读取大文件","link":"/2020/02/17/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"},{"title":"腾讯pcg实习面试","text":"一面 -自我介绍 linux命令 cat awk top mysql 查询 多表查询 sql语句 联合索引查询 idx(a,b) select * from t where a = 1和select * from t where b = 1 走不走索引 https://www.cnblogs.com/xcsg/p/11109713.html 垃圾回收 redis sds hash 扩容 增长因子还是二倍扩容 10TB数据找出最大值 负载均衡算法 1000个值里找最小值 二面 中间件负载均衡比赛 多个负载节点如何处理 爱奇艺实习多久 是否想来深圳发展 一面(2020/4/15) 负载均衡比赛 爱奇艺实习 象棋 马的走法，从一个位置到另一个位置要多少步数 操作系统避免重复运行程序，进程通信，kill程序算什么异常 找用户三度好友的方法，eg:1-3-4-2 找1 2这种;存储一个用户所有好友用户的所用到的内存大小","link":"/2020/03/13/%E8%85%BE%E8%AE%AFpcg%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"},{"title":"解决TIME_WAIT过多的问题","text":"TIME_WAIT产生原因一般在是TCP断开连接时，主动断开的一方会进入到TIME_WAIT的状态。此状态会保留2MSL时间（30s 1min 2min不等） 在web应用中，基于TCP的http短连接通常由Server端先断开连接，往往Server端会产生TIME_WAIT连接记录， 在高并发的应用中，此状态的连接较多。 解决办法配置文件中写入 net.ipv4.tcp_tw_recycle=1 表示开启TCP连接中TIME-WAIT sockets的快速回收 -参考连接解决TIME_WAIT过多造成的问题阿里ECS/Linux大量TIME_WAIT解决方案","link":"/2020/02/09/%E8%A7%A3%E5%86%B3TIME-WAIT%E8%BF%87%E5%A4%9A%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"阿里中间件大佬2020/04/15号经验分享","text":"校招经历 2017.12 复习课本知识，复习算法知识 2018.3 春招面试，多参加面试，积累面试经验，争取实习机会 2018.5 准备实习入职相关知识的学习，实习前相关准备，准备秋招 2018.7 实习以及秋招面试，实习以及准备秋招笔试、面试 2018.9 谈offer 2018.10 入职准备 个人建议 早准备早投递，早投递机会越大 重视基础，基础就是内功心法 勤总结,好记性不如烂笔头 有自信，坚持个人建议-准备方向 操作系统 算法 网络 意向部门相关 推荐资料：计算机网络：《计算机网络&lt;教材&gt;》linux相关：《鸟哥的linux私房菜》、《UNIX环境高级编程》算法：《编程珠玑》其他：《后台开发：核心技术与应用实践》、《程序员的自我修养》、《编码：隐匿在九三级软硬件背后的语言》 操作系统相关重点 进程管理进程线程知识、进程调度、进程的实现 内存管理操作内存管理机制 文件系统文件系统的原理 操作系统基础系统调用、中断、定时器和时间管理 例子：说说你对进程的理解？是什么、为什么、怎么做的、有什么区别、有什么联系、你用过吗、怎么调优、再深入理解一点？ 推荐一些操作系统相关资料 《现代操作系统》 《linux内核设计与实现》 《linux内核完全剖析》 《自己动手写操作系统》 《嵌入式实时操作系统μC/OS-3》","link":"/2020/04/15/%E9%98%BF%E9%87%8C%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%A7%E4%BD%AC2020-04-15%E5%8F%B7%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"},{"title":"阿里中间件大佬2020/04/12号面试经验分享","text":"准备工作阿里中间件团队博客 扎实的计算机基础 计算机组成原理 计算机网络 操作系统 基本数据结构与算法 数据库 JAVA基础 熟悉基本语法与常用库 学习源码、io、util、current、collection 了解常用框架，spring、netty、dubbo等 提高编程能力、编程比赛 阿里巴巴天池比赛 华为软件精英挑战赛 中兴捧月挑战赛积极参加项目实战对平时做的项目多思考，对使用的技术深入了了解，多方比较笔试准备 LeetCode 《编程珠玑》 《算法》 面试准备 记笔记 厚积薄发单背面经有些不够 对不同的公司专门准备","link":"/2020/04/12/%E9%98%BF%E9%87%8C%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%A7%E4%BD%AC%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"},{"title":"阿里巴巴支付宝面试","text":"一面 String s = new String(“abc);会生成几个对象 final 在java中的作用 hashMap原理 hashMap是线程安全的吗？多线程操作hashMap会出现什么问题 ConcurrentHashMap介绍下 创建线程有几种方法 线程堵塞的方法,join的形式如何用 wait()和sleep()的区别 线程池有哪些参数；线程池运行原理；任务队列为空时，情况； java内存管理 gc；cms初始标记和再次标记那个时间长；再次标记是如何标记； springBean生命周期 @autowire原理 数组中找最大值和最小值,比较次数小于2n 说说红黑树 工厂模式？优点？哪几种？ 事务隔离级别;解决什么问题;串行化问题;事务隔离如何实现 mysql锁类型;gap锁如何使用 项目中做的比较有难度的，有亮点的问题 生成jenkins api xml文件，使用jaxb技术将对象映射程xml文件 你看我这边技术栈以及技术上有哪些需要深入的地方","link":"/2020/03/06/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%94%AF%E4%BB%98%E5%AE%9D%E9%9D%A2%E8%AF%95/"},{"title":"美团到店Saas业务部门面试","text":"一面 HashSet的实现;如何判断不重复;插入数据是头插入还是尾插入 同样要遍历比较key，为啥要采用头插入 多线程了解吗;x打印值的范围为多少；如何是打印值为200，有几种方法1 public class Test implements Runnable{2 static int x;3 @override4 public void run(){5 for(int i=0;i&lt;100;i++){6 x++;7}8}9 public static void main(String[] args){10 Test test = new Test();11 new Tread(test).start();12 new Tread(test).start();13 system.out.println(x);14 }15 } condition和barrier原理是什么 AQS是干什么用的;wait notify和park unPark区别;AQS为何是双向链表;如何是实现公平锁和非公平锁 两个线程交替打印”A” “B” 1public class Test implement Runnable{2 ReentrantLock lock = new ReenTrantLock();3 Condition condition = lock.condition();4 public void run1(){5 while(true){6 // condition7 system.out.println(\"A\");8 // condition9 }10 }11 public void run1(){12 while(true){13 // condition14 system.out.println(\"B\");15 // condition16 }17 }18 public static void main(String[] args){19 Test test = new Test();20 new Thread((test) -&gt; { while(true){21 // condition22 system.out.println(\"A\");23 // condition24 }}).start();25 new Thread(() -&gt; { while(true){26 // condition27 system.out.println(\"B\");28 // condition29 }}).start();30 }31}323334// AtomicInteger3536public static void main(String[] args){37 public volatile AtomicInteger count = new AtomicInteger(1);38 new Thread((count)-&gt;{39 while(true){40 if(count == 1){41 system.out.println(\"A\");42 count.getAndIncrement();43 }44 }45 }).start();46 new Thread((count)-&gt;{47 while(true){48 if(count == 2){49 system.out.println(\"B\");50 count.getAndDec();51 }52 }53 }).start();54} 二叉树前序遍历非递归实现，后序遍历非递归实现1// pre23public void solution(TreeNode node ){4 LinkedList&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;();5 if(node == null){6 return;7 }8 stack.push(node);9 // visit node;10 while(!stack.isEmpty()){11 TreeNode tem = stack.peak();12 if(tem.left!=null){13 // visit tem.left;14 stack.push(tem.left);15 tem.left == null;16 }else{17 stack.pop();18 if(tem.right!=null){ 19 // visit tem.right20 stack.push(tem.right);21 }22 }23 }24} 订单表为何使用自增id作为主键为何不适用uuid 数据库如何回滚;多个事务如何访问数据，多个事务如何保证访问数据是安全的; x &gt; x + 1 程序员角度什么情况下会发生","link":"/2020/03/19/%E7%BE%8E%E5%9B%A2%E5%88%B0%E5%BA%97saas%E4%B8%9A%E5%8A%A1%E9%9D%A2%E8%AF%95/"},{"title":"阿里巴巴ihome团队面试","text":"一面 自我介绍 中间件比赛、负载均衡算法 使用什么java组件，底层怎么实现的，业界有哪些负载均衡算法以及优缺点 springboot springcloud 了解和使用经验,使用到springcloud哪些模块 让你自己实现rpc，讲解下思路 将注册中心分离开使用请求方式注册发现服务，使用spring resttemplate发送请求调用提供者服务 http协议是哪层协议，协议组成 不使用现有http组件请求 socket serverSocket 异步非堵塞如何使用 换成socketChannel serverSocketChannnel可以完成非堵塞，异步还需要返回句柄 为什么能完成非堵塞功能 selector 不用等待io写，到达请求后分配线程处理 这一块是用操作系统还是jvm来完成 操作系统 fd epoll 对jvm了解吗 垃圾回收原理 springbean 放在内存哪块区域 springbean 一般是单例吗 可以是多例吗 bean会一直存在spring 容器里吗 spring在后台开发中作用 mysql索引有哪些 mysql实现join b+树索引和hash索引有什么区别 不清楚 说说b+树，为什么使用B+树索引 mysql表上建的索引有哪些 不是主键索引是什么索引，二级索引了解过吗 不清楚 事务中了解过吗 都完成都不完成属于数据库哪个特性，还有哪些特性 数据隔离性都有哪些级别，都有什么问题 数据库挂掉了如何恢复,什么机制 实习中收获比较大的事情 爱奇艺怎么样 ihome团队了解过，做的是和马生鲜业务，排斥来杭州吗 有哪些要问我的吗？(你看我这边技术栈还有哪些要补充的,技术上需要再深入的地方，可否给些建议?)","link":"/2020/03/03/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ihome%E5%9B%A2%E9%98%9F%E9%9D%A2%E8%AF%95/"},{"title":"阿里巴巴淘宝互动平台实习生面试","text":"一面(2020.3.9 11:10) 自我介绍 项目介绍 负载均衡 常用的负载均衡算法、有没有看过其他优秀的比赛代码 tcp StringBuilder StringBuffer jvm内存后续记不得了 二面(2020.3.11 10:15) 为何去爱奇艺实习,其他同学去了吗 还是就你自己去了 实习经历描述 安卓和电视客户端包形式有何不同 一般来说都是apk形式的，就是功能上 安卓的更倾向于支持点、划等触屏操作，电视上则是遥控器上的相关操作 为何考虑转移到jenkins构建，还有其他的构建平台吗？jenkins如何做到构建的 CruiseControl 阿里云效 Hudson pipeline介绍下，ant gradle的区别和优缺点 于是jenkins2.x开始流行pipeline的写法，以代码的方式来进行job的构建。 ANT是最早的构建工具，基于idea,好象是2000年有的，当时是最流行java构建工具，不过它的XML脚本编写格式让XML文件特别大。对工程构建过程中的过程控制特别好。 Maven它是用来给Ant补坑的，Maven第一次支持了从网络上下载的功能，仍然采用xml作为配置文件格式，它的问题是不能很好的相同库文件的版本冲突。Maven专注的是依赖管理，构建神马的并不擅长。 Gradle是一个自动化的构建工具，Gradle属于结合以上两个的优点，它继承了Ant的灵活和Maven的生命周期管理，它最后被google作为了Android御用管理工具。它最大的*区别是不用XML作为配置文件格式，采用了DSL格式，使得脚本更加简洁。Gradle引入了基于Groovy语言的DSL语法来代替XML配置，因此它的配置文件是一个Groovy文件。 多节点无锁构建如何实现？和数据加锁有何区别?你这种实现方式缺点是什么？还有什么其他解决方案 使用redis如何使用加锁，为何redis是原子性的 redis的hash表是如何实现的和java的hash表有什么区别 redis的字符串如何是实现,search list如何实现 mysql索引如何实现,mysql如何实现加锁 有没有其他的实现缓存的nosql数据库,redis和memcache的区别 spring springboot springcloud springboot自动配置 Spring Boot面试杀手锏————自动配置原理 java为何标了注解可以实现相应的功能 spring bean初始化过程 解析xml的方法 SAX DOM JAXB java xml解析工：dom4j , jdom , jaxb , stax, sax的具适用场景比较 jaxb和dom方式的区别 性能和解析复杂程度上 http1 http2的区别 http 301 302区别 301永久性转移 302暂时性转移 如何验证负载均衡的效果 rest和rpc有什么区别 有什么想问的","link":"/2020/03/11/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%B7%98%E5%AE%9D%E4%BA%92%E5%8A%A8%E5%B9%B3%E5%8F%B0%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/"},{"title":"阿里巴巴用户增长部提前批面经","text":"用户增长部２月２０号做了笔试，三道题目 1、单向链表“双节”点逆转 ，比如：1-&gt;2 -&gt;3 -&gt;4 -&gt;5 逆转后 4-&gt;5-&gt;2-&gt;3-&gt;1 1 public class solution{2 3 public class Node{4 int value;5 Node next;6}7 8 public Node solution(node root){9 if(root == null || root.next == null){10 return root11 }12Node index = root.next;13 root.next = null;14 Node last;15 while(index != null &amp;&amp; index.next != null) {16 Node tem = index.next.next17 index.next.next =root;18 root = index;19 index = tem;2021 }22if(index != null){23 index.next = root;24 root = index;25}26 return root;27 } 2、给定一棵二叉树，每个节点只包含数字0-9，从根节点到叶子节点的每条路径可以表示成一个数，请这些数的和。例如从根节点到叶子节点分别为1-&gt;2-&gt;3，那么这条路径代表数字123。求所有路径代表的数字的和 1 public class Solution{2 public class Node{3 int value;4 Node left;5 Node right;6}7 8 ArrayList&lt;Integer&gt; res = new ArrayList&lt;&gt;();9 public Integer solution(Node node){10 if(node == null){11 return 0;12 }13 trace(node,0);14 int sum = 0;15 for(Integer value: res){16 sum+=value;17 }18 return sum;19 }20 private void trace(Node node , int value){21 if(node == null){22 res.add(value);23 }else{24 int sum = value*10+node.value;25 trace(node.left,sum);26 trace(node.right,sum);27 }28 }29 } 3、微信群聊中,每个人都有未读消息和 已读消息,如何设计提供每个人显示多少未读消息且能快速找到具体的未读消息(假设是一周时间段,如果是群人数有限和群人数无限)? 请使用 最少的存储空间和最快速的查找算法 来解决 answer: － wechat类模拟群，wechat的ａｄｄ方法在将增加ｕｓｅｒｓ的messageNum数量（即未读消息数量）并且在数据表中写入消息（消息仅写入一次）、用户消息关联、用户未读消息数量，用户关联表ｓｔａｔｅ初始消息为未读；－ 根据这个可以将用户的所有未读消息查询出来，每个消息有时间戳字段（默认时间戳排序），根据时间二分法就可以查询；若根据内容查询，ｍｅｓｓａｇｅ有根据内容生成的ｈａｓｈ字段，可依此存入容器查询，或者使用快速查找均可； public class Wechat{ private List&lt;User&gt; users; public void add(){ 增加用户未读信息数量; } } public class User{ private Long userId; private Integer messageNum; } /** 可一条消息对应多个用户 BUseMessage为用户与消息关联表 */ public class BUseMessage{ private Long UserId; private Long messageId; //是否已读 private Integer state; } public class Message{ private Long messageId; private String content; private Long timeStamp; private Integar state; // 根据content生成ｈａｓｈ值 private Long hash; public Long hashcod(){ return hash; } } 商家成长部２月２２号收到商家增长部提前批面试 个人介绍 喜欢干啥 阅读过哪些中间件源码，擅长的技术 获奖 tcp udp区别 一个消息包从北京发送的广州的流程 说说arp协议 说说面向对象的几个原则 面向对象的优点 计算机内负数怎么表示，为什么 三次握手的过程 二次握手的问题 说说滑动窗口协议 hashmap的get过程 synchronized用法，方法添加static的区别 说说cap","link":"/2020/02/24/%E7%94%A8%E6%88%B7%E5%A2%9E%E9%95%BF%E9%83%A8%E6%8F%90%E5%89%8D%E6%89%B9%E9%9D%A2%E7%BB%8F/"},{"title":"阿里巴巴钉钉面试","text":"一面 个人介绍 项目介绍 亮点 多节点乐观锁实现 重复支付解决办法 支付系统设计中，如何防止重复支付? rbac介绍 具体实现 hashcode equal HashMap HashTable concurrentHashMap springboot配置Control步骤 servlet 常见设计模式 观察者模式 出二维迷宫算法 快排算法 最长子序列和 dp 01背包问题 二分查找在线编程 您看我的技术栈的补充以及技术水平有哪些需要深入的地方，可否给些建议？（问题） 二面 个人介绍 项目中的挑战性问题 具体实现 负载均衡比赛中剩余能力算法的具体实现 比赛评估依据 项目技术选型 为何这么选，其他实现方式的优缺点 springboot+vue的好处 springboot简化编码，starter-web依赖spring springmvc tomcat多个包 简化配置 注解形式 简化部署 java -jar *.jar jvm内存管理 full gc过程 stop the word时间降低原因 rbac模型 其他技术选型比较 项目中 你做的优化的点 常用的数据结构以及使用场景 eg:hashmap redis的数据结构 为何使用redis 好处 项目中为何使用redis，分布式锁为何使用redis,其他分布式锁实现，zookeeper的了解 Java分布式锁看这篇就够了 常见的设计模式 项目中实际使用的的设计模式,具体实现 tcp协议如何保证可靠连接的 快重传机制 ioc 如何获取bean 项目中怎么使用的springcloud 用到的springcloud组件 职业规划 对钉钉的了解 对阿里的了解以及企业文化 您看我的技术栈的补充以及技术水平有哪些需要深入的地方，可否给些建议？（问题） 那您看我还有下次的机会吗?(问题) 有没有投其他公司的简历或者阿里其他部门 如果进阿里的话，你个人的优势 开源相关 hr面 自我介绍 说一下项目中的难点，你在里面承担了什么角色，如何和同学协作，如何解决 介绍了钉钉开放平台的业务 有什么问题 交叉面 自我介绍 成绩绩点 array ArrayList区别 进程和线程概念 区别 计网七层 jdk jre区别 爱奇艺实习 烧一根不均匀的绳子需要一小时，用烧绳法如何确定1小时15分钟 评测题目: 无Given a string, determine if it is a palindrome（回文，如果不清楚，按字面意思脑补下）, considering only alphanumeric characters and ignoring cases.For example,“A man, a plan, a canal: Panama” is a palindrome.“race a car” is not a palindrome.Note: ====Have you consider that the string might be empty? This is a good question to ask during an interview.For the purpose of this problem, we define empty string as valid palindrome.1// Write your code here2public boolean solution(String str){3 int count = 0;4 int[] ch = new int[str.length()];5 for(int i=0;i&lt;str.length();i++){6 if((str.charAt(i)&gt;='a'&amp;&amp;str.charAt(i)&lt;='z')7 ||(str.charAt(i)&gt;='A'&amp;&amp;str.charAt(i)&lt;='Z'){8 char c = str.charAt(i);9ch[count++] = c&gt;='A'?c-'A':c-'a'; 10 }11 }12 for(int i =0;i&lt;count/2;i++){13 if(ch[i]!=ch[count-1-i]){14 return false;}15 }16 return true;17}","link":"/2020/02/29/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E9%92%89%E9%92%89%E9%9D%A2%E8%AF%95/"},{"title":"面试技巧","text":"知之为知之，不知为不知 知道就说知道，不知道就说不知道 堵而抑之，不如疏而导之 不知道，但是可以说我会其他的 “唱跳rap”。 多说些细节，展开来说，把主动权掌握在自己手中； 如果不问题只说一点点结束，面试官就不挺的追问你，很被动，问到不熟悉的领域，就要减分 举一隅不以三隅反，则不复也 知道多少就说多少，知道５种方法，就说５种方法，别只说３种。 温故而知新 时常复习，整体上复盘每一次面试，总结经验 具体的点 自信 表达观点、回答问题时要自信，不要怯懦、含糊不清 自我介绍 简历上有的可以一两句话带过，重点回答面试官关心的问题，那就是求职者能否胜任工作。 包括：***的技能、最深入研究的技术领域、个性中最积极的部分、做过的最成功的事， 主要的成就等，这些都可以和学习无关，也可以和学习有关，重点突出好的人格和做事的能力。 遇到的难点 不需要说一定要解决了多么困难的问题，好好把为什么会碰到这个问题， 这个问题是什么，自己遇到问题如何做的，如何解决的这个问题，怎么找到的解决方法， 整个过程说的详细一些，说清楚明白就好 回答问题 不明白面试官问题或者对问题有些疑惑的时候，多与面试官沟通，问题具体什么 问面试官问题 要结合面试的岗位来，公司业务、对新入职的员工的培养模式、 转正要求、公司晋升机制、岗位属于哪个部门、团队有多少人","link":"/2020/03/31/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"learning","slug":"learning","link":"/tags/learning/"},{"name":"learning Array","slug":"learning-Array","link":"/tags/learning-Array/"},{"name":"learning set","slug":"learning-set","link":"/tags/learning-set/"},{"name":"interview","slug":"interview","link":"/tags/interview/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"},{"name":"stack","slug":"stack","link":"/tags/stack/"},{"name":"alibaba","slug":"alibaba","link":"/tags/alibaba/"},{"name":"TCP","slug":"TCP","link":"/tags/TCP/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"快手","slug":"快手","link":"/tags/%E5%BF%AB%E6%89%8B/"},{"name":"bytedance","slug":"bytedance","link":"/tags/bytedance/"},{"name":"腾讯","slug":"腾讯","link":"/tags/%E8%85%BE%E8%AE%AF/"},{"name":"经验分享","slug":"经验分享","link":"/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"},{"name":"美团","slug":"美团","link":"/tags/%E7%BE%8E%E5%9B%A2/"}],"categories":[{"name":"learning","slug":"learning","link":"/categories/learning/"},{"name":"leetcode","slug":"leetcode","link":"/categories/leetcode/"},{"name":"note","slug":"note","link":"/categories/note/"},{"name":"读书","slug":"读书","link":"/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"面试","slug":"面试","link":"/categories/%E9%9D%A2%E8%AF%95/"},{"name":"设计模式","slug":"设计模式","link":"/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"程序人生","slug":"程序人生","link":"/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"},{"name":"网络","slug":"网络","link":"/categories/%E7%BD%91%E7%BB%9C/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}